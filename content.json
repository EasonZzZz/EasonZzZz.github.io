{"meta":{"title":"Nice To Meet U","subtitle":null,"description":null,"author":"EasonZzZz","url":"http://yoursite.com","root":"/"},"pages":[{"title":"分类","date":"2019-10-23T02:20:12.000Z","updated":"2019-10-23T02:21:14.417Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-10-23T02:21:11.000Z","updated":"2019-10-23T02:21:44.170Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"","date":"2019-10-23T03:11:06.203Z","updated":"2019-10-23T03:11:06.203Z","comments":true,"path":"lib/fancybox/README.html","permalink":"http://yoursite.com/lib/fancybox/README.html","excerpt":"","text":"fancyBox 3 for NexT If you want fancybox v2, please go to theme-next-fancybox Installation Step 0 &rarr; Delete fancybox 2 (if you want to upgrade from v2) 1$ rm -rf themes/next/source/lib/fancybox If you want to use the CDN instead of clone this repo, please jump to the Step 3. Step 1 &rarr; Go to NexT dir Change dir to NexT directory. There must be layout, source, languages and other directories: 123$ cd themes/next$ lsbower.json _config.yml docs gulpfile.coffee languages layout LICENSE.md package.json README.md scripts source test Step 2 &rarr; Get module Install module to source/lib directory: 1$ git clone https://github.com/theme-next/theme-next-fancybox3 source/lib/fancybox Step 3 &rarr; Set it up Enable module in NexT _config.yml file: 1fancybox: true And, if you wants to use the CDN, then need to set: 1234vendors: ... fancybox: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js fancybox_css: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css Update 12$ cd themes/next/source/lib/fancybox$ git pull"},{"title":"","date":"2019-10-23T03:11:06.203Z","updated":"2019-10-23T03:11:06.203Z","comments":true,"path":"lib/fancybox/source/jquery.fancybox.min.css","permalink":"http://yoursite.com/lib/fancybox/source/jquery.fancybox.min.css","excerpt":"","text":"body.compensate-for-scrollbar{overflow:hidden}.fancybox-active{height:auto}.fancybox-is-hidden{left:-9999px;margin:0;position:absolute!important;top:-9999px;visibility:hidden}.fancybox-container{-webkit-backface-visibility:hidden;height:100%;left:0;outline:none;position:fixed;-webkit-tap-highlight-color:transparent;top:0;-ms-touch-action:manipulation;touch-action:manipulation;transform:translateZ(0);width:100%;z-index:99992}.fancybox-container *{box-sizing:border-box}.fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-stage{bottom:0;left:0;position:absolute;right:0;top:0}.fancybox-outer{-webkit-overflow-scrolling:touch;overflow-y:auto}.fancybox-bg{background:#1e1e1e;opacity:0;transition-duration:inherit;transition-property:opacity;transition-timing-function:cubic-bezier(.47,0,.74,.71)}.fancybox-is-open .fancybox-bg{opacity:.9;transition-timing-function:cubic-bezier(.22,.61,.36,1)}.fancybox-caption,.fancybox-infobar,.fancybox-navigation .fancybox-button,.fancybox-toolbar{direction:ltr;opacity:0;position:absolute;transition:opacity .25s ease,visibility 0s ease .25s;visibility:hidden;z-index:99997}.fancybox-show-caption .fancybox-caption,.fancybox-show-infobar .fancybox-infobar,.fancybox-show-nav .fancybox-navigation .fancybox-button,.fancybox-show-toolbar .fancybox-toolbar{opacity:1;transition:opacity .25s ease 0s,visibility 0s ease 0s;visibility:visible}.fancybox-infobar{color:#ccc;font-size:13px;-webkit-font-smoothing:subpixel-antialiased;height:44px;left:0;line-height:44px;min-width:44px;mix-blend-mode:difference;padding:0 10px;pointer-events:none;top:0;-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.fancybox-toolbar{right:0;top:0}.fancybox-stage{direction:ltr;overflow:visible;transform:translateZ(0);z-index:99994}.fancybox-is-open .fancybox-stage{overflow:hidden}.fancybox-slide{-webkit-backface-visibility:hidden;display:none;height:100%;left:0;outline:none;overflow:auto;-webkit-overflow-scrolling:touch;padding:44px;position:absolute;text-align:center;top:0;transition-property:transform,opacity;white-space:normal;width:100%;z-index:99994}.fancybox-slide:before{content:\"\";display:inline-block;font-size:0;height:100%;vertical-align:middle;width:0}.fancybox-is-sliding .fancybox-slide,.fancybox-slide--current,.fancybox-slide--next,.fancybox-slide--previous{display:block}.fancybox-slide--image{overflow:hidden;padding:44px 0}.fancybox-slide--image:before{display:none}.fancybox-slide--html{padding:6px}.fancybox-content{background:#fff;display:inline-block;margin:0;max-width:100%;overflow:auto;-webkit-overflow-scrolling:touch;padding:44px;position:relative;text-align:left;vertical-align:middle}.fancybox-slide--image .fancybox-content{animation-timing-function:cubic-bezier(.5,0,.14,1);-webkit-backface-visibility:hidden;background:transparent;background-repeat:no-repeat;background-size:100% 100%;left:0;max-width:none;overflow:visible;padding:0;position:absolute;top:0;transform-origin:top left;transition-property:transform,opacity;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:99995}.fancybox-can-zoomOut .fancybox-content{cursor:zoom-out}.fancybox-can-zoomIn .fancybox-content{cursor:zoom-in}.fancybox-can-pan .fancybox-content,.fancybox-can-swipe .fancybox-content{cursor:grab}.fancybox-is-grabbing .fancybox-content{cursor:grabbing}.fancybox-container [data-selectable=true]{cursor:text}.fancybox-image,.fancybox-spaceball{background:transparent;border:0;height:100%;left:0;margin:0;max-height:none;max-width:none;padding:0;position:absolute;top:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:100%}.fancybox-spaceball{z-index:1}.fancybox-slide--iframe .fancybox-content,.fancybox-slide--map .fancybox-content,.fancybox-slide--pdf .fancybox-content,.fancybox-slide--video .fancybox-content{height:100%;overflow:visible;padding:0;width:100%}.fancybox-slide--video .fancybox-content{background:#000}.fancybox-slide--map .fancybox-content{background:#e5e3df}.fancybox-slide--iframe .fancybox-content{background:#fff}.fancybox-iframe,.fancybox-video{background:transparent;border:0;display:block;height:100%;margin:0;overflow:hidden;padding:0;width:100%}.fancybox-iframe{left:0;position:absolute;top:0}.fancybox-error{background:#fff;cursor:default;max-width:400px;padding:40px;width:100%}.fancybox-error p{color:#444;font-size:16px;line-height:20px;margin:0;padding:0}.fancybox-button{background:rgba(30,30,30,.6);border:0;border-radius:0;box-shadow:none;cursor:pointer;display:inline-block;height:44px;margin:0;padding:10px;position:relative;transition:color .2s;vertical-align:top;visibility:inherit;width:44px}.fancybox-button,.fancybox-button:link,.fancybox-button:visited{color:#ccc}.fancybox-button:hover{color:#fff}.fancybox-button:focus{outline:none}.fancybox-button.fancybox-focus{outline:1px dotted}.fancybox-button[disabled],.fancybox-button[disabled]:hover{color:#888;cursor:default;outline:none}.fancybox-button div{height:100%}.fancybox-button svg{display:block;height:100%;overflow:visible;position:relative;width:100%}.fancybox-button svg path{fill:currentColor;stroke-width:0}.fancybox-button--fsenter svg:nth-child(2),.fancybox-button--fsexit svg:first-child,.fancybox-button--pause svg:first-child,.fancybox-button--play svg:nth-child(2){display:none}.fancybox-progress{background:#ff5268;height:2px;left:0;position:absolute;right:0;top:0;transform:scaleX(0);transform-origin:0;transition-property:transform;transition-timing-function:linear;z-index:99998}.fancybox-close-small{background:transparent;border:0;border-radius:0;color:#ccc;cursor:pointer;opacity:.8;padding:8px;position:absolute;right:-12px;top:-44px;z-index:401}.fancybox-close-small:hover{color:#fff;opacity:1}.fancybox-slide--html .fancybox-close-small{color:currentColor;padding:10px;right:0;top:0}.fancybox-slide--image.fancybox-is-scaling .fancybox-content{overflow:hidden}.fancybox-is-scaling .fancybox-close-small,.fancybox-is-zoomable.fancybox-can-pan .fancybox-close-small{display:none}.fancybox-navigation .fancybox-button{background-clip:content-box;height:100px;opacity:0;position:absolute;top:calc(50% - 50px);width:70px}.fancybox-navigation .fancybox-button div{padding:7px}.fancybox-navigation .fancybox-button--arrow_left{left:0;left:env(safe-area-inset-left);padding:31px 26px 31px 6px}.fancybox-navigation .fancybox-button--arrow_right{padding:31px 6px 31px 26px;right:0;right:env(safe-area-inset-right)}.fancybox-caption{background:linear-gradient(0deg,rgba(0,0,0,.85) 0,rgba(0,0,0,.3) 50%,rgba(0,0,0,.15) 65%,rgba(0,0,0,.075) 75.5%,rgba(0,0,0,.037) 82.85%,rgba(0,0,0,.019) 88%,transparent);bottom:0;color:#eee;font-size:14px;font-weight:400;left:0;line-height:1.5;padding:75px 44px 25px;pointer-events:none;right:0;text-align:center;z-index:99996}@supports (padding:max(0px)){.fancybox-caption{padding:75px max(44px,env(safe-area-inset-right)) max(25px,env(safe-area-inset-bottom)) max(44px,env(safe-area-inset-left))}}.fancybox-caption--separate{margin-top:-50px}.fancybox-caption__body{max-height:50vh;overflow:auto;pointer-events:all}.fancybox-caption a,.fancybox-caption a:link,.fancybox-caption a:visited{color:#ccc;text-decoration:none}.fancybox-caption a:hover{color:#fff;text-decoration:underline}.fancybox-loading{animation:a 1s linear infinite;background:transparent;border:4px solid #888;border-bottom-color:#fff;border-radius:50%;height:50px;left:50%;margin:-25px 0 0 -25px;opacity:.7;padding:0;position:absolute;top:50%;width:50px;z-index:99999}@keyframes a{to{transform:rotate(1turn)}}.fancybox-animated{transition-timing-function:cubic-bezier(0,0,.25,1)}.fancybox-fx-slide.fancybox-slide--previous{opacity:0;transform:translate3d(-100%,0,0)}.fancybox-fx-slide.fancybox-slide--next{opacity:0;transform:translate3d(100%,0,0)}.fancybox-fx-slide.fancybox-slide--current{opacity:1;transform:translateZ(0)}.fancybox-fx-fade.fancybox-slide--next,.fancybox-fx-fade.fancybox-slide--previous{opacity:0;transition-timing-function:cubic-bezier(.19,1,.22,1)}.fancybox-fx-fade.fancybox-slide--current{opacity:1}.fancybox-fx-zoom-in-out.fancybox-slide--previous{opacity:0;transform:scale3d(1.5,1.5,1.5)}.fancybox-fx-zoom-in-out.fancybox-slide--next{opacity:0;transform:scale3d(.5,.5,.5)}.fancybox-fx-zoom-in-out.fancybox-slide--current{opacity:1;transform:scaleX(1)}.fancybox-fx-rotate.fancybox-slide--previous{opacity:0;transform:rotate(-1turn)}.fancybox-fx-rotate.fancybox-slide--next{opacity:0;transform:rotate(1turn)}.fancybox-fx-rotate.fancybox-slide--current{opacity:1;transform:rotate(0deg)}.fancybox-fx-circular.fancybox-slide--previous{opacity:0;transform:scale3d(0,0,0) translate3d(-100%,0,0)}.fancybox-fx-circular.fancybox-slide--next{opacity:0;transform:scale3d(0,0,0) translate3d(100%,0,0)}.fancybox-fx-circular.fancybox-slide--current{opacity:1;transform:scaleX(1) translateZ(0)}.fancybox-fx-tube.fancybox-slide--previous{transform:translate3d(-100%,0,0) scale(.1) skew(-10deg)}.fancybox-fx-tube.fancybox-slide--next{transform:translate3d(100%,0,0) scale(.1) skew(10deg)}.fancybox-fx-tube.fancybox-slide--current{transform:translateZ(0) scale(1)}@media (max-height:576px){.fancybox-slide{padding-left:6px;padding-right:6px}.fancybox-slide--image{padding:6px 0}.fancybox-close-small{right:-6px}.fancybox-slide--image .fancybox-close-small{background:#4e4e4e;color:#f2f4f6;height:36px;opacity:1;padding:6px;right:0;top:0;width:36px}.fancybox-caption{padding-left:12px;padding-right:12px}@supports (padding:max(0px)){.fancybox-caption{padding-left:max(12px,env(safe-area-inset-left));padding-right:max(12px,env(safe-area-inset-right))}}}.fancybox-share{background:#f4f4f4;border-radius:3px;max-width:90%;padding:30px;text-align:center}.fancybox-share h1{color:#222;font-size:35px;font-weight:700;margin:0 0 20px}.fancybox-share p{margin:0;padding:0}.fancybox-share__button{border:0;border-radius:3px;display:inline-block;font-size:14px;font-weight:700;line-height:40px;margin:0 5px 10px;min-width:130px;padding:0 15px;text-decoration:none;transition:all .2s;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;white-space:nowrap}.fancybox-share__button:link,.fancybox-share__button:visited{color:#fff}.fancybox-share__button:hover{text-decoration:none}.fancybox-share__button--fb{background:#3b5998}.fancybox-share__button--fb:hover{background:#344e86}.fancybox-share__button--pt{background:#bd081d}.fancybox-share__button--pt:hover{background:#aa0719}.fancybox-share__button--tw{background:#1da1f2}.fancybox-share__button--tw:hover{background:#0d95e8}.fancybox-share__button svg{height:25px;margin-right:7px;position:relative;top:-1px;vertical-align:middle;width:25px}.fancybox-share__button svg path{fill:#fff}.fancybox-share__input{background:transparent;border:0;border-bottom:1px solid #d7d7d7;border-radius:0;color:#5d5b5b;font-size:14px;margin:10px 0 0;outline:none;padding:10px 15px;width:100%}.fancybox-thumbs{background:#ddd;bottom:0;display:none;margin:0;-webkit-overflow-scrolling:touch;-ms-overflow-style:-ms-autohiding-scrollbar;padding:2px 2px 4px;position:absolute;right:0;-webkit-tap-highlight-color:rgba(0,0,0,0);top:0;width:212px;z-index:99995}.fancybox-thumbs-x{overflow-x:auto;overflow-y:hidden}.fancybox-show-thumbs .fancybox-thumbs{display:block}.fancybox-show-thumbs .fancybox-inner{right:212px}.fancybox-thumbs__list{font-size:0;height:100%;list-style:none;margin:0;overflow-x:hidden;overflow-y:auto;padding:0;position:absolute;position:relative;white-space:nowrap;width:100%}.fancybox-thumbs-x .fancybox-thumbs__list{overflow:hidden}.fancybox-thumbs-y .fancybox-thumbs__list::-webkit-scrollbar{width:7px}.fancybox-thumbs-y .fancybox-thumbs__list::-webkit-scrollbar-track{background:#fff;border-radius:10px;box-shadow:inset 0 0 6px rgba(0,0,0,.3)}.fancybox-thumbs-y .fancybox-thumbs__list::-webkit-scrollbar-thumb{background:#2a2a2a;border-radius:10px}.fancybox-thumbs__list a{-webkit-backface-visibility:hidden;backface-visibility:hidden;background-color:rgba(0,0,0,.1);background-position:50%;background-repeat:no-repeat;background-size:cover;cursor:pointer;float:left;height:75px;margin:2px;max-height:calc(100% - 8px);max-width:calc(50% - 4px);outline:none;overflow:hidden;padding:0;position:relative;-webkit-tap-highlight-color:transparent;width:100px}.fancybox-thumbs__list a:before{border:6px solid #ff5268;bottom:0;content:\"\";left:0;opacity:0;position:absolute;right:0;top:0;transition:all .2s cubic-bezier(.25,.46,.45,.94);z-index:99991}.fancybox-thumbs__list a:focus:before{opacity:.5}.fancybox-thumbs__list a.fancybox-thumbs-active:before{opacity:1}@media (max-width:576px){.fancybox-thumbs{width:110px}.fancybox-show-thumbs .fancybox-inner{right:110px}.fancybox-thumbs__list a{max-width:calc(100% - 10px)}}"},{"title":"","date":"2019-10-23T03:11:06.203Z","updated":"2019-10-23T03:11:06.203Z","comments":true,"path":"lib/fancybox/source/jquery.fancybox.css","permalink":"http://yoursite.com/lib/fancybox/source/jquery.fancybox.css","excerpt":"","text":"body.compensate-for-scrollbar { overflow: hidden; } .fancybox-active { height: auto; } .fancybox-is-hidden { left: -9999px; margin: 0; position: absolute !important; top: -9999px; visibility: hidden; } .fancybox-container { -webkit-backface-visibility: hidden; height: 100%; left: 0; outline: none; position: fixed; -webkit-tap-highlight-color: transparent; top: 0; -ms-touch-action: manipulation; touch-action: manipulation; transform: translateZ(0); width: 100%; z-index: 99992; } .fancybox-container * { box-sizing: border-box; } .fancybox-outer, .fancybox-inner, .fancybox-bg, .fancybox-stage { bottom: 0; left: 0; position: absolute; right: 0; top: 0; } .fancybox-outer { -webkit-overflow-scrolling: touch; overflow-y: auto; } .fancybox-bg { background: rgb(30, 30, 30); opacity: 0; transition-duration: inherit; transition-property: opacity; transition-timing-function: cubic-bezier(.47, 0, .74, .71); } .fancybox-is-open .fancybox-bg { opacity: .9; transition-timing-function: cubic-bezier(.22, .61, .36, 1); } .fancybox-infobar, .fancybox-toolbar, .fancybox-caption, .fancybox-navigation .fancybox-button { direction: ltr; opacity: 0; position: absolute; transition: opacity .25s ease, visibility 0s ease .25s; visibility: hidden; z-index: 99997; } .fancybox-show-infobar .fancybox-infobar, .fancybox-show-toolbar .fancybox-toolbar, .fancybox-show-caption .fancybox-caption, .fancybox-show-nav .fancybox-navigation .fancybox-button { opacity: 1; transition: opacity .25s ease 0s, visibility 0s ease 0s; visibility: visible; } .fancybox-infobar { color: #ccc; font-size: 13px; -webkit-font-smoothing: subpixel-antialiased; height: 44px; left: 0; line-height: 44px; min-width: 44px; mix-blend-mode: difference; padding: 0 10px; pointer-events: none; top: 0; -webkit-touch-callout: none; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; } .fancybox-toolbar { right: 0; top: 0; } .fancybox-stage { direction: ltr; overflow: visible; transform: translateZ(0); z-index: 99994; } .fancybox-is-open .fancybox-stage { overflow: hidden; } .fancybox-slide { -webkit-backface-visibility: hidden; /* Using without prefix would break IE11 */ display: none; height: 100%; left: 0; outline: none; overflow: auto; -webkit-overflow-scrolling: touch; padding: 44px; position: absolute; text-align: center; top: 0; transition-property: transform, opacity; white-space: normal; width: 100%; z-index: 99994; } .fancybox-slide::before { content: ''; display: inline-block; font-size: 0; height: 100%; vertical-align: middle; width: 0; } .fancybox-is-sliding .fancybox-slide, .fancybox-slide--previous, .fancybox-slide--current, .fancybox-slide--next { display: block; } .fancybox-slide--image { overflow: hidden; padding: 44px 0; } .fancybox-slide--image::before { display: none; } .fancybox-slide--html { padding: 6px; } .fancybox-content { background: #fff; display: inline-block; margin: 0; max-width: 100%; overflow: auto; -webkit-overflow-scrolling: touch; padding: 44px; position: relative; text-align: left; vertical-align: middle; } .fancybox-slide--image .fancybox-content { animation-timing-function: cubic-bezier(.5, 0, .14, 1); -webkit-backface-visibility: hidden; background: transparent; background-repeat: no-repeat; background-size: 100% 100%; left: 0; max-width: none; overflow: visible; padding: 0; position: absolute; top: 0; -ms-transform-origin: top left; transform-origin: top left; transition-property: transform, opacity; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; z-index: 99995; } .fancybox-can-zoomOut .fancybox-content { cursor: zoom-out; } .fancybox-can-zoomIn .fancybox-content { cursor: zoom-in; } .fancybox-can-swipe .fancybox-content, .fancybox-can-pan .fancybox-content { cursor: -webkit-grab; cursor: grab; } .fancybox-is-grabbing .fancybox-content { cursor: -webkit-grabbing; cursor: grabbing; } .fancybox-container [data-selectable='true'] { cursor: text; } .fancybox-image, .fancybox-spaceball { background: transparent; border: 0; height: 100%; left: 0; margin: 0; max-height: none; max-width: none; padding: 0; position: absolute; top: 0; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; width: 100%; } .fancybox-spaceball { z-index: 1; } .fancybox-slide--video .fancybox-content, .fancybox-slide--map .fancybox-content, .fancybox-slide--pdf .fancybox-content, .fancybox-slide--iframe .fancybox-content { height: 100%; overflow: visible; padding: 0; width: 100%; } .fancybox-slide--video .fancybox-content { background: #000; } .fancybox-slide--map .fancybox-content { background: #e5e3df; } .fancybox-slide--iframe .fancybox-content { background: #fff; } .fancybox-video, .fancybox-iframe { background: transparent; border: 0; display: block; height: 100%; margin: 0; overflow: hidden; padding: 0; width: 100%; } /* Fix iOS */ .fancybox-iframe { left: 0; position: absolute; top: 0; } .fancybox-error { background: #fff; cursor: default; max-width: 400px; padding: 40px; width: 100%; } .fancybox-error p { color: #444; font-size: 16px; line-height: 20px; margin: 0; padding: 0; } /* Buttons */ .fancybox-button { background: rgba(30, 30, 30, .6); border: 0; border-radius: 0; box-shadow: none; cursor: pointer; display: inline-block; height: 44px; margin: 0; padding: 10px; position: relative; transition: color .2s; vertical-align: top; visibility: inherit; width: 44px; } .fancybox-button, .fancybox-button:visited, .fancybox-button:link { color: #ccc; } .fancybox-button:hover { color: #fff; } .fancybox-button:focus { outline: none; } .fancybox-button.fancybox-focus { outline: 1px dotted; } .fancybox-button[disabled], .fancybox-button[disabled]:hover { color: #888; cursor: default; outline: none; } /* Fix IE11 */ .fancybox-button div { height: 100%; } .fancybox-button svg { display: block; height: 100%; overflow: visible; position: relative; width: 100%; } .fancybox-button svg path { fill: currentColor; stroke-width: 0; } .fancybox-button--play svg:nth-child(2), .fancybox-button--fsenter svg:nth-child(2) { display: none; } .fancybox-button--pause svg:nth-child(1), .fancybox-button--fsexit svg:nth-child(1) { display: none; } .fancybox-progress { background: #ff5268; height: 2px; left: 0; position: absolute; right: 0; top: 0; -ms-transform: scaleX(0); transform: scaleX(0); -ms-transform-origin: 0; transform-origin: 0; transition-property: transform; transition-timing-function: linear; z-index: 99998; } /* Close button on the top right corner of html content */ .fancybox-close-small { background: transparent; border: 0; border-radius: 0; color: #ccc; cursor: pointer; opacity: .8; padding: 8px; position: absolute; right: -12px; top: -44px; z-index: 401; } .fancybox-close-small:hover { color: #fff; opacity: 1; } .fancybox-slide--html .fancybox-close-small { color: currentColor; padding: 10px; right: 0; top: 0; } .fancybox-slide--image.fancybox-is-scaling .fancybox-content { overflow: hidden; } .fancybox-is-scaling .fancybox-close-small, .fancybox-is-zoomable.fancybox-can-pan .fancybox-close-small { display: none; } /* Navigation arrows */ .fancybox-navigation .fancybox-button { background-clip: content-box; height: 100px; opacity: 0; position: absolute; top: calc(50% - 50px); width: 70px; } .fancybox-navigation .fancybox-button div { padding: 7px; } .fancybox-navigation .fancybox-button--arrow_left { left: 0; left: env(safe-area-inset-left); padding: 31px 26px 31px 6px; } .fancybox-navigation .fancybox-button--arrow_right { padding: 31px 6px 31px 26px; right: 0; right: env(safe-area-inset-right); } /* Caption */ .fancybox-caption { background: linear-gradient(to top, rgba(0, 0, 0, .85) 0%, rgba(0, 0, 0, .3) 50%, rgba(0, 0, 0, .15) 65%, rgba(0, 0, 0, .075) 75.5%, rgba(0, 0, 0, .037) 82.85%, rgba(0, 0, 0, .019) 88%, rgba(0, 0, 0, 0) 100%); bottom: 0; color: #eee; font-size: 14px; font-weight: 400; left: 0; line-height: 1.5; padding: 75px 44px 25px 44px; pointer-events: none; right: 0; text-align: center; z-index: 99996; } @supports (padding: max(0px)) { .fancybox-caption { padding: 75px max(44px, env(safe-area-inset-right)) max(25px, env(safe-area-inset-bottom)) max(44px, env(safe-area-inset-left)); } } .fancybox-caption--separate { margin-top: -50px; } .fancybox-caption__body { max-height: 50vh; overflow: auto; pointer-events: all; } .fancybox-caption a, .fancybox-caption a:link, .fancybox-caption a:visited { color: #ccc; text-decoration: none; } .fancybox-caption a:hover { color: #fff; text-decoration: underline; } /* Loading indicator */ .fancybox-loading { animation: fancybox-rotate 1s linear infinite; background: transparent; border: 4px solid #888; border-bottom-color: #fff; border-radius: 50%; height: 50px; left: 50%; margin: -25px 0 0 -25px; opacity: .7; padding: 0; position: absolute; top: 50%; width: 50px; z-index: 99999; } @keyframes fancybox-rotate { 100% { transform: rotate(360deg); } } /* Transition effects */ .fancybox-animated { transition-timing-function: cubic-bezier(0, 0, .25, 1); } /* transitionEffect: slide */ .fancybox-fx-slide.fancybox-slide--previous { opacity: 0; transform: translate3d(-100%, 0, 0); } .fancybox-fx-slide.fancybox-slide--next { opacity: 0; transform: translate3d(100%, 0, 0); } .fancybox-fx-slide.fancybox-slide--current { opacity: 1; transform: translate3d(0, 0, 0); } /* transitionEffect: fade */ .fancybox-fx-fade.fancybox-slide--previous, .fancybox-fx-fade.fancybox-slide--next { opacity: 0; transition-timing-function: cubic-bezier(.19, 1, .22, 1); } .fancybox-fx-fade.fancybox-slide--current { opacity: 1; } /* transitionEffect: zoom-in-out */ .fancybox-fx-zoom-in-out.fancybox-slide--previous { opacity: 0; transform: scale3d(1.5, 1.5, 1.5); } .fancybox-fx-zoom-in-out.fancybox-slide--next { opacity: 0; transform: scale3d(.5, .5, .5); } .fancybox-fx-zoom-in-out.fancybox-slide--current { opacity: 1; transform: scale3d(1, 1, 1); } /* transitionEffect: rotate */ .fancybox-fx-rotate.fancybox-slide--previous { opacity: 0; -ms-transform: rotate(-360deg); transform: rotate(-360deg); } .fancybox-fx-rotate.fancybox-slide--next { opacity: 0; -ms-transform: rotate(360deg); transform: rotate(360deg); } .fancybox-fx-rotate.fancybox-slide--current { opacity: 1; -ms-transform: rotate(0deg); transform: rotate(0deg); } /* transitionEffect: circular */ .fancybox-fx-circular.fancybox-slide--previous { opacity: 0; transform: scale3d(0, 0, 0) translate3d(-100%, 0, 0); } .fancybox-fx-circular.fancybox-slide--next { opacity: 0; transform: scale3d(0, 0, 0) translate3d(100%, 0, 0); } .fancybox-fx-circular.fancybox-slide--current { opacity: 1; transform: scale3d(1, 1, 1) translate3d(0, 0, 0); } /* transitionEffect: tube */ .fancybox-fx-tube.fancybox-slide--previous { transform: translate3d(-100%, 0, 0) scale(.1) skew(-10deg); } .fancybox-fx-tube.fancybox-slide--next { transform: translate3d(100%, 0, 0) scale(.1) skew(10deg); } .fancybox-fx-tube.fancybox-slide--current { transform: translate3d(0, 0, 0) scale(1); } /* Styling for Small-Screen Devices */ @media all and (max-height: 576px) { .fancybox-slide { padding-left: 6px; padding-right: 6px; } .fancybox-slide--image { padding: 6px 0; } .fancybox-close-small { right: -6px; } .fancybox-slide--image .fancybox-close-small { background: #4e4e4e; color: #f2f4f6; height: 36px; opacity: 1; padding: 6px; right: 0; top: 0; width: 36px; } .fancybox-caption { padding-left: 12px; padding-right: 12px; } @supports (padding: max(0px)) { .fancybox-caption { padding-left: max(12px, env(safe-area-inset-left)); padding-right: max(12px, env(safe-area-inset-right)); } } } /* Share */ .fancybox-share { background: #f4f4f4; border-radius: 3px; max-width: 90%; padding: 30px; text-align: center; } .fancybox-share h1 { color: #222; font-size: 35px; font-weight: 700; margin: 0 0 20px 0; } .fancybox-share p { margin: 0; padding: 0; } .fancybox-share__button { border: 0; border-radius: 3px; display: inline-block; font-size: 14px; font-weight: 700; line-height: 40px; margin: 0 5px 10px 5px; min-width: 130px; padding: 0 15px; text-decoration: none; transition: all .2s; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; white-space: nowrap; } .fancybox-share__button:visited, .fancybox-share__button:link { color: #fff; } .fancybox-share__button:hover { text-decoration: none; } .fancybox-share__button--fb { background: #3b5998; } .fancybox-share__button--fb:hover { background: #344e86; } .fancybox-share__button--pt { background: #bd081d; } .fancybox-share__button--pt:hover { background: #aa0719; } .fancybox-share__button--tw { background: #1da1f2; } .fancybox-share__button--tw:hover { background: #0d95e8; } .fancybox-share__button svg { height: 25px; margin-right: 7px; position: relative; top: -1px; vertical-align: middle; width: 25px; } .fancybox-share__button svg path { fill: #fff; } .fancybox-share__input { background: transparent; border: 0; border-bottom: 1px solid #d7d7d7; border-radius: 0; color: #5d5b5b; font-size: 14px; margin: 10px 0 0 0; outline: none; padding: 10px 15px; width: 100%; } /* Thumbs */ .fancybox-thumbs { background: #ddd; bottom: 0; display: none; margin: 0; -webkit-overflow-scrolling: touch; -ms-overflow-style: -ms-autohiding-scrollbar; padding: 2px 2px 4px 2px; position: absolute; right: 0; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); top: 0; width: 212px; z-index: 99995; } .fancybox-thumbs-x { overflow-x: auto; overflow-y: hidden; } .fancybox-show-thumbs .fancybox-thumbs { display: block; } .fancybox-show-thumbs .fancybox-inner { right: 212px; } .fancybox-thumbs__list { font-size: 0; height: 100%; list-style: none; margin: 0; overflow-x: hidden; overflow-y: auto; padding: 0; position: absolute; position: relative; white-space: nowrap; width: 100%; } .fancybox-thumbs-x .fancybox-thumbs__list { overflow: hidden; } .fancybox-thumbs-y .fancybox-thumbs__list::-webkit-scrollbar { width: 7px; } .fancybox-thumbs-y .fancybox-thumbs__list::-webkit-scrollbar-track { background: #fff; border-radius: 10px; box-shadow: inset 0 0 6px rgba(0, 0, 0, .3); } .fancybox-thumbs-y .fancybox-thumbs__list::-webkit-scrollbar-thumb { background: #2a2a2a; border-radius: 10px; } .fancybox-thumbs__list a { -webkit-backface-visibility: hidden; backface-visibility: hidden; background-color: rgba(0, 0, 0, .1); background-position: center center; background-repeat: no-repeat; background-size: cover; cursor: pointer; float: left; height: 75px; margin: 2px; max-height: calc(100% - 8px); max-width: calc(50% - 4px); outline: none; overflow: hidden; padding: 0; position: relative; -webkit-tap-highlight-color: transparent; width: 100px; } .fancybox-thumbs__list a::before { border: 6px solid #ff5268; bottom: 0; content: ''; left: 0; opacity: 0; position: absolute; right: 0; top: 0; transition: all .2s cubic-bezier(.25, .46, .45, .94); z-index: 99991; } .fancybox-thumbs__list a:focus::before { opacity: .5; } .fancybox-thumbs__list a.fancybox-thumbs-active::before { opacity: 1; } /* Styling for Small-Screen Devices */ @media all and (max-width: 576px) { .fancybox-thumbs { width: 110px; } .fancybox-show-thumbs .fancybox-inner { right: 110px; } .fancybox-thumbs__list a { max-width: calc(100% - 10px); } }"},{"title":"","date":"2019-10-23T03:11:06.203Z","updated":"2019-10-23T03:11:06.203Z","comments":true,"path":"lib/fancybox/source/jquery.fancybox.min.js","permalink":"http://yoursite.com/lib/fancybox/source/jquery.fancybox.min.js","excerpt":"","text":"// ================================================== // fancyBox v3.5.7 // // Licensed GPLv3 for open source use // or fancyBox Commercial License for commercial use // // http://fancyapps.com/fancybox/ // Copyright 2019 fancyApps // // ================================================== !function(t,e,n,o){\"use strict\";function i(t,e){var o,i,a,s=[],r=0;t&&t.isDefaultPrevented()||(t.preventDefault(),e=e||{},t&&t.data&&(e=h(t.data.options,e)),o=e.$target||n(t.currentTarget).trigger(\"blur\"),(a=n.fancybox.getInstance())&&a.$trigger&&a.$trigger.is(o)||(e.selector?s=n(e.selector):(i=o.attr(\"data-fancybox\")||\"\",i?(s=t.data?t.data.items:[],s=s.length?s.filter('[data-fancybox=\"'+i+'\"]'):n('[data-fancybox=\"'+i+'\"]')):s=[o]),r=n(s).index(o),r',preload:!0,css:{},attr:{scrolling:\"auto\"}},video:{tpl:'Sorry, your browser doesn\\'t support embedded videos, download and watch with your favorite video player!',format:\"\",autoStart:!0},defaultType:\"image\",animationEffect:\"zoom\",animationDuration:366,zoomOpacity:\"auto\",transitionEffect:\"fade\",transitionDuration:366,slideClass:\"\",baseClass:\"\",baseTpl:'&nbsp;/&nbsp;',spinnerTpl:'',errorTpl:'',btnTpl:{download:'',zoom:'',close:'',arrowLeft:'',arrowRight:'',smallBtn:''},parentEl:\"body\",hideScrollbar:!0,autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:3e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:\".fancybox-container\",axis:\"y\"},wheel:\"auto\",onInit:n.noop,beforeLoad:n.noop,afterLoad:n.noop,beforeShow:n.noop,afterShow:n.noop,beforeClose:n.noop,afterClose:n.noop,onActivate:n.noop,onDeactivate:n.noop,clickContent:function(t,e){return\"image\"===t.type&&\"zoom\"},clickSlide:\"close\",clickOutside:\"close\",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{preventCaptionOverlap:!1,idleTime:!1,clickContent:function(t,e){return\"image\"===t.type&&\"toggleControls\"},clickSlide:function(t,e){return\"image\"===t.type?\"toggleControls\":\"close\"},dblclickContent:function(t,e){return\"image\"===t.type&&\"zoom\"},dblclickSlide:function(t,e){return\"image\"===t.type&&\"zoom\"}},lang:\"en\",i18n:{en:{CLOSE:\"Close\",NEXT:\"Next\",PREV:\"Previous\",ERROR:\"The requested content cannot be loaded. Please try again later.\",PLAY_START:\"Start slideshow\",PLAY_STOP:\"Pause slideshow\",FULL_SCREEN:\"Full screen\",THUMBS:\"Thumbnails\",DOWNLOAD:\"Download\",SHARE:\"Share\",ZOOM:\"Zoom\"},de:{CLOSE:\"Schlie&szlig;en\",NEXT:\"Weiter\",PREV:\"Zur&uuml;ck\",ERROR:\"Die angeforderten Daten konnten nicht geladen werden. Bitte versuchen Sie es sp&auml;ter nochmal.\",PLAY_START:\"Diaschau starten\",PLAY_STOP:\"Diaschau beenden\",FULL_SCREEN:\"Vollbild\",THUMBS:\"Vorschaubilder\",DOWNLOAD:\"Herunterladen\",SHARE:\"Teilen\",ZOOM:\"Vergr&ouml;&szlig;ern\"}}},s=n(t),r=n(e),c=0,l=function(t){return t&&t.hasOwnProperty&&t instanceof n},d=function(){return t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||t.oRequestAnimationFrame||function(e){return t.setTimeout(e,1e3/60)}}(),u=function(){return t.cancelAnimationFrame||t.webkitCancelAnimationFrame||t.mozCancelAnimationFrame||t.oCancelAnimationFrame||function(e){t.clearTimeout(e)}}(),f=function(){var t,n=e.createElement(\"fakeelement\"),o={transition:\"transitionend\",OTransition:\"oTransitionEnd\",MozTransition:\"transitionend\",WebkitTransition:\"webkitTransitionEnd\"};for(t in o)if(void 0!==n.style[t])return o[t];return\"transitionend\"}(),p=function(t){return t&&t.length&&t[0].offsetHeight},h=function(t,e){var o=n.extend(!0,{},t,e);return n.each(e,function(t,e){n.isArray(e)&&(o[t]=e)}),o},g=function(t){var o,i;return!(!t||t.ownerDocument!==e)&&(n(\".fancybox-container\").css(\"pointer-events\",\"none\"),o={x:t.getBoundingClientRect().left+t.offsetWidth/2,y:t.getBoundingClientRect().top+t.offsetHeight/2},i=e.elementFromPoint(o.x,o.y)===t,n(\".fancybox-container\").css(\"pointer-events\",\"\"),i)},b=function(t,e,o){var i=this;i.opts=h({index:o},n.fancybox.defaults),n.isPlainObject(e)&&(i.opts=h(i.opts,e)),n.fancybox.isMobile&&(i.opts=h(i.opts,i.opts.mobile)),i.id=i.opts.id||++c,i.currIndex=parseInt(i.opts.index,10)||0,i.prevIndex=null,i.prevPos=null,i.currPos=0,i.firstRun=!0,i.group=[],i.slides={},i.addContent(t),i.group.length&&i.init()};n.extend(b.prototype,{init:function(){var o,i,a=this,s=a.group[a.currIndex],r=s.opts;r.closeExisting&&n.fancybox.close(!0),n(\"body\").addClass(\"fancybox-active\"),!n.fancybox.getInstance()&&!1!==r.hideScrollbar&&!n.fancybox.isMobile&&e.body.scrollHeight>t.innerHeight&&(n(\"head\").append('.compensate-for-scrollbar{margin-right:'+(t.innerWidth-e.documentElement.clientWidth)+\"px;}\"),n(\"body\").addClass(\"compensate-for-scrollbar\")),i=\"\",n.each(r.buttons,function(t,e){i+=r.btnTpl[e]||\"\"}),o=n(a.translate(a,r.baseTpl.replace(\"\",i).replace(\"\",r.btnTpl.arrowLeft+r.btnTpl.arrowRight))).attr(\"id\",\"fancybox-container-\"+a.id).addClass(r.baseClass).data(\"FancyBox\",a).appendTo(r.parentEl),a.$refs={container:o},[\"bg\",\"inner\",\"infobar\",\"toolbar\",\"stage\",\"caption\",\"navigation\"].forEach(function(t){a.$refs[t]=o.find(\".fancybox-\"+t)}),a.trigger(\"onInit\"),a.activate(),a.jumpTo(a.currIndex)},translate:function(t,e){var n=t.opts.i18n[t.opts.lang]||t.opts.i18n.en;return e.replace(/\\{\\{(\\w+)\\}\\}/g,function(t,e){return void 0===n[e]?t:n[e]})},addContent:function(t){var e,o=this,i=n.makeArray(t);n.each(i,function(t,e){var i,a,s,r,c,l={},d={};n.isPlainObject(e)?(l=e,d=e.opts||e):\"object\"===n.type(e)&&n(e).length?(i=n(e),d=i.data()||{},d=n.extend(!0,{},d,d.options),d.$orig=i,l.src=o.opts.src||d.src||i.attr(\"href\"),l.type||l.src||(l.type=\"inline\",l.src=e)):l={type:\"html\",src:e+\"\"},l.opts=n.extend(!0,{},o.opts,d),n.isArray(d.buttons)&&(l.opts.buttons=d.buttons),n.fancybox.isMobile&&l.opts.mobile&&(l.opts=h(l.opts,l.opts.mobile)),a=l.type||l.opts.type,r=l.src||\"\",!a&&r&&((s=r.match(/\\.(mp4|mov|ogv|webm)((\\?|#).*)?$/i))?(a=\"video\",l.opts.video.format||(l.opts.video.format=\"video/\"+(\"ogv\"===s[1]?\"ogg\":s[1]))):r.match(/(^data:image\\/[a-z0-9+\\/=]*,)|(\\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\\?|#).*)?$)/i)?a=\"image\":r.match(/\\.(pdf)((\\?|#).*)?$/i)?(a=\"iframe\",l=n.extend(!0,l,{contentType:\"pdf\",opts:{iframe:{preload:!1}}})):\"#\"===r.charAt(0)&&(a=\"inline\")),a?l.type=a:o.trigger(\"objectNeedsType\",l),l.contentType||(l.contentType=n.inArray(l.type,[\"html\",\"inline\",\"ajax\"])>-1?\"html\":l.type),l.index=o.group.length,\"auto\"==l.opts.smallBtn&&(l.opts.smallBtn=n.inArray(l.type,[\"html\",\"inline\",\"ajax\"])>-1),\"auto\"===l.opts.toolbar&&(l.opts.toolbar=!l.opts.smallBtn),l.$thumb=l.opts.$thumb||null,l.opts.$trigger&&l.index===o.opts.index&&(l.$thumb=l.opts.$trigger.find(\"img:first\"),l.$thumb.length&&(l.opts.$orig=l.opts.$trigger)),l.$thumb&&l.$thumb.length||!l.opts.$orig||(l.$thumb=l.opts.$orig.find(\"img:first\")),l.$thumb&&!l.$thumb.length&&(l.$thumb=null),l.thumb=l.opts.thumb||(l.$thumb?l.$thumb[0].src:null),\"function\"===n.type(l.opts.caption)&&(l.opts.caption=l.opts.caption.apply(e,[o,l])),\"function\"===n.type(o.opts.caption)&&(l.opts.caption=o.opts.caption.apply(e,[o,l])),l.opts.caption instanceof n||(l.opts.caption=void 0===l.opts.caption?\"\":l.opts.caption+\"\"),\"ajax\"===l.type&&(c=r.split(/\\s+/,2),c.length>1&&(l.src=c.shift(),l.opts.filter=c.shift())),l.opts.modal&&(l.opts=n.extend(!0,l.opts,{trapFocus:!0,infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),o.group.push(l)}),Object.keys(o.slides).length&&(o.updateControls(),(e=o.Thumbs)&&e.isActive&&(e.create(),e.focus()))},addEvents:function(){var e=this;e.removeEvents(),e.$refs.container.on(\"click.fb-close\",\"[data-fancybox-close]\",function(t){t.stopPropagation(),t.preventDefault(),e.close(t)}).on(\"touchstart.fb-prev click.fb-prev\",\"[data-fancybox-prev]\",function(t){t.stopPropagation(),t.preventDefault(),e.previous()}).on(\"touchstart.fb-next click.fb-next\",\"[data-fancybox-next]\",function(t){t.stopPropagation(),t.preventDefault(),e.next()}).on(\"click.fb\",\"[data-fancybox-zoom]\",function(t){e[e.isScaledDown()?\"scaleToActual\":\"scaleToFit\"]()}),s.on(\"orientationchange.fb resize.fb\",function(t){t&&t.originalEvent&&\"resize\"===t.originalEvent.type?(e.requestId&&u(e.requestId),e.requestId=d(function(){e.update(t)})):(e.current&&\"iframe\"===e.current.type&&e.$refs.stage.hide(),setTimeout(function(){e.$refs.stage.show(),e.update(t)},n.fancybox.isMobile?600:250))}),r.on(\"keydown.fb\",function(t){var o=n.fancybox?n.fancybox.getInstance():null,i=o.current,a=t.keyCode||t.which;if(9==a)return void(i.opts.trapFocus&&e.focus(t));if(!(!i.opts.keyboard||t.ctrlKey||t.altKey||t.shiftKey||n(t.target).is(\"input,textarea,video,audio,select\")))return 8===a||27===a?(t.preventDefault(),void e.close(t)):37===a||38===a?(t.preventDefault(),void e.previous()):39===a||40===a?(t.preventDefault(),void e.next()):void e.trigger(\"afterKeydown\",t,a)}),e.group[e.currIndex].opts.idleTime&&(e.idleSecondsCounter=0,r.on(\"mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle\",function(t){e.idleSecondsCounter=0,e.isIdle&&e.showControls(),e.isIdle=!1}),e.idleInterval=t.setInterval(function(){++e.idleSecondsCounter>=e.group[e.currIndex].opts.idleTime&&!e.isDragging&&(e.isIdle=!0,e.idleSecondsCounter=0,e.hideControls())},1e3))},removeEvents:function(){var e=this;s.off(\"orientationchange.fb resize.fb\"),r.off(\"keydown.fb .fb-idle\"),this.$refs.container.off(\".fb-close .fb-prev .fb-next\"),e.idleInterval&&(t.clearInterval(e.idleInterval),e.idleInterval=null)},previous:function(t){return this.jumpTo(this.currPos-1,t)},next:function(t){return this.jumpTo(this.currPos+1,t)},jumpTo:function(t,e){var o,i,a,s,r,c,l,d,u,f=this,h=f.group.length;if(!(f.isDragging||f.isClosing||f.isAnimating&&f.firstRun)){if(t=parseInt(t,10),!(a=f.current?f.current.opts.loop:f.opts.loop)&&(t=h))return!1;if(o=f.firstRun=!Object.keys(f.slides).length,r=f.current,f.prevIndex=f.currIndex,f.prevPos=f.currPos,s=f.createSlide(t),h>1&&((a||s.index0)&&f.createSlide(t-1)),f.current=s,f.currIndex=s.index,f.currPos=s.pos,f.trigger(\"beforeShow\",o),f.updateControls(),s.forcedDuration=void 0,n.isNumeric(e)?s.forcedDuration=e:e=s.opts[o?\"animationDuration\":\"transitionDuration\"],e=parseInt(e,10),i=f.isMoved(s),s.$slide.addClass(\"fancybox-slide--current\"),o)return s.opts.animationEffect&&e&&f.$refs.container.css(\"transition-duration\",e+\"ms\"),f.$refs.container.addClass(\"fancybox-is-open\").trigger(\"focus\"),f.loadSlide(s),void f.preload(\"image\");c=n.fancybox.getTranslate(r.$slide),l=n.fancybox.getTranslate(f.$refs.stage),n.each(f.slides,function(t,e){n.fancybox.stop(e.$slide,!0)}),r.pos!==s.pos&&(r.isComplete=!1),r.$slide.removeClass(\"fancybox-slide--complete fancybox-slide--current\"),i?(u=c.left-(r.pos*c.width+r.pos*r.opts.gutter),n.each(f.slides,function(t,o){o.$slide.removeClass(\"fancybox-animated\").removeClass(function(t,e){return(e.match(/(^|\\s)fancybox-fx-\\S+/g)||[]).join(\" \")});var i=o.pos*c.width+o.pos*o.opts.gutter;n.fancybox.setTranslate(o.$slide,{top:0,left:i-l.left+u}),o.pos!==s.pos&&o.$slide.addClass(\"fancybox-slide--\"+(o.pos>s.pos?\"next\":\"previous\")),p(o.$slide),n.fancybox.animate(o.$slide,{top:0,left:(o.pos-s.pos)*c.width+(o.pos-s.pos)*o.opts.gutter},e,function(){o.$slide.css({transform:\"\",opacity:\"\"}).removeClass(\"fancybox-slide--next fancybox-slide--previous\"),o.pos===f.currPos&&f.complete()})})):e&&s.opts.transitionEffect&&(d=\"fancybox-animated fancybox-fx-\"+s.opts.transitionEffect,r.$slide.addClass(\"fancybox-slide--\"+(r.pos>s.pos?\"next\":\"previous\")),n.fancybox.animate(r.$slide,d,e,function(){r.$slide.removeClass(d).removeClass(\"fancybox-slide--next fancybox-slide--previous\")},!1)),s.isLoaded?f.revealContent(s):f.loadSlide(s),f.preload(\"image\")}},createSlide:function(t){var e,o,i=this;return o=t%i.group.length,o=of&&(a=i.left*r-(t*r-t),a>0&&(a=0),ap&&(s=i.top*c-(e*c-e),s>0&&(s=0),se-.5&&(l=e),d>o-.5&&(d=o),\"image\"===t.type?(u.top=Math.floor(.5*(o-d))+parseFloat(c.css(\"paddingTop\")),u.left=Math.floor(.5*(e-l))+parseFloat(c.css(\"paddingLeft\"))):\"video\"===t.contentType&&(a=t.opts.width&&t.opts.height?l/d:t.opts.ratio||16/9,d>l/a?d=l/a:l>d*a&&(l=d*a)),u.width=l,u.height=d,u)},update:function(t){var e=this;n.each(e.slides,function(n,o){e.updateSlide(o,t)})},updateSlide:function(t,e){var o=this,i=t&&t.$content,a=t.width||t.opts.width,s=t.height||t.opts.height,r=t.$slide;o.adjustCaption(t),i&&(a||s||\"video\"===t.contentType)&&!t.hasError&&(n.fancybox.stop(i),n.fancybox.setTranslate(i,o.getFitPos(t)),t.pos===o.currPos&&(o.isAnimating=!1,o.updateCursor())),o.adjustLayout(t),r.length&&(r.trigger(\"refresh\"),t.pos===o.currPos&&o.$refs.toolbar.add(o.$refs.navigation.find(\".fancybox-button--arrow_right\")).toggleClass(\"compensate-for-scrollbar\",r.get(0).scrollHeight>r.get(0).clientHeight)),o.trigger(\"onUpdate\",t,e)},centerSlide:function(t){var e=this,o=e.current,i=o.$slide;!e.isClosing&&o&&(i.siblings().css({transform:\"\",opacity:\"\"}),i.parent().children().removeClass(\"fancybox-slide--previous fancybox-slide--next\"),n.fancybox.animate(i,{top:0,left:0,opacity:1},void 0===t?0:t,function(){i.css({transform:\"\",opacity:\"\"}),o.isComplete||e.complete()},!1))},isMoved:function(t){var e,o,i=t||this.current;return!!i&&(o=n.fancybox.getTranslate(this.$refs.stage),e=n.fancybox.getTranslate(i.$slide),!i.$slide.hasClass(\"fancybox-animated\")&&(Math.abs(e.top-o.top)>.5||Math.abs(e.left-o.left)>.5))},updateCursor:function(t,e){var o,i,a=this,s=a.current,r=a.$refs.container;s&&!a.isClosing&&a.Guestures&&(r.removeClass(\"fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan\"),o=a.canPan(t,e),i=!!o||a.isZoomable(),r.toggleClass(\"fancybox-is-zoomable\",i),n(\"[data-fancybox-zoom]\").prop(\"disabled\",!i),o?r.addClass(\"fancybox-can-pan\"):i&&(\"zoom\"===s.opts.clickContent||n.isFunction(s.opts.clickContent)&&\"zoom\"==s.opts.clickContent(s))?r.addClass(\"fancybox-can-zoomIn\"):s.opts.touch&&(s.opts.touch.vertical||a.group.length>1)&&\"video\"!==s.contentType&&r.addClass(\"fancybox-can-swipe\"))},isZoomable:function(){var t,e=this,n=e.current;if(n&&!e.isClosing&&\"image\"===n.type&&!n.hasError){if(!n.isLoaded)return!0;if((t=e.getFitPos(n))&&(n.width>t.width||n.height>t.height))return!0}return!1},isScaledDown:function(t,e){var o=this,i=!1,a=o.current,s=a.$content;return void 0!==t&&void 0!==e?i=t1&&s.width()/s.height()>1?\"100\":Math.round(t.width/t.height*100))+\"vw\"),a.attr(\"sizes\",e).attr(\"srcset\",t.opts.srcset)),t.$ghost&&setTimeout(function(){t.$ghost&&!o.isClosing&&t.$ghost.hide()},Math.min(300,Math.max(1e3,t.height/1600))),o.hideLoading(t))}).addClass(\"fancybox-image\").attr(\"src\",t.src).appendTo(t.$content),(i.complete||\"complete\"==i.readyState)&&a.naturalWidth&&a.naturalHeight?a.trigger(\"load\"):i.error&&a.trigger(\"error\")},resolveImageSlideSize:function(t,e,n){var o=parseInt(t.opts.width,10),i=parseInt(t.opts.height,10);t.width=e,t.height=n,o>0&&(t.width=o,t.height=Math.floor(o*n/e)),i>0&&(t.width=Math.floor(i*e/n),t.height=i)},setIframe:function(t){var e,o=this,i=t.opts.iframe,a=t.$slide;t.$content=n('').css(i.css).appendTo(a),a.addClass(\"fancybox-slide--\"+t.contentType),t.$iframe=e=n(i.tpl.replace(/\\{rnd\\}/g,(new Date).getTime())).attr(i.attr).appendTo(t.$content),i.preload?(o.showLoading(t),e.on(\"load.fb error.fb\",function(e){this.isReady=1,t.$slide.trigger(\"refresh\"),o.afterLoad(t)}),a.on(\"refresh.fb\",function(){var n,o,s=t.$content,r=i.css.width,c=i.css.height;if(1===e[0].isReady){try{n=e.contents(),o=n.find(\"body\")}catch(t){}o&&o.length&&o.children().length&&(a.css(\"overflow\",\"visible\"),s.css({width:\"100%\",\"max-width\":\"100%\",height:\"9999px\"}),void 0===r&&(r=Math.ceil(Math.max(o[0].clientWidth,o.outerWidth(!0)))),s.css(\"width\",r||\"\").css(\"max-width\",\"\"),void 0===c&&(c=Math.ceil(Math.max(o[0].clientHeight,o.outerHeight(!0)))),s.css(\"height\",c||\"\"),a.css(\"overflow\",\"auto\")),s.removeClass(\"fancybox-is-hidden\")}})):o.afterLoad(t),e.attr(\"src\",t.src),a.one(\"onReset\",function(){try{n(this).find(\"iframe\").hide().unbind().attr(\"src\",\"//about:blank\")}catch(t){}n(this).off(\"refresh.fb\").empty(),t.isLoaded=!1,t.isRevealed=!1})},setContent:function(t,e){var o=this;o.isClosing||(o.hideLoading(t),t.$content&&n.fancybox.stop(t.$content),t.$slide.empty(),l(e)&&e.parent().length?((e.hasClass(\"fancybox-content\")||e.parent().hasClass(\"fancybox-content\"))&&e.parents(\".fancybox-slide\").trigger(\"onReset\"),t.$placeholder=n(\"\").hide().insertAfter(e),e.css(\"display\",\"inline-block\")):t.hasError||(\"string\"===n.type(e)&&(e=n(\"\").append(n.trim(e)).contents()),t.opts.filter&&(e=n(\"\").html(e).find(t.opts.filter))),t.$slide.one(\"onReset\",function(){n(this).find(\"video,audio\").trigger(\"pause\"),t.$placeholder&&(t.$placeholder.after(e.removeClass(\"fancybox-content\").hide()).remove(),t.$placeholder=null),t.$smallBtn&&(t.$smallBtn.remove(),t.$smallBtn=null),t.hasError||(n(this).empty(),t.isLoaded=!1,t.isRevealed=!1)}),n(e).appendTo(t.$slide),n(e).is(\"video,audio\")&&(n(e).addClass(\"fancybox-video\"),n(e).wrap(\"\"),t.contentType=\"video\",t.opts.width=t.opts.width||n(e).attr(\"width\"),t.opts.height=t.opts.height||n(e).attr(\"height\")),t.$content=t.$slide.children().filter(\"div,form,main,video,audio,article,.fancybox-content\").first(),t.$content.siblings().hide(),t.$content.length||(t.$content=t.$slide.wrapInner(\"\").children().first()),t.$content.addClass(\"fancybox-content\"),t.$slide.addClass(\"fancybox-slide--\"+t.contentType),o.afterLoad(t))},setError:function(t){t.hasError=!0,t.$slide.trigger(\"onReset\").removeClass(\"fancybox-slide--\"+t.contentType).addClass(\"fancybox-slide--error\"),t.contentType=\"html\",this.setContent(t,this.translate(t,t.opts.errorTpl)),t.pos===this.currPos&&(this.isAnimating=!1)},showLoading:function(t){var e=this;(t=t||e.current)&&!t.$spinner&&(t.$spinner=n(e.translate(e,e.opts.spinnerTpl)).appendTo(t.$slide).hide().fadeIn(\"fast\"))},hideLoading:function(t){var e=this;(t=t||e.current)&&t.$spinner&&(t.$spinner.stop().remove(),delete t.$spinner)},afterLoad:function(t){var e=this;e.isClosing||(t.isLoading=!1,t.isLoaded=!0,e.trigger(\"afterLoad\",t),e.hideLoading(t),!t.opts.smallBtn||t.$smallBtn&&t.$smallBtn.length||(t.$smallBtn=n(e.translate(t,t.opts.btnTpl.smallBtn)).appendTo(t.$content)),t.opts.protect&&t.$content&&!t.hasError&&(t.$content.on(\"contextmenu.fb\",function(t){return 2==t.button&&t.preventDefault(),!0}),\"image\"===t.type&&n('').appendTo(t.$content)),e.adjustCaption(t),e.adjustLayout(t),t.pos===e.currPos&&e.updateCursor(),e.revealContent(t))},adjustCaption:function(t){var e,n=this,o=t||n.current,i=o.opts.caption,a=o.opts.preventCaptionOverlap,s=n.$refs.caption,r=!1;s.toggleClass(\"fancybox-caption--separate\",a),a&&i&&i.length&&(o.pos!==n.currPos?(e=s.clone().appendTo(s.parent()),e.children().eq(0).empty().html(i),r=e.outerHeight(!0),e.empty().remove()):n.$caption&&(r=n.$caption.outerHeight(!0)),o.$slide.css(\"padding-bottom\",r||\"\"))},adjustLayout:function(t){var e,n,o,i,a=this,s=t||a.current;s.isLoaded&&!0!==s.opts.disableLayoutFix&&(s.$content.css(\"margin-bottom\",\"\"),s.$content.outerHeight()>s.$slide.height()+.5&&(o=s.$slide[0].style[\"padding-bottom\"],i=s.$slide.css(\"padding-bottom\"),parseFloat(i)>0&&(e=s.$slide[0].scrollHeight,s.$slide.css(\"padding-bottom\",0),Math.abs(e-s.$slide[0].scrollHeight).1),a&&(l.opacity=.1,c.opacity=1),n.fancybox.setTranslate(t.$content.removeClass(\"fancybox-is-hidden\"),l),p(t.$content),void n.fancybox.animate(t.$content,c,i,function(){s.isAnimating=!1,s.complete()})):(s.updateSlide(t),e?(n.fancybox.stop(r),o=\"fancybox-slide--\"+(t.pos>=s.prevPos?\"next\":\"previous\")+\" fancybox-animated fancybox-fx-\"+e,r.addClass(o).removeClass(\"fancybox-slide--current\"),t.$content.removeClass(\"fancybox-is-hidden\"),p(r),\"image\"!==t.type&&t.$content.hide().show(0),void n.fancybox.animate(r,\"fancybox-slide--current\",i,function(){r.removeClass(o).css({transform:\"\",opacity:\"\"}),t.pos===s.currPos&&s.complete()},!0)):(t.$content.removeClass(\"fancybox-is-hidden\"),u||!d||\"image\"!==t.type||t.hasError||t.$content.hide().fadeIn(\"fast\"),void(t.pos===s.currPos&&s.complete())))},getThumbPos:function(t){var e,o,i,a,s,r=!1,c=t.$thumb;return!(!c||!g(c[0]))&&(e=n.fancybox.getTranslate(c),o=parseFloat(c.css(\"border-top-width\")||0),i=parseFloat(c.css(\"border-right-width\")||0),a=parseFloat(c.css(\"border-bottom-width\")||0),s=parseFloat(c.css(\"border-left-width\")||0),r={top:e.top+o,left:e.left+s,width:e.width-i-s,height:e.height-o-a,scaleX:1,scaleY:1},e.width>0&&e.height>0&&r)},complete:function(){var t,e=this,o=e.current,i={};!e.isMoved()&&o.isLoaded&&(o.isComplete||(o.isComplete=!0,o.$slide.siblings().trigger(\"onReset\"),e.preload(\"inline\"),p(o.$slide),o.$slide.addClass(\"fancybox-slide--complete\"),n.each(e.slides,function(t,o){o.pos>=e.currPos-1&&o.pos.1),r&&(l.opacity=0),n.fancybox.setTranslate(a,c),p(a),n.fancybox.animate(a,l,i,h),!0):(o&&i?n.fancybox.animate(f.$slide.addClass(\"fancybox-slide--previous\").removeClass(\"fancybox-slide--current\"),\"fancybox-animated fancybox-fx-\"+o,i,h):!0===t?setTimeout(h,i):h(),!0)))},cleanUp:function(e){var o,i,a,s=this,r=s.current.opts.$orig;s.current.$slide.trigger(\"onReset\"),s.$refs.container.empty().remove(),s.trigger(\"afterClose\",e),s.current.opts.backFocus&&(r&&r.length&&r.is(\":visible\")||(r=s.$trigger),r&&r.length&&(i=t.scrollX,a=t.scrollY,r.trigger(\"focus\"),n(\"html, body\").scrollTop(a).scrollLeft(i))),s.current=null,o=n.fancybox.getInstance(),o?o.activate():(n(\"body\").removeClass(\"fancybox-active compensate-for-scrollbar\"),n(\"#fancybox-style-noscroll\").remove())},trigger:function(t,e){var o,i=Array.prototype.slice.call(arguments,1),a=this,s=e&&e.opts?e:a.current;if(s?i.unshift(s):s=a,i.unshift(a),n.isFunction(s.opts[t])&&(o=s.opts[t].apply(s,i)),!1===o)return o;\"afterClose\"!==t&&a.$refs?a.$refs.container.trigger(t+\".fb\",i):r.trigger(t+\".fb\",i)},updateControls:function(){var t=this,o=t.current,i=o.index,a=t.$refs.container,s=t.$refs.caption,r=o.opts.caption;o.$slide.trigger(\"refresh\"),r&&r.length?(t.$caption=s,s.children().eq(0).html(r)):t.$caption=null,t.hasHiddenControls||t.isIdle||t.showControls(),a.find(\"[data-fancybox-count]\").html(t.group.length),a.find(\"[data-fancybox-index]\").html(i+1),a.find(\"[data-fancybox-prev]\").prop(\"disabled\",!o.opts.loop&&i=t.group.length-1),\"image\"===o.type?a.find(\"[data-fancybox-zoom]\").show().end().find(\"[data-fancybox-download]\").attr(\"href\",o.opts.image.src||o.src).show():o.opts.toolbar&&a.find(\"[data-fancybox-download],[data-fancybox-zoom]\").hide(),n(e.activeElement).is(\":hidden,[disabled]\")&&t.$refs.container.trigger(\"focus\")},hideControls:function(t){var e=this,n=[\"infobar\",\"toolbar\",\"nav\"];!t&&e.current.opts.preventCaptionOverlap||n.push(\"caption\"),this.$refs.container.removeClass(n.map(function(t){return\"fancybox-show-\"+t}).join(\" \")),this.hasHiddenControls=!0},showControls:function(){var t=this,e=t.current?t.current.opts:t.opts,n=t.$refs.container;t.hasHiddenControls=!1,t.idleSecondsCounter=0,n.toggleClass(\"fancybox-show-toolbar\",!(!e.toolbar||!e.buttons)).toggleClass(\"fancybox-show-infobar\",!!(e.infobar&&t.group.length>1)).toggleClass(\"fancybox-show-caption\",!!t.$caption).toggleClass(\"fancybox-show-nav\",!!(e.arrows&&t.group.length>1)).toggleClass(\"fancybox-is-modal\",!!e.modal)},toggleControls:function(){this.hasHiddenControls?this.showControls():this.hideControls()}}),n.fancybox={version:\"3.5.7\",defaults:a,getInstance:function(t){var e=n('.fancybox-container:not(\".fancybox-is-closing\"):last').data(\"FancyBox\"),o=Array.prototype.slice.call(arguments,1);return e instanceof b&&(\"string\"===n.type(t)?e[t].apply(e,o):\"function\"===n.type(t)&&t.apply(e,o),e)},open:function(t,e,n){return new b(t,e,n)},close:function(t){var e=this.getInstance();e&&(e.close(),!0===t&&this.close(t))},destroy:function(){this.close(!0),r.add(\"body\").off(\"click.fb-start\",\"**\")},isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:function(){var n=e.createElement(\"div\");return t.getComputedStyle&&t.getComputedStyle(n)&&t.getComputedStyle(n).getPropertyValue(\"transform\")&&!(e.documentMode&&e.documentMode"},{"title":"","date":"2019-10-23T03:11:06.203Z","updated":"2019-10-23T03:11:06.203Z","comments":true,"path":"lib/fancybox/source/jquery.fancybox.pack.js","permalink":"http://yoursite.com/lib/fancybox/source/jquery.fancybox.pack.js","excerpt":"","text":"// ================================================== // fancyBox v3.5.7 // // Licensed GPLv3 for open source use // or fancyBox Commercial License for commercial use // // http://fancyapps.com/fancybox/ // Copyright 2019 fancyApps // // ================================================== (function (window, document, $, undefined) { \"use strict\"; window.console = window.console || { info: function (stuff) {} }; // If there's no jQuery, fancyBox can't work // ========================================= if (!$) { return; } // Check if fancyBox is already initialized // ======================================== if ($.fn.fancybox) { console.info(\"fancyBox already initialized\"); return; } // Private default settings // ======================== var defaults = { // Close existing modals // Set this to false if you do not need to stack multiple instances closeExisting: false, // Enable infinite gallery navigation loop: false, // Horizontal space between slides gutter: 50, // Enable keyboard navigation keyboard: true, // Should allow caption to overlap the content preventCaptionOverlap: true, // Should display navigation arrows at the screen edges arrows: true, // Should display counter at the top left corner infobar: true, // Should display close button (using `btnTpl.smallBtn` template) over the content // Can be true, false, \"auto\" // If \"auto\" - will be automatically enabled for \"html\", \"inline\" or \"ajax\" items smallBtn: \"auto\", // Should display toolbar (buttons at the top) // Can be true, false, \"auto\" // If \"auto\" - will be automatically hidden if \"smallBtn\" is enabled toolbar: \"auto\", // What buttons should appear in the top right corner. // Buttons will be created using templates from `btnTpl` option // and they will be placed into toolbar (class=\"fancybox-toolbar\"` element) buttons: [ \"zoom\", //\"share\", \"slideShow\", //\"fullScreen\", //\"download\", \"thumbs\", \"close\" ], // Detect \"idle\" time in seconds idleTime: 3, // Disable right-click and use simple image protection for images protect: false, // Shortcut to make content \"modal\" - disable keyboard navigtion, hide buttons, etc modal: false, image: { // Wait for images to load before displaying // true - wait for image to load and then display; // false - display thumbnail and load the full-sized image over top, // requires predefined image dimensions (`data-width` and `data-height` attributes) preload: false }, ajax: { // Object containing settings for ajax request settings: { // This helps to indicate that request comes from the modal // Feel free to change naming data: { fancybox: true } } }, iframe: { // Iframe template tpl: '', // Preload iframe before displaying it // This allows to calculate iframe content width and height // (note: Due to \"Same Origin Policy\", you can't get cross domain data). preload: true, // Custom CSS styling for iframe wrapping element // You can use this to set custom iframe dimensions css: {}, // Iframe tag attributes attr: { scrolling: \"auto\" } }, // For HTML5 video only video: { tpl: '' + '' + 'Sorry, your browser doesn\\'t support embedded videos, download and watch with your favorite video player!' + \"\", format: \"\", // custom video format autoStart: true }, // Default content type if cannot be detected automatically defaultType: \"image\", // Open/close animation type // Possible values: // false - disable // \"zoom\" - zoom images from/to thumbnail // \"fade\" // \"zoom-in-out\" // animationEffect: \"zoom\", // Duration in ms for open/close animation animationDuration: 366, // Should image change opacity while zooming // If opacity is \"auto\", then opacity will be changed if image and thumbnail have different aspect ratios zoomOpacity: \"auto\", // Transition effect between slides // // Possible values: // false - disable // \"fade' // \"slide' // \"circular' // \"tube' // \"zoom-in-out' // \"rotate' // transitionEffect: \"fade\", // Duration in ms for transition animation transitionDuration: 366, // Custom CSS class for slide element slideClass: \"\", // Custom CSS class for layout baseClass: \"\", // Base template for layout baseTpl: '' + '' + '' + '&nbsp;/&nbsp;' + '' + '' + '' + '' + \"\" + \"\", // Loading indicator template spinnerTpl: '', // Error message template errorTpl: '', btnTpl: { download: '' + '' + \"\", zoom: '' + '' + \"\", close: '' + '' + \"\", // Arrows arrowLeft: '' + '' + \"\", arrowRight: '' + '' + \"\", // This small close button will be appended to your html/inline/ajax content by default, // if \"smallBtn\" option is not set to false smallBtn: '' + '' + \"\" }, // Container is injected into this element parentEl: \"body\", // Hide browser vertical scrollbars; use at your own risk hideScrollbar: true, // Focus handling // ============== // Try to focus on the first focusable element after opening autoFocus: true, // Put focus back to active element after closing backFocus: true, // Do not let user to focus on element outside modal content trapFocus: true, // Module specific options // ======================= fullScreen: { autoStart: false }, // Set `touch: false` to disable panning/swiping touch: { vertical: true, // Allow to drag content vertically momentum: true // Continue movement after releasing mouse/touch when panning }, // Hash value when initializing manually, // set `false` to disable hash change hash: null, // Customize or add new media types // Example: /* media : { youtube : { params : { autoplay : 0 } } } */ media: {}, slideShow: { autoStart: false, speed: 3000 }, thumbs: { autoStart: false, // Display thumbnails on opening hideOnClose: true, // Hide thumbnail grid when closing animation starts parentEl: \".fancybox-container\", // Container is injected into this element axis: \"y\" // Vertical (y) or horizontal (x) scrolling }, // Use mousewheel to navigate gallery // If 'auto' - enabled for images only wheel: \"auto\", // Callbacks //========== // See Documentation/API/Events for more information // Example: /* afterShow: function( instance, current ) { console.info( 'Clicked element:' ); console.info( current.opts.$orig ); } */ onInit: $.noop, // When instance has been initialized beforeLoad: $.noop, // Before the content of a slide is being loaded afterLoad: $.noop, // When the content of a slide is done loading beforeShow: $.noop, // Before open animation starts afterShow: $.noop, // When content is done loading and animating beforeClose: $.noop, // Before the instance attempts to close. Return false to cancel the close. afterClose: $.noop, // After instance has been closed onActivate: $.noop, // When instance is brought to front onDeactivate: $.noop, // When other instance has been activated // Interaction // =========== // Use options below to customize taken action when user clicks or double clicks on the fancyBox area, // each option can be string or method that returns value. // // Possible values: // \"close\" - close instance // \"next\" - move to next gallery item // \"nextOrClose\" - move to next gallery item or close if gallery has only one item // \"toggleControls\" - show/hide controls // \"zoom\" - zoom image (if loaded) // false - do nothing // Clicked on the content clickContent: function (current, event) { return current.type === \"image\" ? \"zoom\" : false; }, // Clicked on the slide clickSlide: \"close\", // Clicked on the background (backdrop) element; // if you have not changed the layout, then most likely you need to use `clickSlide` option clickOutside: \"close\", // Same as previous two, but for double click dblclickContent: false, dblclickSlide: false, dblclickOutside: false, // Custom options when mobile device is detected // ============================================= mobile: { preventCaptionOverlap: false, idleTime: false, clickContent: function (current, event) { return current.type === \"image\" ? \"toggleControls\" : false; }, clickSlide: function (current, event) { return current.type === \"image\" ? \"toggleControls\" : \"close\"; }, dblclickContent: function (current, event) { return current.type === \"image\" ? \"zoom\" : false; }, dblclickSlide: function (current, event) { return current.type === \"image\" ? \"zoom\" : false; } }, // Internationalization // ==================== lang: \"en\", i18n: { en: { CLOSE: \"Close\", NEXT: \"Next\", PREV: \"Previous\", ERROR: \"The requested content cannot be loaded. Please try again later.\", PLAY_START: \"Start slideshow\", PLAY_STOP: \"Pause slideshow\", FULL_SCREEN: \"Full screen\", THUMBS: \"Thumbnails\", DOWNLOAD: \"Download\", SHARE: \"Share\", ZOOM: \"Zoom\" }, de: { CLOSE: \"Schlie&szlig;en\", NEXT: \"Weiter\", PREV: \"Zur&uuml;ck\", ERROR: \"Die angeforderten Daten konnten nicht geladen werden. Bitte versuchen Sie es sp&auml;ter nochmal.\", PLAY_START: \"Diaschau starten\", PLAY_STOP: \"Diaschau beenden\", FULL_SCREEN: \"Vollbild\", THUMBS: \"Vorschaubilder\", DOWNLOAD: \"Herunterladen\", SHARE: \"Teilen\", ZOOM: \"Vergr&ouml;&szlig;ern\" } } }; // Few useful variables and methods // ================================ var $W = $(window); var $D = $(document); var called = 0; // Check if an object is a jQuery object and not a native JavaScript object // ======================================================================== var isQuery = function (obj) { return obj && obj.hasOwnProperty && obj instanceof $; }; // Handle multiple browsers for \"requestAnimationFrame\" and \"cancelAnimationFrame\" // =============================================================================== var requestAFrame = (function () { return ( window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || // if all else fails, use setTimeout function (callback) { return window.setTimeout(callback, 1000 / 60); } ); })(); var cancelAFrame = (function () { return ( window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || function (id) { window.clearTimeout(id); } ); })(); // Detect the supported transition-end event property name // ======================================================= var transitionEnd = (function () { var el = document.createElement(\"fakeelement\"), t; var transitions = { transition: \"transitionend\", OTransition: \"oTransitionEnd\", MozTransition: \"transitionend\", WebkitTransition: \"webkitTransitionEnd\" }; for (t in transitions) { if (el.style[t] !== undefined) { return transitions[t]; } } return \"transitionend\"; })(); // Force redraw on an element. // This helps in cases where the browser doesn't redraw an updated element properly // ================================================================================ var forceRedraw = function ($el) { return $el && $el.length && $el[0].offsetHeight; }; // Exclude array (`buttons`) options from deep merging // =================================================== var mergeOpts = function (opts1, opts2) { var rez = $.extend(true, {}, opts1, opts2); $.each(opts2, function (key, value) { if ($.isArray(value)) { rez[key] = value; } }); return rez; }; // How much of an element is visible in viewport // ============================================= var inViewport = function (elem) { var elemCenter, rez; if (!elem || elem.ownerDocument !== document) { return false; } $(\".fancybox-container\").css(\"pointer-events\", \"none\"); elemCenter = { x: elem.getBoundingClientRect().left + elem.offsetWidth / 2, y: elem.getBoundingClientRect().top + elem.offsetHeight / 2 }; rez = document.elementFromPoint(elemCenter.x, elemCenter.y) === elem; $(\".fancybox-container\").css(\"pointer-events\", \"\"); return rez; }; // Class definition // ================ var FancyBox = function (content, opts, index) { var self = this; self.opts = mergeOpts({ index: index }, $.fancybox.defaults); if ($.isPlainObject(opts)) { self.opts = mergeOpts(self.opts, opts); } if ($.fancybox.isMobile) { self.opts = mergeOpts(self.opts, self.opts.mobile); } self.id = self.opts.id || ++called; self.currIndex = parseInt(self.opts.index, 10) || 0; self.prevIndex = null; self.prevPos = null; self.currPos = 0; self.firstRun = true; // All group items self.group = []; // Existing slides (for current, next and previous gallery items) self.slides = {}; // Create group elements self.addContent(content); if (!self.group.length) { return; } self.init(); }; $.extend(FancyBox.prototype, { // Create DOM structure // ==================== init: function () { var self = this, firstItem = self.group[self.currIndex], firstItemOpts = firstItem.opts, $container, buttonStr; if (firstItemOpts.closeExisting) { $.fancybox.close(true); } // Hide scrollbars // =============== $(\"body\").addClass(\"fancybox-active\"); if ( !$.fancybox.getInstance() && firstItemOpts.hideScrollbar !== false && !$.fancybox.isMobile && document.body.scrollHeight > window.innerHeight ) { $(\"head\").append( '.compensate-for-scrollbar{margin-right:' + (window.innerWidth - document.documentElement.clientWidth) + \"px;}\" ); $(\"body\").addClass(\"compensate-for-scrollbar\"); } // Build html markup and set references // ==================================== // Build html code for buttons and insert into main template buttonStr = \"\"; $.each(firstItemOpts.buttons, function (index, value) { buttonStr += firstItemOpts.btnTpl[value] || \"\"; }); // Create markup from base template, it will be initially hidden to // avoid unnecessary work like painting while initializing is not complete $container = $( self.translate( self, firstItemOpts.baseTpl .replace(\"\", buttonStr) .replace(\"\", firstItemOpts.btnTpl.arrowLeft + firstItemOpts.btnTpl.arrowRight) ) ) .attr(\"id\", \"fancybox-container-\" + self.id) .addClass(firstItemOpts.baseClass) .data(\"FancyBox\", self) .appendTo(firstItemOpts.parentEl); // Create object holding references to jQuery wrapped nodes self.$refs = { container: $container }; [\"bg\", \"inner\", \"infobar\", \"toolbar\", \"stage\", \"caption\", \"navigation\"].forEach(function (item) { self.$refs[item] = $container.find(\".fancybox-\" + item); }); self.trigger(\"onInit\"); // Enable events, deactive previous instances self.activate(); // Build slides, load and reveal content self.jumpTo(self.currIndex); }, // Simple i18n support - replaces object keys found in template // with corresponding values // ============================================================ translate: function (obj, str) { var arr = obj.opts.i18n[obj.opts.lang] || obj.opts.i18n.en; return str.replace(/\\{\\{(\\w+)\\}\\}/g, function (match, n) { return arr[n] === undefined ? match : arr[n]; }); }, // Populate current group with fresh content // Check if each object has valid type and content // =============================================== addContent: function (content) { var self = this, items = $.makeArray(content), thumbs; $.each(items, function (i, item) { var obj = {}, opts = {}, $item, type, found, src, srcParts; // Step 1 - Make sure we have an object // ==================================== if ($.isPlainObject(item)) { // We probably have manual usage here, something like // $.fancybox.open( [ { src : \"image.jpg\", type : \"image\" } ] ) obj = item; opts = item.opts || item; } else if ($.type(item) === \"object\" && $(item).length) { // Here we probably have jQuery collection returned by some selector $item = $(item); // Support attributes like `data-options='{\"touch\" : false}'` and `data-touch='false'` opts = $item.data() || {}; opts = $.extend(true, {}, opts, opts.options); // Here we store clicked element opts.$orig = $item; obj.src = self.opts.src || opts.src || $item.attr(\"href\"); // Assume that simple syntax is used, for example: // `$.fancybox.open( $(\"#test\"), {} );` if (!obj.type && !obj.src) { obj.type = \"inline\"; obj.src = item; } } else { // Assume we have a simple html code, for example: // $.fancybox.open( 'Hi!' ); obj = { type: \"html\", src: item + \"\" }; } // Each gallery object has full collection of options obj.opts = $.extend(true, {}, self.opts, opts); // Do not merge buttons array if ($.isArray(opts.buttons)) { obj.opts.buttons = opts.buttons; } if ($.fancybox.isMobile && obj.opts.mobile) { obj.opts = mergeOpts(obj.opts, obj.opts.mobile); } // Step 2 - Make sure we have content type, if not - try to guess // ============================================================== type = obj.type || obj.opts.type; src = obj.src || \"\"; if (!type && src) { if ((found = src.match(/\\.(mp4|mov|ogv|webm)((\\?|#).*)?$/i))) { type = \"video\"; if (!obj.opts.video.format) { obj.opts.video.format = \"video/\" + (found[1] === \"ogv\" ? \"ogg\" : found[1]); } } else if (src.match(/(^data:image\\/[a-z0-9+\\/=]*,)|(\\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\\?|#).*)?$)/i)) { type = \"image\"; } else if (src.match(/\\.(pdf)((\\?|#).*)?$/i)) { type = \"iframe\"; obj = $.extend(true, obj, { contentType: \"pdf\", opts: { iframe: { preload: false } } }); } else if (src.charAt(0) === \"#\") { type = \"inline\"; } } if (type) { obj.type = type; } else { self.trigger(\"objectNeedsType\", obj); } if (!obj.contentType) { obj.contentType = $.inArray(obj.type, [\"html\", \"inline\", \"ajax\"]) > -1 ? \"html\" : obj.type; } // Step 3 - Some adjustments // ========================= obj.index = self.group.length; if (obj.opts.smallBtn == \"auto\") { obj.opts.smallBtn = $.inArray(obj.type, [\"html\", \"inline\", \"ajax\"]) > -1; } if (obj.opts.toolbar === \"auto\") { obj.opts.toolbar = !obj.opts.smallBtn; } // Find thumbnail image, check if exists and if is in the viewport obj.$thumb = obj.opts.$thumb || null; if (obj.opts.$trigger && obj.index === self.opts.index) { obj.$thumb = obj.opts.$trigger.find(\"img:first\"); if (obj.$thumb.length) { obj.opts.$orig = obj.opts.$trigger; } } if (!(obj.$thumb && obj.$thumb.length) && obj.opts.$orig) { obj.$thumb = obj.opts.$orig.find(\"img:first\"); } if (obj.$thumb && !obj.$thumb.length) { obj.$thumb = null; } obj.thumb = obj.opts.thumb || (obj.$thumb ? obj.$thumb[0].src : null); // \"caption\" is a \"special\" option, it can be used to customize caption per gallery item if ($.type(obj.opts.caption) === \"function\") { obj.opts.caption = obj.opts.caption.apply(item, [self, obj]); } if ($.type(self.opts.caption) === \"function\") { obj.opts.caption = self.opts.caption.apply(item, [self, obj]); } // Make sure we have caption as a string or jQuery object if (!(obj.opts.caption instanceof $)) { obj.opts.caption = obj.opts.caption === undefined ? \"\" : obj.opts.caption + \"\"; } // Check if url contains \"filter\" used to filter the content // Example: \"ajax.html #something\" if (obj.type === \"ajax\") { srcParts = src.split(/\\s+/, 2); if (srcParts.length > 1) { obj.src = srcParts.shift(); obj.opts.filter = srcParts.shift(); } } // Hide all buttons and disable interactivity for modal items if (obj.opts.modal) { obj.opts = $.extend(true, obj.opts, { trapFocus: true, // Remove buttons infobar: 0, toolbar: 0, smallBtn: 0, // Disable keyboard navigation keyboard: 0, // Disable some modules slideShow: 0, fullScreen: 0, thumbs: 0, touch: 0, // Disable click event handlers clickContent: false, clickSlide: false, clickOutside: false, dblclickContent: false, dblclickSlide: false, dblclickOutside: false }); } // Step 4 - Add processed object to group // ====================================== self.group.push(obj); }); // Update controls if gallery is already opened if (Object.keys(self.slides).length) { self.updateControls(); // Update thumbnails, if needed thumbs = self.Thumbs; if (thumbs && thumbs.isActive) { thumbs.create(); thumbs.focus(); } } }, // Attach an event handler functions for: // - navigation buttons // - browser scrolling, resizing; // - focusing // - keyboard // - detecting inactivity // ====================================== addEvents: function () { var self = this; self.removeEvents(); // Make navigation elements clickable // ================================== self.$refs.container .on(\"click.fb-close\", \"[data-fancybox-close]\", function (e) { e.stopPropagation(); e.preventDefault(); self.close(e); }) .on(\"touchstart.fb-prev click.fb-prev\", \"[data-fancybox-prev]\", function (e) { e.stopPropagation(); e.preventDefault(); self.previous(); }) .on(\"touchstart.fb-next click.fb-next\", \"[data-fancybox-next]\", function (e) { e.stopPropagation(); e.preventDefault(); self.next(); }) .on(\"click.fb\", \"[data-fancybox-zoom]\", function (e) { // Click handler for zoom button self[self.isScaledDown() ? \"scaleToActual\" : \"scaleToFit\"](); }); // Handle page scrolling and browser resizing // ========================================== $W.on(\"orientationchange.fb resize.fb\", function (e) { if (e && e.originalEvent && e.originalEvent.type === \"resize\") { if (self.requestId) { cancelAFrame(self.requestId); } self.requestId = requestAFrame(function () { self.update(e); }); } else { if (self.current && self.current.type === \"iframe\") { self.$refs.stage.hide(); } setTimeout( function () { self.$refs.stage.show(); self.update(e); }, $.fancybox.isMobile ? 600 : 250 ); } }); $D.on(\"keydown.fb\", function (e) { var instance = $.fancybox ? $.fancybox.getInstance() : null, current = instance.current, keycode = e.keyCode || e.which; // Trap keyboard focus inside of the modal // ======================================= if (keycode == 9) { if (current.opts.trapFocus) { self.focus(e); } return; } // Enable keyboard navigation // ========================== if (!current.opts.keyboard || e.ctrlKey || e.altKey || e.shiftKey || $(e.target).is(\"input,textarea,video,audio,select\")) { return; } // Backspace and Esc keys if (keycode === 8 || keycode === 27) { e.preventDefault(); self.close(e); return; } // Left arrow and Up arrow if (keycode === 37 || keycode === 38) { e.preventDefault(); self.previous(); return; } // Righ arrow and Down arrow if (keycode === 39 || keycode === 40) { e.preventDefault(); self.next(); return; } self.trigger(\"afterKeydown\", e, keycode); }); // Hide controls after some inactivity period if (self.group[self.currIndex].opts.idleTime) { self.idleSecondsCounter = 0; $D.on( \"mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle\", function (e) { self.idleSecondsCounter = 0; if (self.isIdle) { self.showControls(); } self.isIdle = false; } ); self.idleInterval = window.setInterval(function () { self.idleSecondsCounter++; if (self.idleSecondsCounter >= self.group[self.currIndex].opts.idleTime && !self.isDragging) { self.isIdle = true; self.idleSecondsCounter = 0; self.hideControls(); } }, 1000); } }, // Remove events added by the core // =============================== removeEvents: function () { var self = this; $W.off(\"orientationchange.fb resize.fb\"); $D.off(\"keydown.fb .fb-idle\"); this.$refs.container.off(\".fb-close .fb-prev .fb-next\"); if (self.idleInterval) { window.clearInterval(self.idleInterval); self.idleInterval = null; } }, // Change to previous gallery item // =============================== previous: function (duration) { return this.jumpTo(this.currPos - 1, duration); }, // Change to next gallery item // =========================== next: function (duration) { return this.jumpTo(this.currPos + 1, duration); }, // Switch to selected gallery item // =============================== jumpTo: function (pos, duration) { var self = this, groupLen = self.group.length, firstRun, isMoved, loop, current, previous, slidePos, stagePos, prop, diff; if (self.isDragging || self.isClosing || (self.isAnimating && self.firstRun)) { return; } // Should loop? pos = parseInt(pos, 10); loop = self.current ? self.current.opts.loop : self.opts.loop; if (!loop && (pos < 0 || pos >= groupLen)) { return false; } // Check if opening for the first time; this helps to speed things up firstRun = self.firstRun = !Object.keys(self.slides).length; // Create slides previous = self.current; self.prevIndex = self.currIndex; self.prevPos = self.currPos; current = self.createSlide(pos); if (groupLen > 1) { if (loop || current.index < groupLen - 1) { self.createSlide(pos + 1); } if (loop || current.index > 0) { self.createSlide(pos - 1); } } self.current = current; self.currIndex = current.index; self.currPos = current.pos; self.trigger(\"beforeShow\", firstRun); self.updateControls(); // Validate duration length current.forcedDuration = undefined; if ($.isNumeric(duration)) { current.forcedDuration = duration; } else { duration = current.opts[firstRun ? \"animationDuration\" : \"transitionDuration\"]; } duration = parseInt(duration, 10); // Check if user has swiped the slides or if still animating isMoved = self.isMoved(current); // Make sure current slide is visible current.$slide.addClass(\"fancybox-slide--current\"); // Fresh start - reveal container, current slide and start loading content if (firstRun) { if (current.opts.animationEffect && duration) { self.$refs.container.css(\"transition-duration\", duration + \"ms\"); } self.$refs.container.addClass(\"fancybox-is-open\").trigger(\"focus\"); // Attempt to load content into slide // This will later call `afterLoad` -> `revealContent` self.loadSlide(current); self.preload(\"image\"); return; } // Get actual slide/stage positions (before cleaning up) slidePos = $.fancybox.getTranslate(previous.$slide); stagePos = $.fancybox.getTranslate(self.$refs.stage); // Clean up all slides $.each(self.slides, function (index, slide) { $.fancybox.stop(slide.$slide, true); }); if (previous.pos !== current.pos) { previous.isComplete = false; } previous.$slide.removeClass(\"fancybox-slide--complete fancybox-slide--current\"); // If slides are out of place, then animate them to correct position if (isMoved) { // Calculate horizontal swipe distance diff = slidePos.left - (previous.pos * slidePos.width + previous.pos * previous.opts.gutter); $.each(self.slides, function (index, slide) { slide.$slide.removeClass(\"fancybox-animated\").removeClass(function (index, className) { return (className.match(/(^|\\s)fancybox-fx-\\S+/g) || []).join(\" \"); }); // Make sure that each slide is in equal distance // This is mostly needed for freshly added slides, because they are not yet positioned var leftPos = slide.pos * slidePos.width + slide.pos * slide.opts.gutter; $.fancybox.setTranslate(slide.$slide, { top: 0, left: leftPos - stagePos.left + diff }); if (slide.pos !== current.pos) { slide.$slide.addClass(\"fancybox-slide--\" + (slide.pos > current.pos ? \"next\" : \"previous\")); } // Redraw to make sure that transition will start forceRedraw(slide.$slide); // Animate the slide $.fancybox.animate( slide.$slide, { top: 0, left: (slide.pos - current.pos) * slidePos.width + (slide.pos - current.pos) * slide.opts.gutter }, duration, function () { slide.$slide .css({ transform: \"\", opacity: \"\" }) .removeClass(\"fancybox-slide--next fancybox-slide--previous\"); if (slide.pos === self.currPos) { self.complete(); } } ); }); } else if (duration && current.opts.transitionEffect) { // Set transition effect for previously active slide prop = \"fancybox-animated fancybox-fx-\" + current.opts.transitionEffect; previous.$slide.addClass(\"fancybox-slide--\" + (previous.pos > current.pos ? \"next\" : \"previous\")); $.fancybox.animate( previous.$slide, prop, duration, function () { previous.$slide.removeClass(prop).removeClass(\"fancybox-slide--next fancybox-slide--previous\"); }, false ); } if (current.isLoaded) { self.revealContent(current); } else { self.loadSlide(current); } self.preload(\"image\"); }, // Create new \"slide\" element // These are gallery items that are actually added to DOM // ======================================================= createSlide: function (pos) { var self = this, $slide, index; index = pos % self.group.length; index = index < 0 ? self.group.length + index : index; if (!self.slides[pos] && self.group[index]) { $slide = $('').appendTo(self.$refs.stage); self.slides[pos] = $.extend(true, {}, self.group[index], { pos: pos, $slide: $slide, isLoaded: false }); self.updateSlide(self.slides[pos]); } return self.slides[pos]; }, // Scale image to the actual size of the image; // x and y values should be relative to the slide // ============================================== scaleToActual: function (x, y, duration) { var self = this, current = self.current, $content = current.$content, canvasWidth = $.fancybox.getTranslate(current.$slide).width, canvasHeight = $.fancybox.getTranslate(current.$slide).height, newImgWidth = current.width, newImgHeight = current.height, imgPos, posX, posY, scaleX, scaleY; if (self.isAnimating || self.isMoved() || !$content || !(current.type == \"image\" && current.isLoaded && !current.hasError)) { return; } self.isAnimating = true; $.fancybox.stop($content); x = x === undefined ? canvasWidth * 0.5 : x; y = y === undefined ? canvasHeight * 0.5 : y; imgPos = $.fancybox.getTranslate($content); imgPos.top -= $.fancybox.getTranslate(current.$slide).top; imgPos.left -= $.fancybox.getTranslate(current.$slide).left; scaleX = newImgWidth / imgPos.width; scaleY = newImgHeight / imgPos.height; // Get center position for original image posX = canvasWidth * 0.5 - newImgWidth * 0.5; posY = canvasHeight * 0.5 - newImgHeight * 0.5; // Make sure image does not move away from edges if (newImgWidth > canvasWidth) { posX = imgPos.left * scaleX - (x * scaleX - x); if (posX > 0) { posX = 0; } if (posX < canvasWidth - newImgWidth) { posX = canvasWidth - newImgWidth; } } if (newImgHeight > canvasHeight) { posY = imgPos.top * scaleY - (y * scaleY - y); if (posY > 0) { posY = 0; } if (posY < canvasHeight - newImgHeight) { posY = canvasHeight - newImgHeight; } } self.updateCursor(newImgWidth, newImgHeight); $.fancybox.animate( $content, { top: posY, left: posX, scaleX: scaleX, scaleY: scaleY }, duration || 366, function () { self.isAnimating = false; } ); // Stop slideshow if (self.SlideShow && self.SlideShow.isActive) { self.SlideShow.stop(); } }, // Scale image to fit inside parent element // ======================================== scaleToFit: function (duration) { var self = this, current = self.current, $content = current.$content, end; if (self.isAnimating || self.isMoved() || !$content || !(current.type == \"image\" && current.isLoaded && !current.hasError)) { return; } self.isAnimating = true; $.fancybox.stop($content); end = self.getFitPos(current); self.updateCursor(end.width, end.height); $.fancybox.animate( $content, { top: end.top, left: end.left, scaleX: end.width / $content.width(), scaleY: end.height / $content.height() }, duration || 366, function () { self.isAnimating = false; } ); }, // Calculate image size to fit inside viewport // =========================================== getFitPos: function (slide) { var self = this, $content = slide.$content, $slide = slide.$slide, width = slide.width || slide.opts.width, height = slide.height || slide.opts.height, maxWidth, maxHeight, minRatio, aspectRatio, rez = {}; if (!slide.isLoaded || !$content || !$content.length) { return false; } maxWidth = $.fancybox.getTranslate(self.$refs.stage).width; maxHeight = $.fancybox.getTranslate(self.$refs.stage).height; maxWidth -= parseFloat($slide.css(\"paddingLeft\")) + parseFloat($slide.css(\"paddingRight\")) + parseFloat($content.css(\"marginLeft\")) + parseFloat($content.css(\"marginRight\")); maxHeight -= parseFloat($slide.css(\"paddingTop\")) + parseFloat($slide.css(\"paddingBottom\")) + parseFloat($content.css(\"marginTop\")) + parseFloat($content.css(\"marginBottom\")); if (!width || !height) { width = maxWidth; height = maxHeight; } minRatio = Math.min(1, maxWidth / width, maxHeight / height); width = minRatio * width; height = minRatio * height; // Adjust width/height to precisely fit into container if (width > maxWidth - 0.5) { width = maxWidth; } if (height > maxHeight - 0.5) { height = maxHeight; } if (slide.type === \"image\") { rez.top = Math.floor((maxHeight - height) * 0.5) + parseFloat($slide.css(\"paddingTop\")); rez.left = Math.floor((maxWidth - width) * 0.5) + parseFloat($slide.css(\"paddingLeft\")); } else if (slide.contentType === \"video\") { // Force aspect ratio for the video // \"I say the whole world must learn of our peaceful ways… by force!\" aspectRatio = slide.opts.width && slide.opts.height ? width / height : slide.opts.ratio || 16 / 9; if (height > width / aspectRatio) { height = width / aspectRatio; } else if (width > height * aspectRatio) { width = height * aspectRatio; } } rez.width = width; rez.height = height; return rez; }, // Update content size and position for all slides // ============================================== update: function (e) { var self = this; $.each(self.slides, function (key, slide) { self.updateSlide(slide, e); }); }, // Update slide content position and size // ====================================== updateSlide: function (slide, e) { var self = this, $content = slide && slide.$content, width = slide.width || slide.opts.width, height = slide.height || slide.opts.height, $slide = slide.$slide; // First, prevent caption overlap, if needed self.adjustCaption(slide); // Then resize content to fit inside the slide if ($content && (width || height || slide.contentType === \"video\") && !slide.hasError) { $.fancybox.stop($content); $.fancybox.setTranslate($content, self.getFitPos(slide)); if (slide.pos === self.currPos) { self.isAnimating = false; self.updateCursor(); } } // Then some adjustments self.adjustLayout(slide); if ($slide.length) { $slide.trigger(\"refresh\"); if (slide.pos === self.currPos) { self.$refs.toolbar .add(self.$refs.navigation.find(\".fancybox-button--arrow_right\")) .toggleClass(\"compensate-for-scrollbar\", $slide.get(0).scrollHeight > $slide.get(0).clientHeight); } } self.trigger(\"onUpdate\", slide, e); }, // Horizontally center slide // ========================= centerSlide: function (duration) { var self = this, current = self.current, $slide = current.$slide; if (self.isClosing || !current) { return; } $slide.siblings().css({ transform: \"\", opacity: \"\" }); $slide .parent() .children() .removeClass(\"fancybox-slide--previous fancybox-slide--next\"); $.fancybox.animate( $slide, { top: 0, left: 0, opacity: 1 }, duration === undefined ? 0 : duration, function () { // Clean up $slide.css({ transform: \"\", opacity: \"\" }); if (!current.isComplete) { self.complete(); } }, false ); }, // Check if current slide is moved (swiped) // ======================================== isMoved: function (slide) { var current = slide || this.current, slidePos, stagePos; if (!current) { return false; } stagePos = $.fancybox.getTranslate(this.$refs.stage); slidePos = $.fancybox.getTranslate(current.$slide); return ( !current.$slide.hasClass(\"fancybox-animated\") && (Math.abs(slidePos.top - stagePos.top) > 0.5 || Math.abs(slidePos.left - stagePos.left) > 0.5) ); }, // Update cursor style depending if content can be zoomed // ====================================================== updateCursor: function (nextWidth, nextHeight) { var self = this, current = self.current, $container = self.$refs.container, canPan, isZoomable; if (!current || self.isClosing || !self.Guestures) { return; } $container.removeClass(\"fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan\"); canPan = self.canPan(nextWidth, nextHeight); isZoomable = canPan ? true : self.isZoomable(); $container.toggleClass(\"fancybox-is-zoomable\", isZoomable); $(\"[data-fancybox-zoom]\").prop(\"disabled\", !isZoomable); if (canPan) { $container.addClass(\"fancybox-can-pan\"); } else if ( isZoomable && (current.opts.clickContent === \"zoom\" || ($.isFunction(current.opts.clickContent) && current.opts.clickContent(current) == \"zoom\")) ) { $container.addClass(\"fancybox-can-zoomIn\"); } else if (current.opts.touch && (current.opts.touch.vertical || self.group.length > 1) && current.contentType !== \"video\") { $container.addClass(\"fancybox-can-swipe\"); } }, // Check if current slide is zoomable // ================================== isZoomable: function () { var self = this, current = self.current, fitPos; // Assume that slide is zoomable if: // - image is still loading // - actual size of the image is smaller than available area if (current && !self.isClosing && current.type === \"image\" && !current.hasError) { if (!current.isLoaded) { return true; } fitPos = self.getFitPos(current); if (fitPos && (current.width > fitPos.width || current.height > fitPos.height)) { return true; } } return false; }, // Check if current image dimensions are smaller than actual // ========================================================= isScaledDown: function (nextWidth, nextHeight) { var self = this, rez = false, current = self.current, $content = current.$content; if (nextWidth !== undefined && nextHeight !== undefined) { rez = nextWidth < current.width && nextHeight < current.height; } else if ($content) { rez = $.fancybox.getTranslate($content); rez = rez.width < current.width && rez.height < current.height; } return rez; }, // Check if image dimensions exceed parent element // =============================================== canPan: function (nextWidth, nextHeight) { var self = this, current = self.current, pos = null, rez = false; if (current.type === \"image\" && (current.isComplete || (nextWidth && nextHeight)) && !current.hasError) { rez = self.getFitPos(current); if (nextWidth !== undefined && nextHeight !== undefined) { pos = { width: nextWidth, height: nextHeight }; } else if (current.isComplete) { pos = $.fancybox.getTranslate(current.$content); } if (pos && rez) { rez = Math.abs(pos.width - rez.width) > 1.5 || Math.abs(pos.height - rez.height) > 1.5; } } return rez; }, // Load content into the slide // =========================== loadSlide: function (slide) { var self = this, type, $slide, ajaxLoad; if (slide.isLoading || slide.isLoaded) { return; } slide.isLoading = true; if (self.trigger(\"beforeLoad\", slide) === false) { slide.isLoading = false; return false; } type = slide.type; $slide = slide.$slide; $slide .off(\"refresh\") .trigger(\"onReset\") .addClass(slide.opts.slideClass); // Create content depending on the type switch (type) { case \"image\": self.setImage(slide); break; case \"iframe\": self.setIframe(slide); break; case \"html\": self.setContent(slide, slide.src || slide.content); break; case \"video\": self.setContent( slide, slide.opts.video.tpl .replace(/\\{\\{src\\}\\}/gi, slide.src) .replace(\"\", slide.opts.videoFormat || slide.opts.video.format || \"\") .replace(\"\", slide.thumb || \"\") ); break; case \"inline\": if ($(slide.src).length) { self.setContent(slide, $(slide.src)); } else { self.setError(slide); } break; case \"ajax\": self.showLoading(slide); ajaxLoad = $.ajax( $.extend({}, slide.opts.ajax.settings, { url: slide.src, success: function (data, textStatus) { if (textStatus === \"success\") { self.setContent(slide, data); } }, error: function (jqXHR, textStatus) { if (jqXHR && textStatus !== \"abort\") { self.setError(slide); } } }) ); $slide.one(\"onReset\", function () { ajaxLoad.abort(); }); break; default: self.setError(slide); break; } return true; }, // Use thumbnail image, if possible // ================================ setImage: function (slide) { var self = this, ghost; // Check if need to show loading icon setTimeout(function () { var $img = slide.$image; if (!self.isClosing && slide.isLoading && (!$img || !$img.length || !$img[0].complete) && !slide.hasError) { self.showLoading(slide); } }, 50); //Check if image has srcset self.checkSrcset(slide); // This will be wrapper containing both ghost and actual image slide.$content = $('') .addClass(\"fancybox-is-hidden\") .appendTo(slide.$slide.addClass(\"fancybox-slide--image\")); // If we have a thumbnail, we can display it while actual image is loading // Users will not stare at black screen and actual image will appear gradually if (slide.opts.preload !== false && slide.opts.width && slide.opts.height && slide.thumb) { slide.width = slide.opts.width; slide.height = slide.opts.height; ghost = document.createElement(\"img\"); ghost.onerror = function () { $(this).remove(); slide.$ghost = null; }; ghost.onload = function () { self.afterLoad(slide); }; slide.$ghost = $(ghost) .addClass(\"fancybox-image\") .appendTo(slide.$content) .attr(\"src\", slide.thumb); } // Start loading actual image self.setBigImage(slide); }, // Check if image has srcset and get the source // ============================================ checkSrcset: function (slide) { var srcset = slide.opts.srcset || slide.opts.image.srcset, found, temp, pxRatio, windowWidth; // If we have \"srcset\", then we need to find first matching \"src\" value. // This is necessary, because when you set an src attribute, the browser will preload the image // before any javascript or even CSS is applied. if (srcset) { pxRatio = window.devicePixelRatio || 1; windowWidth = window.innerWidth * pxRatio; temp = srcset.split(\",\").map(function (el) { var ret = {}; el.trim() .split(/\\s+/) .forEach(function (el, i) { var value = parseInt(el.substring(0, el.length - 1), 10); if (i === 0) { return (ret.url = el); } if (value) { ret.value = value; ret.postfix = el[el.length - 1]; } }); return ret; }); // Sort by value temp.sort(function (a, b) { return a.value - b.value; }); // Ok, now we have an array of all srcset values for (var j = 0; j < temp.length; j++) { var el = temp[j]; if ((el.postfix === \"w\" && el.value >= windowWidth) || (el.postfix === \"x\" && el.value >= pxRatio)) { found = el; break; } } // If not found, take the last one if (!found && temp.length) { found = temp[temp.length - 1]; } if (found) { slide.src = found.url; // If we have default width/height values, we can calculate height for matching source if (slide.width && slide.height && found.postfix == \"w\") { slide.height = (slide.width / slide.height) * found.value; slide.width = found.value; } slide.opts.srcset = srcset; } } }, // Create full-size image // ====================== setBigImage: function (slide) { var self = this, img = document.createElement(\"img\"), $img = $(img); slide.$image = $img .one(\"error\", function () { self.setError(slide); }) .one(\"load\", function () { var sizes; if (!slide.$ghost) { self.resolveImageSlideSize(slide, this.naturalWidth, this.naturalHeight); self.afterLoad(slide); } if (self.isClosing) { return; } if (slide.opts.srcset) { sizes = slide.opts.sizes; if (!sizes || sizes === \"auto\") { sizes = (slide.width / slide.height > 1 && $W.width() / $W.height() > 1 ? \"100\" : Math.round((slide.width / slide.height) * 100)) + \"vw\"; } $img.attr(\"sizes\", sizes).attr(\"srcset\", slide.opts.srcset); } // Hide temporary image after some delay if (slide.$ghost) { setTimeout(function () { if (slide.$ghost && !self.isClosing) { slide.$ghost.hide(); } }, Math.min(300, Math.max(1000, slide.height / 1600))); } self.hideLoading(slide); }) .addClass(\"fancybox-image\") .attr(\"src\", slide.src) .appendTo(slide.$content); if ((img.complete || img.readyState == \"complete\") && $img.naturalWidth && $img.naturalHeight) { $img.trigger(\"load\"); } else if (img.error) { $img.trigger(\"error\"); } }, // Computes the slide size from image size and maxWidth/maxHeight // ============================================================== resolveImageSlideSize: function (slide, imgWidth, imgHeight) { var maxWidth = parseInt(slide.opts.width, 10), maxHeight = parseInt(slide.opts.height, 10); // Sets the default values from the image slide.width = imgWidth; slide.height = imgHeight; if (maxWidth > 0) { slide.width = maxWidth; slide.height = Math.floor((maxWidth * imgHeight) / imgWidth); } if (maxHeight > 0) { slide.width = Math.floor((maxHeight * imgWidth) / imgHeight); slide.height = maxHeight; } }, // Create iframe wrapper, iframe and bindings // ========================================== setIframe: function (slide) { var self = this, opts = slide.opts.iframe, $slide = slide.$slide, $iframe; slide.$content = $('') .css(opts.css) .appendTo($slide); $slide.addClass(\"fancybox-slide--\" + slide.contentType); slide.$iframe = $iframe = $(opts.tpl.replace(/\\{rnd\\}/g, new Date().getTime())) .attr(opts.attr) .appendTo(slide.$content); if (opts.preload) { self.showLoading(slide); // Unfortunately, it is not always possible to determine if iframe is successfully loaded // (due to browser security policy) $iframe.on(\"load.fb error.fb\", function (e) { this.isReady = 1; slide.$slide.trigger(\"refresh\"); self.afterLoad(slide); }); // Recalculate iframe content size // =============================== $slide.on(\"refresh.fb\", function () { var $content = slide.$content, frameWidth = opts.css.width, frameHeight = opts.css.height, $contents, $body; if ($iframe[0].isReady !== 1) { return; } try { $contents = $iframe.contents(); $body = $contents.find(\"body\"); } catch (ignore) {} // Calculate content dimensions, if it is accessible if ($body && $body.length && $body.children().length) { // Avoid scrolling to top (if multiple instances) $slide.css(\"overflow\", \"visible\"); $content.css({ width: \"100%\", \"max-width\": \"100%\", height: \"9999px\" }); if (frameWidth === undefined) { frameWidth = Math.ceil(Math.max($body[0].clientWidth, $body.outerWidth(true))); } $content.css(\"width\", frameWidth ? frameWidth : \"\").css(\"max-width\", \"\"); if (frameHeight === undefined) { frameHeight = Math.ceil(Math.max($body[0].clientHeight, $body.outerHeight(true))); } $content.css(\"height\", frameHeight ? frameHeight : \"\"); $slide.css(\"overflow\", \"auto\"); } $content.removeClass(\"fancybox-is-hidden\"); }); } else { self.afterLoad(slide); } $iframe.attr(\"src\", slide.src); // Remove iframe if closing or changing gallery item $slide.one(\"onReset\", function () { // This helps IE not to throw errors when closing try { $(this) .find(\"iframe\") .hide() .unbind() .attr(\"src\", \"//about:blank\"); } catch (ignore) {} $(this) .off(\"refresh.fb\") .empty(); slide.isLoaded = false; slide.isRevealed = false; }); }, // Wrap and append content to the slide // ====================================== setContent: function (slide, content) { var self = this; if (self.isClosing) { return; } self.hideLoading(slide); if (slide.$content) { $.fancybox.stop(slide.$content); } slide.$slide.empty(); // If content is a jQuery object, then it will be moved to the slide. // The placeholder is created so we will know where to put it back. if (isQuery(content) && content.parent().length) { // Make sure content is not already moved to fancyBox if (content.hasClass(\"fancybox-content\") || content.parent().hasClass(\"fancybox-content\")) { content.parents(\".fancybox-slide\").trigger(\"onReset\"); } // Create temporary element marking original place of the content slide.$placeholder = $(\"\") .hide() .insertAfter(content); // Make sure content is visible content.css(\"display\", \"inline-block\"); } else if (!slide.hasError) { // If content is just a plain text, try to convert it to html if ($.type(content) === \"string\") { content = $(\"\") .append($.trim(content)) .contents(); } // If \"filter\" option is provided, then filter content if (slide.opts.filter) { content = $(\"\") .html(content) .find(slide.opts.filter); } } slide.$slide.one(\"onReset\", function () { // Pause all html5 video/audio $(this) .find(\"video,audio\") .trigger(\"pause\"); // Put content back if (slide.$placeholder) { slide.$placeholder.after(content.removeClass(\"fancybox-content\").hide()).remove(); slide.$placeholder = null; } // Remove custom close button if (slide.$smallBtn) { slide.$smallBtn.remove(); slide.$smallBtn = null; } // Remove content and mark slide as not loaded if (!slide.hasError) { $(this).empty(); slide.isLoaded = false; slide.isRevealed = false; } }); $(content).appendTo(slide.$slide); if ($(content).is(\"video,audio\")) { $(content).addClass(\"fancybox-video\"); $(content).wrap(\"\"); slide.contentType = \"video\"; slide.opts.width = slide.opts.width || $(content).attr(\"width\"); slide.opts.height = slide.opts.height || $(content).attr(\"height\"); } slide.$content = slide.$slide .children() .filter(\"div,form,main,video,audio,article,.fancybox-content\") .first(); slide.$content.siblings().hide(); // Re-check if there is a valid content // (in some cases, ajax response can contain various elements or plain text) if (!slide.$content.length) { slide.$content = slide.$slide .wrapInner(\"\") .children() .first(); } slide.$content.addClass(\"fancybox-content\"); slide.$slide.addClass(\"fancybox-slide--\" + slide.contentType); self.afterLoad(slide); }, // Display error message // ===================== setError: function (slide) { slide.hasError = true; slide.$slide .trigger(\"onReset\") .removeClass(\"fancybox-slide--\" + slide.contentType) .addClass(\"fancybox-slide--error\"); slide.contentType = \"html\"; this.setContent(slide, this.translate(slide, slide.opts.errorTpl)); if (slide.pos === this.currPos) { this.isAnimating = false; } }, // Show loading icon inside the slide // ================================== showLoading: function (slide) { var self = this; slide = slide || self.current; if (slide && !slide.$spinner) { slide.$spinner = $(self.translate(self, self.opts.spinnerTpl)) .appendTo(slide.$slide) .hide() .fadeIn(\"fast\"); } }, // Remove loading icon from the slide // ================================== hideLoading: function (slide) { var self = this; slide = slide || self.current; if (slide && slide.$spinner) { slide.$spinner.stop().remove(); delete slide.$spinner; } }, // Adjustments after slide content has been loaded // =============================================== afterLoad: function (slide) { var self = this; if (self.isClosing) { return; } slide.isLoading = false; slide.isLoaded = true; self.trigger(\"afterLoad\", slide); self.hideLoading(slide); // Add small close button if (slide.opts.smallBtn && (!slide.$smallBtn || !slide.$smallBtn.length)) { slide.$smallBtn = $(self.translate(slide, slide.opts.btnTpl.smallBtn)).appendTo(slide.$content); } // Disable right click if (slide.opts.protect && slide.$content && !slide.hasError) { slide.$content.on(\"contextmenu.fb\", function (e) { if (e.button == 2) { e.preventDefault(); } return true; }); // Add fake element on top of the image // This makes a bit harder for user to select image if (slide.type === \"image\") { $('').appendTo(slide.$content); } } self.adjustCaption(slide); self.adjustLayout(slide); if (slide.pos === self.currPos) { self.updateCursor(); } self.revealContent(slide); }, // Prevent caption overlap, // fix css inconsistency across browsers // ===================================== adjustCaption: function (slide) { var self = this, current = slide || self.current, caption = current.opts.caption, preventOverlap = current.opts.preventCaptionOverlap, $caption = self.$refs.caption, $clone, captionH = false; $caption.toggleClass(\"fancybox-caption--separate\", preventOverlap); if (preventOverlap && caption && caption.length) { if (current.pos !== self.currPos) { $clone = $caption.clone().appendTo($caption.parent()); $clone .children() .eq(0) .empty() .html(caption); captionH = $clone.outerHeight(true); $clone.empty().remove(); } else if (self.$caption) { captionH = self.$caption.outerHeight(true); } current.$slide.css(\"padding-bottom\", captionH || \"\"); } }, // Simple hack to fix inconsistency across browsers, described here (affects Edge, too): // https://bugzilla.mozilla.org/show_bug.cgi?id=748518 // ==================================================================================== adjustLayout: function (slide) { var self = this, current = slide || self.current, scrollHeight, marginBottom, inlinePadding, actualPadding; if (current.isLoaded && current.opts.disableLayoutFix !== true) { current.$content.css(\"margin-bottom\", \"\"); // If we would always set margin-bottom for the content, // then it would potentially break vertical align if (current.$content.outerHeight() > current.$slide.height() + 0.5) { inlinePadding = current.$slide[0].style[\"padding-bottom\"]; actualPadding = current.$slide.css(\"padding-bottom\"); if (parseFloat(actualPadding) > 0) { scrollHeight = current.$slide[0].scrollHeight; current.$slide.css(\"padding-bottom\", 0); if (Math.abs(scrollHeight - current.$slide[0].scrollHeight) < 1) { marginBottom = actualPadding; } current.$slide.css(\"padding-bottom\", inlinePadding); } } current.$content.css(\"margin-bottom\", marginBottom); } }, // Make content visible // This method is called right after content has been loaded or // user navigates gallery and transition should start // ============================================================ revealContent: function (slide) { var self = this, $slide = slide.$slide, end = false, start = false, isMoved = self.isMoved(slide), isRevealed = slide.isRevealed, effect, effectClassName, duration, opacity; slide.isRevealed = true; effect = slide.opts[self.firstRun ? \"animationEffect\" : \"transitionEffect\"]; duration = slide.opts[self.firstRun ? \"animationDuration\" : \"transitionDuration\"]; duration = parseInt(slide.forcedDuration === undefined ? duration : slide.forcedDuration, 10); if (isMoved || slide.pos !== self.currPos || !duration) { effect = false; } // Check if can zoom if (effect === \"zoom\") { if (slide.pos === self.currPos && duration && slide.type === \"image\" && !slide.hasError && (start = self.getThumbPos(slide))) { end = self.getFitPos(slide); } else { effect = \"fade\"; } } // Zoom animation // ============== if (effect === \"zoom\") { self.isAnimating = true; end.scaleX = end.width / start.width; end.scaleY = end.height / start.height; // Check if we need to animate opacity opacity = slide.opts.zoomOpacity; if (opacity == \"auto\") { opacity = Math.abs(slide.width / slide.height - start.width / start.height) > 0.1; } if (opacity) { start.opacity = 0.1; end.opacity = 1; } // Draw image at start position $.fancybox.setTranslate(slide.$content.removeClass(\"fancybox-is-hidden\"), start); forceRedraw(slide.$content); // Start animation $.fancybox.animate(slide.$content, end, duration, function () { self.isAnimating = false; self.complete(); }); return; } self.updateSlide(slide); // Simply show content if no effect // ================================ if (!effect) { slide.$content.removeClass(\"fancybox-is-hidden\"); if (!isRevealed && isMoved && slide.type === \"image\" && !slide.hasError) { slide.$content.hide().fadeIn(\"fast\"); } if (slide.pos === self.currPos) { self.complete(); } return; } // Prepare for CSS transiton // ========================= $.fancybox.stop($slide); //effectClassName = \"fancybox-animated fancybox-slide--\" + (slide.pos >= self.prevPos ? \"next\" : \"previous\") + \" fancybox-fx-\" + effect; effectClassName = \"fancybox-slide--\" + (slide.pos >= self.prevPos ? \"next\" : \"previous\") + \" fancybox-animated fancybox-fx-\" + effect; $slide.addClass(effectClassName).removeClass(\"fancybox-slide--current\"); //.addClass(effectClassName); slide.$content.removeClass(\"fancybox-is-hidden\"); // Force reflow forceRedraw($slide); if (slide.type !== \"image\") { slide.$content.hide().show(0); } $.fancybox.animate( $slide, \"fancybox-slide--current\", duration, function () { $slide.removeClass(effectClassName).css({ transform: \"\", opacity: \"\" }); if (slide.pos === self.currPos) { self.complete(); } }, true ); }, // Check if we can and have to zoom from thumbnail //================================================ getThumbPos: function (slide) { var rez = false, $thumb = slide.$thumb, thumbPos, btw, brw, bbw, blw; if (!$thumb || !inViewport($thumb[0])) { return false; } thumbPos = $.fancybox.getTranslate($thumb); btw = parseFloat($thumb.css(\"border-top-width\") || 0); brw = parseFloat($thumb.css(\"border-right-width\") || 0); bbw = parseFloat($thumb.css(\"border-bottom-width\") || 0); blw = parseFloat($thumb.css(\"border-left-width\") || 0); rez = { top: thumbPos.top + btw, left: thumbPos.left + blw, width: thumbPos.width - brw - blw, height: thumbPos.height - btw - bbw, scaleX: 1, scaleY: 1 }; return thumbPos.width > 0 && thumbPos.height > 0 ? rez : false; }, // Final adjustments after current gallery item is moved to position // and it`s content is loaded // ================================================================== complete: function () { var self = this, current = self.current, slides = {}, $el; if (self.isMoved() || !current.isLoaded) { return; } if (!current.isComplete) { current.isComplete = true; current.$slide.siblings().trigger(\"onReset\"); self.preload(\"inline\"); // Trigger any CSS transiton inside the slide forceRedraw(current.$slide); current.$slide.addClass(\"fancybox-slide--complete\"); // Remove unnecessary slides $.each(self.slides, function (key, slide) { if (slide.pos >= self.currPos - 1 && slide.pos 1)) .toggleClass(\"fancybox-show-caption\", !!self.$caption) .toggleClass(\"fancybox-show-nav\", !!(opts.arrows && self.group.length > 1)) .toggleClass(\"fancybox-is-modal\", !!opts.modal); }, // Toggle toolbar and caption // ========================== toggleControls: function () { if (this.hasHiddenControls) { this.showControls(); } else { this.hideControls(); } } }); $.fancybox = { version: \"3.5.7\", defaults: defaults, // Get current instance and execute a command. // // Examples of usage: // // $instance = $.fancybox.getInstance(); // $.fancybox.getInstance().jumpTo( 1 ); // $.fancybox.getInstance( 'jumpTo', 1 ); // $.fancybox.getInstance( function() { // console.info( this.currIndex ); // }); // ====================================================== getInstance: function (command) { var instance = $('.fancybox-container:not(\".fancybox-is-closing\"):last').data(\"FancyBox\"), args = Array.prototype.slice.call(arguments, 1); if (instance instanceof FancyBox) { if ($.type(command) === \"string\") { instance[command].apply(instance, args); } else if ($.type(command) === \"function\") { command.apply(instance, args); } return instance; } return false; }, // Create new instance // =================== open: function (items, opts, index) { return new FancyBox(items, opts, index); }, // Close current or all instances // ============================== close: function (all) { var instance = this.getInstance(); if (instance) { instance.close(); // Try to find and close next instance if (all === true) { this.close(all); } } }, // Close all instances and unbind all events // ========================================= destroy: function () { this.close(true); $D.add(\"body\").off(\"click.fb-start\", \"**\"); }, // Try to detect mobile devices // ============================ isMobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent), // Detect if 'translate3d' support is available // ============================================ use3d: (function () { var div = document.createElement(\"div\"); return ( window.getComputedStyle && window.getComputedStyle(div) && window.getComputedStyle(div).getPropertyValue(\"transform\") && !(document.documentMode && document.documentMode < 11) ); })(), // Helper function to get current visual state of an element // returns array[ top, left, horizontal-scale, vertical-scale, opacity ] // ===================================================================== getTranslate: function ($el) { var domRect; if (!$el || !$el.length) { return false; } domRect = $el[0].getBoundingClientRect(); return { top: domRect.top || 0, left: domRect.left || 0, width: domRect.width, height: domRect.height, opacity: parseFloat($el.css(\"opacity\")) }; }, // Shortcut for setting \"translate3d\" properties for element // Can set be used to set opacity, too // ======================================================== setTranslate: function ($el, props) { var str = \"\", css = {}; if (!$el || !props) { return; } if (props.left !== undefined || props.top !== undefined) { str = (props.left === undefined ? $el.position().left : props.left) + \"px, \" + (props.top === undefined ? $el.position().top : props.top) + \"px\"; if (this.use3d) { str = \"translate3d(\" + str + \", 0px)\"; } else { str = \"translate(\" + str + \")\"; } } if (props.scaleX !== undefined && props.scaleY !== undefined) { str += \" scale(\" + props.scaleX + \", \" + props.scaleY + \")\"; } else if (props.scaleX !== undefined) { str += \" scaleX(\" + props.scaleX + \")\"; } if (str.length) { css.transform = str; } if (props.opacity !== undefined) { css.opacity = props.opacity; } if (props.width !== undefined) { css.width = props.width; } if (props.height !== undefined) { css.height = props.height; } return $el.css(css); }, // Simple CSS transition handler // ============================= animate: function ($el, to, duration, callback, leaveAnimationName) { var self = this, from; if ($.isFunction(duration)) { callback = duration; duration = null; } self.stop($el); from = self.getTranslate($el); $el.on(transitionEnd, function (e) { // Skip events from child elements and z-index change if (e && e.originalEvent && (!$el.is(e.originalEvent.target) || e.originalEvent.propertyName == \"z-index\")) { return; } self.stop($el); if ($.isNumeric(duration)) { $el.css(\"transition-duration\", \"\"); } if ($.isPlainObject(to)) { if (to.scaleX !== undefined && to.scaleY !== undefined) { self.setTranslate($el, { top: to.top, left: to.left, width: from.width * to.scaleX, height: from.height * to.scaleY, scaleX: 1, scaleY: 1 }); } } else if (leaveAnimationName !== true) { $el.removeClass(to); } if ($.isFunction(callback)) { callback(e); } }); if ($.isNumeric(duration)) { $el.css(\"transition-duration\", duration + \"ms\"); } // Start animation by changing CSS properties or class name if ($.isPlainObject(to)) { if (to.scaleX !== undefined && to.scaleY !== undefined) { delete to.width; delete to.height; if ($el.parent().hasClass(\"fancybox-slide--image\")) { $el.parent().addClass(\"fancybox-is-scaling\"); } } $.fancybox.setTranslate($el, to); } else { $el.addClass(to); } // Make sure that `transitionend` callback gets fired $el.data( \"timer\", setTimeout(function () { $el.trigger(transitionEnd); }, duration + 33) ); }, stop: function ($el, callCallback) { if ($el && $el.length) { clearTimeout($el.data(\"timer\")); if (callCallback) { $el.trigger(transitionEnd); } $el.off(transitionEnd).css(\"transition-duration\", \"\"); $el.parent().removeClass(\"fancybox-is-scaling\"); } } }; // Default click handler for \"fancyboxed\" links // ============================================ function _run(e, opts) { var items = [], index = 0, $target, value, instance; // Avoid opening multiple times if (e && e.isDefaultPrevented()) { return; } e.preventDefault(); opts = opts || {}; if (e && e.data) { opts = mergeOpts(e.data.options, opts); } $target = opts.$target || $(e.currentTarget).trigger(\"blur\"); instance = $.fancybox.getInstance(); if (instance && instance.$trigger && instance.$trigger.is($target)) { return; } if (opts.selector) { items = $(opts.selector); } else { // Get all related items and find index for clicked one value = $target.attr(\"data-fancybox\") || \"\"; if (value) { items = e.data ? e.data.items : []; items = items.length ? items.filter('[data-fancybox=\"' + value + '\"]') : $('[data-fancybox=\"' + value + '\"]'); } else { items = [$target]; } } index = $(items).index($target); // Sometimes current item can not be found if (index < 0) { index = 0; } instance = $.fancybox.open(items, opts, index); // Save last active element instance.$trigger = $target; } // Create a jQuery plugin // ====================== $.fn.fancybox = function (options) { var selector; options = options || {}; selector = options.selector || false; if (selector) { // Use body element instead of document so it executes first $(\"body\") .off(\"click.fb-start\", selector) .on(\"click.fb-start\", selector, { options: options }, _run); } else { this.off(\"click.fb-start\").on( \"click.fb-start\", { items: this, options: options }, _run ); } return this; }; // Self initializing plugin for all elements having `data-fancybox` attribute // ========================================================================== $D.on(\"click.fb-start\", \"[data-fancybox]\", _run); // Enable \"trigger elements\" // ========================= $D.on(\"click.fb-start\", \"[data-fancybox-trigger]\", function (e) { $('[data-fancybox=\"' + $(this).attr(\"data-fancybox-trigger\") + '\"]') .eq($(this).attr(\"data-fancybox-index\") || 0) .trigger(\"click.fb-start\", { $trigger: $(this) }); }); // Track focus event for better accessibility styling // ================================================== (function () { var buttonStr = \".fancybox-button\", focusStr = \"fancybox-focus\", $pressed = null; $D.on(\"mousedown mouseup focus blur\", buttonStr, function (e) { switch (e.type) { case \"mousedown\": $pressed = $(this); break; case \"mouseup\": $pressed = null; break; case \"focusin\": $(buttonStr).removeClass(focusStr); if (!$(this).is($pressed) && !$(this).is(\"[disabled]\")) { $(this).addClass(focusStr); } break; case \"focusout\": $(buttonStr).removeClass(focusStr); break; } }); })(); })(window, document, jQuery); // ========================================================================== // // Media // Adds additional media type support // // ========================================================================== (function ($) { \"use strict\"; // Object containing properties for each media type var defaults = { youtube: { matcher: /(youtube\\.com|youtu\\.be|youtube\\-nocookie\\.com)\\/(watch\\?(.*&)?v=|v\\/|u\\/|embed\\/?)?(videoseries\\?list=(.*)|[\\w-]{11}|\\?listType=(.*)&list=(.*))(.*)/i, params: { autoplay: 1, autohide: 1, fs: 1, rel: 0, hd: 1, wmode: \"transparent\", enablejsapi: 1, html5: 1 }, paramPlace: 8, type: \"iframe\", url: \"https://www.youtube-nocookie.com/embed/$4\", thumb: \"https://img.youtube.com/vi/$4/hqdefault.jpg\" }, vimeo: { matcher: /^.+vimeo.com\\/(.*\\/)?([\\d]+)(.*)?/, params: { autoplay: 1, hd: 1, show_title: 1, show_byline: 1, show_portrait: 0, fullscreen: 1 }, paramPlace: 3, type: \"iframe\", url: \"//player.vimeo.com/video/$2\" }, instagram: { matcher: /(instagr\\.am|instagram\\.com)\\/p\\/([a-zA-Z0-9_\\-]+)\\/?/i, type: \"image\", url: \"//$1/p/$2/media/?size=l\" }, // Examples: // http://maps.google.com/?ll=48.857995,2.294297&spn=0.007666,0.021136&t=m&z=16 // https://www.google.com/maps/@37.7852006,-122.4146355,14.65z // https://www.google.com/maps/@52.2111123,2.9237542,6.61z?hl=en // https://www.google.com/maps/place/Googleplex/@37.4220041,-122.0833494,17z/data=!4m5!3m4!1s0x0:0x6c296c66619367e0!8m2!3d37.4219998!4d-122.0840572 gmap_place: { matcher: /(maps\\.)?google\\.([a-z]{2,3}(\\.[a-z]{2})?)\\/(((maps\\/(place\\/(.*)\\/)?\\@(.*),(\\d+.?\\d+?)z))|(\\?ll=))(.*)?/i, type: \"iframe\", url: function (rez) { return ( \"//maps.google.\" + rez[2] + \"/?ll=\" + (rez[9] ? rez[9] + \"&z=\" + Math.floor(rez[10]) + (rez[12] ? rez[12].replace(/^\\//, \"&\") : \"\") : rez[12] + \"\").replace(/\\?/, \"&\") + \"&output=\" + (rez[12] && rez[12].indexOf(\"layer=c\") > 0 ? \"svembed\" : \"embed\") ); } }, // Examples: // https://www.google.com/maps/search/Empire+State+Building/ // https://www.google.com/maps/search/?api=1&query=centurylink+field // https://www.google.com/maps/search/?api=1&query=47.5951518,-122.3316393 gmap_search: { matcher: /(maps\\.)?google\\.([a-z]{2,3}(\\.[a-z]{2})?)\\/(maps\\/search\\/)(.*)/i, type: \"iframe\", url: function (rez) { return \"//maps.google.\" + rez[2] + \"/maps?q=\" + rez[5].replace(\"query=\", \"q=\").replace(\"api=1\", \"\") + \"&output=embed\"; } } }; // Formats matching url to final form var format = function (url, rez, params) { if (!url) { return; } params = params || \"\"; if ($.type(params) === \"object\") { params = $.param(params, true); } $.each(rez, function (key, value) { url = url.replace(\"$\" + key, value || \"\"); }); if (params.length) { url += (url.indexOf(\"?\") > 0 ? \"&\" : \"?\") + params; } return url; }; $(document).on(\"objectNeedsType.fb\", function (e, instance, item) { var url = item.src || \"\", type = false, media, thumb, rez, params, urlParams, paramObj, provider; media = $.extend(true, {}, defaults, item.opts.media); // Look for any matching media type $.each(media, function (providerName, providerOpts) { rez = url.match(providerOpts.matcher); if (!rez) { return; } type = providerOpts.type; provider = providerName; paramObj = {}; if (providerOpts.paramPlace && rez[providerOpts.paramPlace]) { urlParams = rez[providerOpts.paramPlace]; if (urlParams[0] == \"?\") { urlParams = urlParams.substring(1); } urlParams = urlParams.split(\"&\"); for (var m = 0; m < urlParams.length; ++m) { var p = urlParams[m].split(\"=\", 2); if (p.length == 2) { paramObj[p[0]] = decodeURIComponent(p[1].replace(/\\+/g, \" \")); } } } params = $.extend(true, {}, providerOpts.params, item.opts[providerName], paramObj); url = $.type(providerOpts.url) === \"function\" ? providerOpts.url.call(this, rez, params, item) : format(providerOpts.url, rez, params); thumb = $.type(providerOpts.thumb) === \"function\" ? providerOpts.thumb.call(this, rez, params, item) : format(providerOpts.thumb, rez); if (providerName === \"youtube\") { url = url.replace(/&t=((\\d+)m)?(\\d+)s/, function (match, p1, m, s) { return \"&start=\" + ((m ? parseInt(m, 10) * 60 : 0) + parseInt(s, 10)); }); } else if (providerName === \"vimeo\") { url = url.replace(\"&%23\", \"#\"); } return false; }); // If it is found, then change content type and update the url if (type) { if (!item.opts.thumb && !(item.opts.$thumb && item.opts.$thumb.length)) { item.opts.thumb = thumb; } if (type === \"iframe\") { item.opts = $.extend(true, item.opts, { iframe: { preload: false, attr: { scrolling: \"no\" } } }); } $.extend(item, { type: type, src: url, origSrc: item.src, contentSource: provider, contentType: type === \"image\" ? \"image\" : provider == \"gmap_place\" || provider == \"gmap_search\" ? \"map\" : \"video\" }); } else if (url) { item.type = item.opts.defaultType; } }); // Load YouTube/Video API on request to detect when video finished playing var VideoAPILoader = { youtube: { src: \"https://www.youtube.com/iframe_api\", class: \"YT\", loading: false, loaded: false }, vimeo: { src: \"https://player.vimeo.com/api/player.js\", class: \"Vimeo\", loading: false, loaded: false }, load: function (vendor) { var _this = this, script; if (this[vendor].loaded) { setTimeout(function () { _this.done(vendor); }); return; } if (this[vendor].loading) { return; } this[vendor].loading = true; script = document.createElement(\"script\"); script.type = \"text/javascript\"; script.src = this[vendor].src; if (vendor === \"youtube\") { window.onYouTubeIframeAPIReady = function () { _this[vendor].loaded = true; _this.done(vendor); }; } else { script.onload = function () { _this[vendor].loaded = true; _this.done(vendor); }; } document.body.appendChild(script); }, done: function (vendor) { var instance, $el, player; if (vendor === \"youtube\") { delete window.onYouTubeIframeAPIReady; } instance = $.fancybox.getInstance(); if (instance) { $el = instance.current.$content.find(\"iframe\"); if (vendor === \"youtube\" && YT !== undefined && YT) { player = new YT.Player($el.attr(\"id\"), { events: { onStateChange: function (e) { if (e.data == 0) { instance.next(); } } } }); } else if (vendor === \"vimeo\" && Vimeo !== undefined && Vimeo) { player = new Vimeo.Player($el); player.on(\"ended\", function () { instance.next(); }); } } } }; $(document).on({ \"afterShow.fb\": function (e, instance, current) { if (instance.group.length > 1 && (current.contentSource === \"youtube\" || current.contentSource === \"vimeo\")) { VideoAPILoader.load(current.contentSource); } } }); })(jQuery); // ========================================================================== // // Guestures // Adds touch guestures, handles click and tap events // // ========================================================================== (function (window, document, $) { \"use strict\"; var requestAFrame = (function () { return ( window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || // if all else fails, use setTimeout function (callback) { return window.setTimeout(callback, 1000 / 60); } ); })(); var cancelAFrame = (function () { return ( window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || function (id) { window.clearTimeout(id); } ); })(); var getPointerXY = function (e) { var result = []; e = e.originalEvent || e || window.e; e = e.touches && e.touches.length ? e.touches : e.changedTouches && e.changedTouches.length ? e.changedTouches : [e]; for (var key in e) { if (e[key].pageX) { result.push({ x: e[key].pageX, y: e[key].pageY }); } else if (e[key].clientX) { result.push({ x: e[key].clientX, y: e[key].clientY }); } } return result; }; var distance = function (point2, point1, what) { if (!point1 || !point2) { return 0; } if (what === \"x\") { return point2.x - point1.x; } else if (what === \"y\") { return point2.y - point1.y; } return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2)); }; var isClickable = function ($el) { if ( $el.is('a,area,button,[role=\"button\"],input,label,select,summary,textarea,video,audio,iframe') || $.isFunction($el.get(0).onclick) || $el.data(\"selectable\") ) { return true; } // Check for attributes like data-fancybox-next or data-fancybox-close for (var i = 0, atts = $el[0].attributes, n = atts.length; i < n; i++) { if (atts[i].nodeName.substr(0, 14) === \"data-fancybox-\") { return true; } } return false; }; var hasScrollbars = function (el) { var overflowY = window.getComputedStyle(el)[\"overflow-y\"], overflowX = window.getComputedStyle(el)[\"overflow-x\"], vertical = (overflowY === \"scroll\" || overflowY === \"auto\") && el.scrollHeight > el.clientHeight, horizontal = (overflowX === \"scroll\" || overflowX === \"auto\") && el.scrollWidth > el.clientWidth; return vertical || horizontal; }; var isScrollable = function ($el) { var rez = false; while (true) { rez = hasScrollbars($el.get(0)); if (rez) { break; } $el = $el.parent(); if (!$el.length || $el.hasClass(\"fancybox-stage\") || $el.is(\"body\")) { break; } } return rez; }; var Guestures = function (instance) { var self = this; self.instance = instance; self.$bg = instance.$refs.bg; self.$stage = instance.$refs.stage; self.$container = instance.$refs.container; self.destroy(); self.$container.on(\"touchstart.fb.touch mousedown.fb.touch\", $.proxy(self, \"ontouchstart\")); }; Guestures.prototype.destroy = function () { var self = this; self.$container.off(\".fb.touch\"); $(document).off(\".fb.touch\"); if (self.requestId) { cancelAFrame(self.requestId); self.requestId = null; } if (self.tapped) { clearTimeout(self.tapped); self.tapped = null; } }; Guestures.prototype.ontouchstart = function (e) { var self = this, $target = $(e.target), instance = self.instance, current = instance.current, $slide = current.$slide, $content = current.$content, isTouchDevice = e.type == \"touchstart\"; // Do not respond to both (touch and mouse) events if (isTouchDevice) { self.$container.off(\"mousedown.fb.touch\"); } // Ignore right click if (e.originalEvent && e.originalEvent.button == 2) { return; } // Ignore taping on links, buttons, input elements if (!$slide.length || !$target.length || isClickable($target) || isClickable($target.parent())) { return; } // Ignore clicks on the scrollbar if (!$target.is(\"img\") && e.originalEvent.clientX > $target[0].clientWidth + $target.offset().left) { return; } // Ignore clicks while zooming or closing if (!current || instance.isAnimating || current.$slide.hasClass(\"fancybox-animated\")) { e.stopPropagation(); e.preventDefault(); return; } self.realPoints = self.startPoints = getPointerXY(e); if (!self.startPoints.length) { return; } // Allow other scripts to catch touch event if \"touch\" is set to false if (current.touch) { e.stopPropagation(); } self.startEvent = e; self.canTap = true; self.$target = $target; self.$content = $content; self.opts = current.opts.touch; self.isPanning = false; self.isSwiping = false; self.isZooming = false; self.isScrolling = false; self.canPan = instance.canPan(); self.startTime = new Date().getTime(); self.distanceX = self.distanceY = self.distance = 0; self.canvasWidth = Math.round($slide[0].clientWidth); self.canvasHeight = Math.round($slide[0].clientHeight); self.contentLastPos = null; self.contentStartPos = $.fancybox.getTranslate(self.$content) || { top: 0, left: 0 }; self.sliderStartPos = $.fancybox.getTranslate($slide); // Since position will be absolute, but we need to make it relative to the stage self.stagePos = $.fancybox.getTranslate(instance.$refs.stage); self.sliderStartPos.top -= self.stagePos.top; self.sliderStartPos.left -= self.stagePos.left; self.contentStartPos.top -= self.stagePos.top; self.contentStartPos.left -= self.stagePos.left; $(document) .off(\".fb.touch\") .on(isTouchDevice ? \"touchend.fb.touch touchcancel.fb.touch\" : \"mouseup.fb.touch mouseleave.fb.touch\", $.proxy(self, \"ontouchend\")) .on(isTouchDevice ? \"touchmove.fb.touch\" : \"mousemove.fb.touch\", $.proxy(self, \"ontouchmove\")); if ($.fancybox.isMobile) { document.addEventListener(\"scroll\", self.onscroll, true); } // Skip if clicked outside the sliding area if (!(self.opts || self.canPan) || !($target.is(self.$stage) || self.$stage.find($target).length)) { if ($target.is(\".fancybox-image\")) { e.preventDefault(); } if (!($.fancybox.isMobile && $target.parents(\".fancybox-caption\").length)) { return; } } self.isScrollable = isScrollable($target) || isScrollable($target.parent()); // Check if element is scrollable and try to prevent default behavior (scrolling) if (!($.fancybox.isMobile && self.isScrollable)) { e.preventDefault(); } // One finger or mouse click - swipe or pan an image if (self.startPoints.length === 1 || current.hasError) { if (self.canPan) { $.fancybox.stop(self.$content); self.isPanning = true; } else { self.isSwiping = true; } self.$container.addClass(\"fancybox-is-grabbing\"); } // Two fingers - zoom image if (self.startPoints.length === 2 && current.type === \"image\" && (current.isLoaded || current.$ghost)) { self.canTap = false; self.isSwiping = false; self.isPanning = false; self.isZooming = true; $.fancybox.stop(self.$content); self.centerPointStartX = (self.startPoints[0].x + self.startPoints[1].x) * 0.5 - $(window).scrollLeft(); self.centerPointStartY = (self.startPoints[0].y + self.startPoints[1].y) * 0.5 - $(window).scrollTop(); self.percentageOfImageAtPinchPointX = (self.centerPointStartX - self.contentStartPos.left) / self.contentStartPos.width; self.percentageOfImageAtPinchPointY = (self.centerPointStartY - self.contentStartPos.top) / self.contentStartPos.height; self.startDistanceBetweenFingers = distance(self.startPoints[0], self.startPoints[1]); } }; Guestures.prototype.onscroll = function (e) { var self = this; self.isScrolling = true; document.removeEventListener(\"scroll\", self.onscroll, true); }; Guestures.prototype.ontouchmove = function (e) { var self = this; // Make sure user has not released over iframe or disabled element if (e.originalEvent.buttons !== undefined && e.originalEvent.buttons === 0) { self.ontouchend(e); return; } if (self.isScrolling) { self.canTap = false; return; } self.newPoints = getPointerXY(e); if (!(self.opts || self.canPan) || !self.newPoints.length || !self.newPoints.length) { return; } if (!(self.isSwiping && self.isSwiping === true)) { e.preventDefault(); } self.distanceX = distance(self.newPoints[0], self.startPoints[0], \"x\"); self.distanceY = distance(self.newPoints[0], self.startPoints[0], \"y\"); self.distance = distance(self.newPoints[0], self.startPoints[0]); // Skip false ontouchmove events (Chrome) if (self.distance > 0) { if (self.isSwiping) { self.onSwipe(e); } else if (self.isPanning) { self.onPan(); } else if (self.isZooming) { self.onZoom(); } } }; Guestures.prototype.onSwipe = function (e) { var self = this, instance = self.instance, swiping = self.isSwiping, left = self.sliderStartPos.left || 0, angle; // If direction is not yet determined if (swiping === true) { // We need at least 10px distance to correctly calculate an angle if (Math.abs(self.distance) > 10) { self.canTap = false; if (instance.group.length < 2 && self.opts.vertical) { self.isSwiping = \"y\"; } else if (instance.isDragging || self.opts.vertical === false || (self.opts.vertical === \"auto\" && $(window).width() > 800)) { self.isSwiping = \"x\"; } else { angle = Math.abs((Math.atan2(self.distanceY, self.distanceX) * 180) / Math.PI); self.isSwiping = angle > 45 && angle < 135 ? \"y\" : \"x\"; } if (self.isSwiping === \"y\" && $.fancybox.isMobile && self.isScrollable) { self.isScrolling = true; return; } instance.isDragging = self.isSwiping; // Reset points to avoid jumping, because we dropped first swipes to calculate the angle self.startPoints = self.newPoints; $.each(instance.slides, function (index, slide) { var slidePos, stagePos; $.fancybox.stop(slide.$slide); slidePos = $.fancybox.getTranslate(slide.$slide); stagePos = $.fancybox.getTranslate(instance.$refs.stage); slide.$slide .css({ transform: \"\", opacity: \"\", \"transition-duration\": \"\" }) .removeClass(\"fancybox-animated\") .removeClass(function (index, className) { return (className.match(/(^|\\s)fancybox-fx-\\S+/g) || []).join(\" \"); }); if (slide.pos === instance.current.pos) { self.sliderStartPos.top = slidePos.top - stagePos.top; self.sliderStartPos.left = slidePos.left - stagePos.left; } $.fancybox.setTranslate(slide.$slide, { top: slidePos.top - stagePos.top, left: slidePos.left - stagePos.left }); }); // Stop slideshow if (instance.SlideShow && instance.SlideShow.isActive) { instance.SlideShow.stop(); } } return; } // Sticky edges if (swiping == \"x\") { if ( self.distanceX > 0 && (self.instance.group.length < 2 || (self.instance.current.index === 0 && !self.instance.current.opts.loop)) ) { left = left + Math.pow(self.distanceX, 0.8); } else if ( self.distanceX < 0 && (self.instance.group.length < 2 || (self.instance.current.index === self.instance.group.length - 1 && !self.instance.current.opts.loop)) ) { left = left - Math.pow(-self.distanceX, 0.8); } else { left = left + self.distanceX; } } self.sliderLastPos = { top: swiping == \"x\" ? 0 : self.sliderStartPos.top + self.distanceY, left: left }; if (self.requestId) { cancelAFrame(self.requestId); self.requestId = null; } self.requestId = requestAFrame(function () { if (self.sliderLastPos) { $.each(self.instance.slides, function (index, slide) { var pos = slide.pos - self.instance.currPos; $.fancybox.setTranslate(slide.$slide, { top: self.sliderLastPos.top, left: self.sliderLastPos.left + pos * self.canvasWidth + pos * slide.opts.gutter }); }); self.$container.addClass(\"fancybox-is-sliding\"); } }); }; Guestures.prototype.onPan = function () { var self = this; // Prevent accidental movement (sometimes, when tapping casually, finger can move a bit) if (distance(self.newPoints[0], self.realPoints[0]) < ($.fancybox.isMobile ? 10 : 5)) { self.startPoints = self.newPoints; return; } self.canTap = false; self.contentLastPos = self.limitMovement(); if (self.requestId) { cancelAFrame(self.requestId); } self.requestId = requestAFrame(function () { $.fancybox.setTranslate(self.$content, self.contentLastPos); }); }; // Make panning sticky to the edges Guestures.prototype.limitMovement = function () { var self = this; var canvasWidth = self.canvasWidth; var canvasHeight = self.canvasHeight; var distanceX = self.distanceX; var distanceY = self.distanceY; var contentStartPos = self.contentStartPos; var currentOffsetX = contentStartPos.left; var currentOffsetY = contentStartPos.top; var currentWidth = contentStartPos.width; var currentHeight = contentStartPos.height; var minTranslateX, minTranslateY, maxTranslateX, maxTranslateY, newOffsetX, newOffsetY; if (currentWidth > canvasWidth) { newOffsetX = currentOffsetX + distanceX; } else { newOffsetX = currentOffsetX; } newOffsetY = currentOffsetY + distanceY; // Slow down proportionally to traveled distance minTranslateX = Math.max(0, canvasWidth * 0.5 - currentWidth * 0.5); minTranslateY = Math.max(0, canvasHeight * 0.5 - currentHeight * 0.5); maxTranslateX = Math.min(canvasWidth - currentWidth, canvasWidth * 0.5 - currentWidth * 0.5); maxTranslateY = Math.min(canvasHeight - currentHeight, canvasHeight * 0.5 - currentHeight * 0.5); // -> if (distanceX > 0 && newOffsetX > minTranslateX) { newOffsetX = minTranslateX - 1 + Math.pow(-minTranslateX + currentOffsetX + distanceX, 0.8) || 0; } // minTranslateY) { newOffsetY = minTranslateY - 1 + Math.pow(-minTranslateY + currentOffsetY + distanceY, 0.8) || 0; } // /\\ if (distanceY < 0 && newOffsetY < maxTranslateY) { newOffsetY = maxTranslateY + 1 - Math.pow(maxTranslateY - currentOffsetY - distanceY, 0.8) || 0; } return { top: newOffsetY, left: newOffsetX }; }; Guestures.prototype.limitPosition = function (newOffsetX, newOffsetY, newWidth, newHeight) { var self = this; var canvasWidth = self.canvasWidth; var canvasHeight = self.canvasHeight; if (newWidth > canvasWidth) { newOffsetX = newOffsetX > 0 ? 0 : newOffsetX; newOffsetX = newOffsetX < canvasWidth - newWidth ? canvasWidth - newWidth : newOffsetX; } else { // Center horizontally newOffsetX = Math.max(0, canvasWidth / 2 - newWidth / 2); } if (newHeight > canvasHeight) { newOffsetY = newOffsetY > 0 ? 0 : newOffsetY; newOffsetY = newOffsetY < canvasHeight - newHeight ? canvasHeight - newHeight : newOffsetY; } else { // Center vertically newOffsetY = Math.max(0, canvasHeight / 2 - newHeight / 2); } return { top: newOffsetY, left: newOffsetX }; }; Guestures.prototype.onZoom = function () { var self = this; // Calculate current distance between points to get pinch ratio and new width and height var contentStartPos = self.contentStartPos; var currentWidth = contentStartPos.width; var currentHeight = contentStartPos.height; var currentOffsetX = contentStartPos.left; var currentOffsetY = contentStartPos.top; var endDistanceBetweenFingers = distance(self.newPoints[0], self.newPoints[1]); var pinchRatio = endDistanceBetweenFingers / self.startDistanceBetweenFingers; var newWidth = Math.floor(currentWidth * pinchRatio); var newHeight = Math.floor(currentHeight * pinchRatio); // This is the translation due to pinch-zooming var translateFromZoomingX = (currentWidth - newWidth) * self.percentageOfImageAtPinchPointX; var translateFromZoomingY = (currentHeight - newHeight) * self.percentageOfImageAtPinchPointY; // Point between the two touches var centerPointEndX = (self.newPoints[0].x + self.newPoints[1].x) / 2 - $(window).scrollLeft(); var centerPointEndY = (self.newPoints[0].y + self.newPoints[1].y) / 2 - $(window).scrollTop(); // And this is the translation due to translation of the centerpoint // between the two fingers var translateFromTranslatingX = centerPointEndX - self.centerPointStartX; var translateFromTranslatingY = centerPointEndY - self.centerPointStartY; // The new offset is the old/current one plus the total translation var newOffsetX = currentOffsetX + (translateFromZoomingX + translateFromTranslatingX); var newOffsetY = currentOffsetY + (translateFromZoomingY + translateFromTranslatingY); var newPos = { top: newOffsetY, left: newOffsetX, scaleX: pinchRatio, scaleY: pinchRatio }; self.canTap = false; self.newWidth = newWidth; self.newHeight = newHeight; self.contentLastPos = newPos; if (self.requestId) { cancelAFrame(self.requestId); } self.requestId = requestAFrame(function () { $.fancybox.setTranslate(self.$content, self.contentLastPos); }); }; Guestures.prototype.ontouchend = function (e) { var self = this; var swiping = self.isSwiping; var panning = self.isPanning; var zooming = self.isZooming; var scrolling = self.isScrolling; self.endPoints = getPointerXY(e); self.dMs = Math.max(new Date().getTime() - self.startTime, 1); self.$container.removeClass(\"fancybox-is-grabbing\"); $(document).off(\".fb.touch\"); document.removeEventListener(\"scroll\", self.onscroll, true); if (self.requestId) { cancelAFrame(self.requestId); self.requestId = null; } self.isSwiping = false; self.isPanning = false; self.isZooming = false; self.isScrolling = false; self.instance.isDragging = false; if (self.canTap) { return self.onTap(e); } self.speed = 100; // Speed in px/ms self.velocityX = (self.distanceX / self.dMs) * 0.5; self.velocityY = (self.distanceY / self.dMs) * 0.5; if (panning) { self.endPanning(); } else if (zooming) { self.endZooming(); } else { self.endSwiping(swiping, scrolling); } return; }; Guestures.prototype.endSwiping = function (swiping, scrolling) { var self = this, ret = false, len = self.instance.group.length, distanceX = Math.abs(self.distanceX), canAdvance = swiping == \"x\" && len > 1 && ((self.dMs > 130 && distanceX > 10) || distanceX > 50), speedX = 300; self.sliderLastPos = null; // Close if swiped vertically / navigate if horizontally if (swiping == \"y\" && !scrolling && Math.abs(self.distanceY) > 50) { // Continue vertical movement $.fancybox.animate( self.instance.current.$slide, { top: self.sliderStartPos.top + self.distanceY + self.velocityY * 150, opacity: 0 }, 200 ); ret = self.instance.close(true, 250); } else if (canAdvance && self.distanceX > 0) { ret = self.instance.previous(speedX); } else if (canAdvance && self.distanceX < 0) { ret = self.instance.next(speedX); } if (ret === false && (swiping == \"x\" || swiping == \"y\")) { self.instance.centerSlide(200); } self.$container.removeClass(\"fancybox-is-sliding\"); }; // Limit panning from edges // ======================== Guestures.prototype.endPanning = function () { var self = this, newOffsetX, newOffsetY, newPos; if (!self.contentLastPos) { return; } if (self.opts.momentum === false || self.dMs > 350) { newOffsetX = self.contentLastPos.left; newOffsetY = self.contentLastPos.top; } else { // Continue movement newOffsetX = self.contentLastPos.left + self.velocityX * 500; newOffsetY = self.contentLastPos.top + self.velocityY * 500; } newPos = self.limitPosition(newOffsetX, newOffsetY, self.contentStartPos.width, self.contentStartPos.height); newPos.width = self.contentStartPos.width; newPos.height = self.contentStartPos.height; $.fancybox.animate(self.$content, newPos, 366); }; Guestures.prototype.endZooming = function () { var self = this; var current = self.instance.current; var newOffsetX, newOffsetY, newPos, reset; var newWidth = self.newWidth; var newHeight = self.newHeight; if (!self.contentLastPos) { return; } newOffsetX = self.contentLastPos.left; newOffsetY = self.contentLastPos.top; reset = { top: newOffsetY, left: newOffsetX, width: newWidth, height: newHeight, scaleX: 1, scaleY: 1 }; // Reset scalex/scaleY values; this helps for perfomance and does not break animation $.fancybox.setTranslate(self.$content, reset); if (newWidth < self.canvasWidth && newHeight < self.canvasHeight) { self.instance.scaleToFit(150); } else if (newWidth > current.width || newHeight > current.height) { self.instance.scaleToActual(self.centerPointStartX, self.centerPointStartY, 150); } else { newPos = self.limitPosition(newOffsetX, newOffsetY, newWidth, newHeight); $.fancybox.animate(self.$content, newPos, 150); } }; Guestures.prototype.onTap = function (e) { var self = this; var $target = $(e.target); var instance = self.instance; var current = instance.current; var endPoints = (e && getPointerXY(e)) || self.startPoints; var tapX = endPoints[0] ? endPoints[0].x - $(window).scrollLeft() - self.stagePos.left : 0; var tapY = endPoints[0] ? endPoints[0].y - $(window).scrollTop() - self.stagePos.top : 0; var where; var process = function (prefix) { var action = current.opts[prefix]; if ($.isFunction(action)) { action = action.apply(instance, [current, e]); } if (!action) { return; } switch (action) { case \"close\": instance.close(self.startEvent); break; case \"toggleControls\": instance.toggleControls(); break; case \"next\": instance.next(); break; case \"nextOrClose\": if (instance.group.length > 1) { instance.next(); } else { instance.close(self.startEvent); } break; case \"zoom\": if (current.type == \"image\" && (current.isLoaded || current.$ghost)) { if (instance.canPan()) { instance.scaleToFit(); } else if (instance.isScaledDown()) { instance.scaleToActual(tapX, tapY); } else if (instance.group.length < 2) { instance.close(self.startEvent); } } break; } }; // Ignore right click if (e.originalEvent && e.originalEvent.button == 2) { return; } // Skip if clicked on the scrollbar if (!$target.is(\"img\") && tapX > $target[0].clientWidth + $target.offset().left) { return; } // Check where is clicked if ($target.is(\".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container\")) { where = \"Outside\"; } else if ($target.is(\".fancybox-slide\")) { where = \"Slide\"; } else if ( instance.current.$content && instance.current.$content .find($target) .addBack() .filter($target).length ) { where = \"Content\"; } else { return; } // Check if this is a double tap if (self.tapped) { // Stop previously created single tap clearTimeout(self.tapped); self.tapped = null; // Skip if distance between taps is too big if (Math.abs(tapX - self.tapX) > 50 || Math.abs(tapY - self.tapY) > 50) { return this; } // OK, now we assume that this is a double-tap process(\"dblclick\" + where); } else { // Single tap will be processed if user has not clicked second time within 300ms // or there is no need to wait for double-tap self.tapX = tapX; self.tapY = tapY; if (current.opts[\"dblclick\" + where] && current.opts[\"dblclick\" + where] !== current.opts[\"click\" + where]) { self.tapped = setTimeout(function () { self.tapped = null; if (!instance.isAnimating) { process(\"click\" + where); } }, 500); } else { process(\"click\" + where); } } return this; }; $(document) .on(\"onActivate.fb\", function (e, instance) { if (instance && !instance.Guestures) { instance.Guestures = new Guestures(instance); } }) .on(\"beforeClose.fb\", function (e, instance) { if (instance && instance.Guestures) { instance.Guestures.destroy(); } }); })(window, document, jQuery); // ========================================================================== // // SlideShow // Enables slideshow functionality // // Example of usage: // $.fancybox.getInstance().SlideShow.start() // // ========================================================================== (function (document, $) { \"use strict\"; $.extend(true, $.fancybox.defaults, { btnTpl: { slideShow: '' + '' + '' + \"\" }, slideShow: { autoStart: false, speed: 3000, progress: true } }); var SlideShow = function (instance) { this.instance = instance; this.init(); }; $.extend(SlideShow.prototype, { timer: null, isActive: false, $button: null, init: function () { var self = this, instance = self.instance, opts = instance.group[instance.currIndex].opts.slideShow; self.$button = instance.$refs.toolbar.find(\"[data-fancybox-play]\").on(\"click\", function () { self.toggle(); }); if (instance.group.length < 2 || !opts) { self.$button.hide(); } else if (opts.progress) { self.$progress = $('').appendTo(instance.$refs.inner); } }, set: function (force) { var self = this, instance = self.instance, current = instance.current; // Check if reached last element if (current && (force === true || current.opts.loop || instance.currIndex < instance.group.length - 1)) { if (self.isActive && current.contentType !== \"video\") { if (self.$progress) { $.fancybox.animate(self.$progress.show(), { scaleX: 1 }, current.opts.slideShow.speed); } self.timer = setTimeout(function () { if (!instance.current.opts.loop && instance.current.index == instance.group.length - 1) { instance.jumpTo(0); } else { instance.next(); } }, current.opts.slideShow.speed); } } else { self.stop(); instance.idleSecondsCounter = 0; instance.showControls(); } }, clear: function () { var self = this; clearTimeout(self.timer); self.timer = null; if (self.$progress) { self.$progress.removeAttr(\"style\").hide(); } }, start: function () { var self = this, current = self.instance.current; if (current) { self.$button .attr(\"title\", (current.opts.i18n[current.opts.lang] || current.opts.i18n.en).PLAY_STOP) .removeClass(\"fancybox-button--play\") .addClass(\"fancybox-button--pause\"); self.isActive = true; if (current.isComplete) { self.set(true); } self.instance.trigger(\"onSlideShowChange\", true); } }, stop: function () { var self = this, current = self.instance.current; self.clear(); self.$button .attr(\"title\", (current.opts.i18n[current.opts.lang] || current.opts.i18n.en).PLAY_START) .removeClass(\"fancybox-button--pause\") .addClass(\"fancybox-button--play\"); self.isActive = false; self.instance.trigger(\"onSlideShowChange\", false); if (self.$progress) { self.$progress.removeAttr(\"style\").hide(); } }, toggle: function () { var self = this; if (self.isActive) { self.stop(); } else { self.start(); } } }); $(document).on({ \"onInit.fb\": function (e, instance) { if (instance && !instance.SlideShow) { instance.SlideShow = new SlideShow(instance); } }, \"beforeShow.fb\": function (e, instance, current, firstRun) { var SlideShow = instance && instance.SlideShow; if (firstRun) { if (SlideShow && current.opts.slideShow.autoStart) { SlideShow.start(); } } else if (SlideShow && SlideShow.isActive) { SlideShow.clear(); } }, \"afterShow.fb\": function (e, instance, current) { var SlideShow = instance && instance.SlideShow; if (SlideShow && SlideShow.isActive) { SlideShow.set(); } }, \"afterKeydown.fb\": function (e, instance, current, keypress, keycode) { var SlideShow = instance && instance.SlideShow; // \"P\" or Spacebar if (SlideShow && current.opts.slideShow && (keycode === 80 || keycode === 32) && !$(document.activeElement).is(\"button,a,input\")) { keypress.preventDefault(); SlideShow.toggle(); } }, \"beforeClose.fb onDeactivate.fb\": function (e, instance) { var SlideShow = instance && instance.SlideShow; if (SlideShow) { SlideShow.stop(); } } }); // Page Visibility API to pause slideshow when window is not active $(document).on(\"visibilitychange\", function () { var instance = $.fancybox.getInstance(), SlideShow = instance && instance.SlideShow; if (SlideShow && SlideShow.isActive) { if (document.hidden) { SlideShow.clear(); } else { SlideShow.set(); } } }); })(document, jQuery); // ========================================================================== // // FullScreen // Adds fullscreen functionality // // ========================================================================== (function (document, $) { \"use strict\"; // Collection of methods supported by user browser var fn = (function () { var fnMap = [ [\"requestFullscreen\", \"exitFullscreen\", \"fullscreenElement\", \"fullscreenEnabled\", \"fullscreenchange\", \"fullscreenerror\"], // new WebKit [ \"webkitRequestFullscreen\", \"webkitExitFullscreen\", \"webkitFullscreenElement\", \"webkitFullscreenEnabled\", \"webkitfullscreenchange\", \"webkitfullscreenerror\" ], // old WebKit (Safari 5.1) [ \"webkitRequestFullScreen\", \"webkitCancelFullScreen\", \"webkitCurrentFullScreenElement\", \"webkitCancelFullScreen\", \"webkitfullscreenchange\", \"webkitfullscreenerror\" ], [ \"mozRequestFullScreen\", \"mozCancelFullScreen\", \"mozFullScreenElement\", \"mozFullScreenEnabled\", \"mozfullscreenchange\", \"mozfullscreenerror\" ], [\"msRequestFullscreen\", \"msExitFullscreen\", \"msFullscreenElement\", \"msFullscreenEnabled\", \"MSFullscreenChange\", \"MSFullscreenError\"] ]; var ret = {}; for (var i = 0; i < fnMap.length; i++) { var val = fnMap[i]; if (val && val[1] in document) { for (var j = 0; j < val.length; j++) { ret[fnMap[0][j]] = val[j]; } return ret; } } return false; })(); if (fn) { var FullScreen = { request: function (elem) { elem = elem || document.documentElement; elem[fn.requestFullscreen](elem.ALLOW_KEYBOARD_INPUT); }, exit: function () { document[fn.exitFullscreen](); }, toggle: function (elem) { elem = elem || document.documentElement; if (this.isFullscreen()) { this.exit(); } else { this.request(elem); } }, isFullscreen: function () { return Boolean(document[fn.fullscreenElement]); }, enabled: function () { return Boolean(document[fn.fullscreenEnabled]); } }; $.extend(true, $.fancybox.defaults, { btnTpl: { fullScreen: '' + '' + '' + \"\" }, fullScreen: { autoStart: false } }); $(document).on(fn.fullscreenchange, function () { var isFullscreen = FullScreen.isFullscreen(), instance = $.fancybox.getInstance(); if (instance) { // If image is zooming, then force to stop and reposition properly if (instance.current && instance.current.type === \"image\" && instance.isAnimating) { instance.isAnimating = false; instance.update(true, true, 0); if (!instance.isComplete) { instance.complete(); } } instance.trigger(\"onFullscreenChange\", isFullscreen); instance.$refs.container.toggleClass(\"fancybox-is-fullscreen\", isFullscreen); instance.$refs.toolbar .find(\"[data-fancybox-fullscreen]\") .toggleClass(\"fancybox-button--fsenter\", !isFullscreen) .toggleClass(\"fancybox-button--fsexit\", isFullscreen); } }); } $(document).on({ \"onInit.fb\": function (e, instance) { var $container; if (!fn) { instance.$refs.toolbar.find(\"[data-fancybox-fullscreen]\").remove(); return; } if (instance && instance.group[instance.currIndex].opts.fullScreen) { $container = instance.$refs.container; $container.on(\"click.fb-fullscreen\", \"[data-fancybox-fullscreen]\", function (e) { e.stopPropagation(); e.preventDefault(); FullScreen.toggle(); }); if (instance.opts.fullScreen && instance.opts.fullScreen.autoStart === true) { FullScreen.request(); } // Expose API instance.FullScreen = FullScreen; } else if (instance) { instance.$refs.toolbar.find(\"[data-fancybox-fullscreen]\").hide(); } }, \"afterKeydown.fb\": function (e, instance, current, keypress, keycode) { // \"F\" if (instance && instance.FullScreen && keycode === 70) { keypress.preventDefault(); instance.FullScreen.toggle(); } }, \"beforeClose.fb\": function (e, instance) { if (instance && instance.FullScreen && instance.$refs.container.hasClass(\"fancybox-is-fullscreen\")) { FullScreen.exit(); } } }); })(document, jQuery); // ========================================================================== // // Thumbs // Displays thumbnails in a grid // // ========================================================================== (function (document, $) { \"use strict\"; var CLASS = \"fancybox-thumbs\", CLASS_ACTIVE = CLASS + \"-active\"; // Make sure there are default values $.fancybox.defaults = $.extend( true, { btnTpl: { thumbs: '' + '' + \"\" }, thumbs: { autoStart: false, // Display thumbnails on opening hideOnClose: true, // Hide thumbnail grid when closing animation starts parentEl: \".fancybox-container\", // Container is injected into this element axis: \"y\" // Vertical (y) or horizontal (x) scrolling } }, $.fancybox.defaults ); var FancyThumbs = function (instance) { this.init(instance); }; $.extend(FancyThumbs.prototype, { $button: null, $grid: null, $list: null, isVisible: false, isActive: false, init: function (instance) { var self = this, group = instance.group, enabled = 0; self.instance = instance; self.opts = group[instance.currIndex].opts.thumbs; instance.Thumbs = self; self.$button = instance.$refs.toolbar.find(\"[data-fancybox-thumbs]\"); // Enable thumbs if at least two group items have thumbnails for (var i = 0, len = group.length; i < len; i++) { if (group[i].thumb) { enabled++; } if (enabled > 1) { break; } } if (enabled > 1 && !!self.opts) { self.$button.removeAttr(\"style\").on(\"click\", function () { self.toggle(); }); self.isActive = true; } else { self.$button.hide(); } }, create: function () { var self = this, instance = self.instance, parentEl = self.opts.parentEl, list = [], src; if (!self.$grid) { // Create main element self.$grid = $('').appendTo( instance.$refs.container .find(parentEl) .addBack() .filter(parentEl) ); // Add \"click\" event that performs gallery navigation self.$grid.on(\"click\", \"a\", function () { instance.jumpTo($(this).attr(\"data-index\")); }); } // Build the list if (!self.$list) { self.$list = $('').appendTo(self.$grid); } $.each(instance.group, function (i, item) { src = item.thumb; if (!src && item.type === \"image\") { src = item.src; } list.push( ' 1 && /^\\+?\\d+$/.test(rez[rez.length - 1]) ? parseInt(rez.pop(-1), 10) || 1 : 1, gallery = rez.join(\"-\"); return { hash: hash, /* Index is starting from 1 */ index: index < 1 ? 1 : index, gallery: gallery }; } // Trigger click evnt on links to open new fancyBox instance function triggerFromUrl(url) { if (url.gallery !== \"\") { // If we can find element matching 'data-fancybox' atribute, // then triggering click event should start fancyBox $(\"[data-fancybox='\" + $.escapeSelector(url.gallery) + \"']\") .eq(url.index - 1) .focus() .trigger(\"click.fb-start\"); } } // Get gallery name from current instance function getGalleryID(instance) { var opts, ret; if (!instance) { return false; } opts = instance.current ? instance.current.opts : instance.opts; ret = opts.hash || (opts.$orig ? opts.$orig.data(\"fancybox\") || opts.$orig.data(\"fancybox-trigger\") : \"\"); return ret === \"\" ? false : ret; } // Start when DOM becomes ready $(function () { // Check if user has disabled this module if ($.fancybox.defaults.hash === false) { return; } // Update hash when opening/closing fancyBox $(document).on({ \"onInit.fb\": function (e, instance) { var url, gallery; if (instance.group[instance.currIndex].opts.hash === false) { return; } url = parseUrl(); gallery = getGalleryID(instance); // Make sure gallery start index matches index from hash if (gallery && url.gallery && gallery == url.gallery) { instance.currIndex = url.index - 1; } }, \"beforeShow.fb\": function (e, instance, current, firstRun) { var gallery; if (!current || current.opts.hash === false) { return; } // Check if need to update window hash gallery = getGalleryID(instance); if (!gallery) { return; } // Variable containing last hash value set by fancyBox // It will be used to determine if fancyBox needs to close after hash change is detected instance.currentHash = gallery + (instance.group.length > 1 ? \"-\" + (current.index + 1) : \"\"); // If current hash is the same (this instance most likely is opened by hashchange), then do nothing if (window.location.hash === \"#\" + instance.currentHash) { return; } if (firstRun && !instance.origHash) { instance.origHash = window.location.hash; } if (instance.hashTimer) { clearTimeout(instance.hashTimer); } // Update hash instance.hashTimer = setTimeout(function () { if (\"replaceState\" in window.history) { window.history[firstRun ? \"pushState\" : \"replaceState\"]({}, document.title, window.location.pathname + window.location.search + \"#\" + instance.currentHash ); if (firstRun) { instance.hasCreatedHistory = true; } } else { window.location.hash = instance.currentHash; } instance.hashTimer = null; }, 300); }, \"beforeClose.fb\": function (e, instance, current) { if (!current || current.opts.hash === false) { return; } clearTimeout(instance.hashTimer); // Goto previous history entry if (instance.currentHash && instance.hasCreatedHistory) { window.history.back(); } else if (instance.currentHash) { if (\"replaceState\" in window.history) { window.history.replaceState({}, document.title, window.location.pathname + window.location.search + (instance.origHash || \"\")); } else { window.location.hash = instance.origHash; } } instance.currentHash = null; } }); // Check if need to start/close after url has changed $(window).on(\"hashchange.fb\", function () { var url = parseUrl(), fb = null; // Find last fancyBox instance that has \"hash\" $.each( $(\".fancybox-container\") .get() .reverse(), function (index, value) { var tmp = $(value).data(\"FancyBox\"); if (tmp && tmp.currentHash) { fb = tmp; return false; } } ); if (fb) { // Now, compare hash values if (fb.currentHash !== url.gallery + \"-\" + url.index && !(url.index === 1 && fb.currentHash == url.gallery)) { fb.currentHash = null; fb.close(); } } else if (url.gallery !== \"\") { triggerFromUrl(url); } }); // Check current hash and trigger click event on matching element to start fancyBox, if needed setTimeout(function () { if (!$.fancybox.getInstance()) { triggerFromUrl(parseUrl()); } }, 50); }); })(window, document, jQuery); // ========================================================================== // // Wheel // Basic mouse weheel support for gallery navigation // // ========================================================================== (function (document, $) { \"use strict\"; var prevTime = new Date().getTime(); $(document).on({ \"onInit.fb\": function (e, instance, current) { instance.$refs.stage.on(\"mousewheel DOMMouseScroll wheel MozMousePixelScroll\", function (e) { var current = instance.current, currTime = new Date().getTime(); if (instance.group.length < 2 || current.opts.wheel === false || (current.opts.wheel === \"auto\" && current.type !== \"image\")) { return; } e.preventDefault(); e.stopPropagation(); if (current.$slide.hasClass(\"fancybox-animated\")) { return; } e = e.originalEvent || e; if (currTime - prevTime < 250) { return; } prevTime = currTime; instance[(-e.deltaY || -e.deltaX || e.wheelDelta || -e.detail) < 0 ? \"next\" : \"previous\"](); }); } }); })(document, jQuery);"}],"posts":[{"title":"One Piece","slug":"杂七杂八/One Piece","date":"2020-07-22T03:28:54.328Z","updated":"2020-07-22T03:58:23.021Z","comments":true,"path":"2020/07/22/杂七杂八/One Piece/","link":"","permalink":"http://yoursite.com/2020/07/22/杂七杂八/One Piece/","excerpt":"","text":"转载微博 @niao床高手 的文章 海贼王终极探秘古代兵器D的意志空白的一百年 也有人在B站做了一个视频：BV1LW411J7Tt 消失的一百年历史： ​ 很久很久以前，地球上有海王天王两件古代兵器。 ​ 900年前，月球移民来到地球，落脚在阳树夏娃附近的土地上建立了一个国家（棉津见在鱼人岛附近发现古代遗迹，证明巨大王国原来所在位置在圣地玛丽乔亚附近）。他们有着强大的科技，高度的文明，人民的思想自由生活富裕，很快发展成一个强大的国家。 ​ 当时的地球居民经常发生战乱，不同种族之间的矛盾非常尖锐。很快，这群移民者因为他们的理念和先进科技吸引了一大批仰慕者，很多国家愿意与之结盟，并接受他们的思想文化熏陶，其中包括香多拉人、鱼人族人等（拥有刻着古代文字石碑的国家）。 ​ 该国人民在发展了一百年之后，提出了要创建一个大一统的国家的想法，希望没有国界，世界成为一家，这个国家就叫One Piece。因此，红土大陆的存在变成了这种构想的阻碍。 ​ 为了实现这个目标，乔伊波伊决定研究天王原理发明一种能够在红土大陆打开一个缺口的具有巨大威力的战舰——冥王。然后他告知了鱼人岛的领袖海王波塞冬One Piece的计划，并把研究天王动力来源的成果——玉手箱给了鱼人岛，来证明自己计划的可行性。他们约定让海王类拉着诺亚实现移民，让鱼人与人类在阳光下一起生活。 ​ 为此，许多国家自愿加入这一计划中，这些参与该计划的人被称为**“Destroy”族**，这些人被接受基因改造，只有他们能够使用冥王且同时他们还能和巨大海王类交流。 ​ 因为冥王的发动需要吸收一个人的生命，故不老手术的作用也因此出现。后来这个被做手术的志愿者（可能是伊姆），听过被做了不老手术不仅可以控制冥王，还可以控制天王，便起了贪念。但是天王被该巨大王国所保护，于是贪婪的他决定纠集二十国的国王一起以巨大王国在制造毁灭世界的武器为由，一起将这个国家消灭了，并协商一起拥有天王，建立了一个新的组织，这个组织就是世界政府。 ​ 阿拉巴斯坦也在这二十国之中，他们因被蒙蔽而加入征讨，后来在听到了有关如何处理天王的讨论后得知，之前的征讨完全是一种侵略的恶行。然而此时的联合军势力庞大，甚至利用天王杀死了人鱼公主。对天王的占有欲让联合军主张一致，此时的阿拉巴斯坦孤掌难鸣，只能带着忏悔拒绝入住圣地玛丽乔亚，回到故国。他们帮助乔伊波伊逃脱，并制造了刻有古代文字的石碑，引向伟大航路的终点。希望后世能够有“D族”人背负起这段历史实现One Piece。 ​ 而联合军则成为了后来的天龙人，他们自称造物主（神），称能够驾驭冥王毁掉天王的D族人是恶魔（Devil）。他们利用天王制造天地巨变，镇压不服从的人，将巨大王国沉入海底，同时捕杀名字中含有D的人，将他们送往桥上之国于是名字中含有D的人隐藏了自己的D。这就是我猜想的空白一百年发生的故事。 D族人：Destroy，将红土大陆打开一个缺口，四海归一（One piece，All blue） 三大古代兵器： 天王是一条龙：控制天灾 海王是人鱼公主（白星）：控制海王类 冥王是一艘船：破坏力极强 冥王是月球移民仿照天王建造的，都要消耗寿命来发动。 天龙人应该是有一个通过手术果实获取永生的人控制天王（可能是伊姆），所以才能统治这么久。","categories":[{"name":"杂七杂八","slug":"杂七杂八","permalink":"http://yoursite.com/categories/杂七杂八/"}],"tags":[{"name":"One Piece","slug":"One-Piece","permalink":"http://yoursite.com/tags/One-Piece/"}]},{"title":"PHP+MySql","slug":"学习/Web/PHP+MySql","date":"2020-07-21T02:49:20.000Z","updated":"2020-07-22T03:23:14.327Z","comments":true,"path":"2020/07/21/学习/Web/PHP+MySql/","link":"","permalink":"http://yoursite.com/2020/07/21/学习/Web/PHP+MySql/","excerpt":"","text":"PHP 5 及以上版本建议使用以下方式连接 MySQL : MySQLi extension (“i” 意为 improved) 通常是自带的 PDO (PHP Data Objects) PDO可以应用在12种不同的数据库 以下内容全是关于MySQLi（面向对象）的学习。 MySql 连接 1234567891011121314&lt;?php$servername = \"localhost\";$username = \"username\";$password = \"password\"; // 创建连接$conn = new mysqli($servername, $username, $password); // 检测连接if ($conn-&gt;connect_error) &#123; die(\"连接失败: \" . $conn-&gt;connect_error);&#125; echo \"连接成功\";?&gt; mysqli() 函数用于创建连接 除了三个必要参数，还可以添加 dbname、port、​socket 三个参数 后续可以使用 select_db() 函数切换数据库 die() 函数用于终结php脚本的进行并显示 12// 面向对象$conn-&gt;close(); MySql 操作 创建、删除数据库 123456789101112131415// 在创建连接后，创建一个新的数据库$sql = \"CREATE DATABASE myDB\";if ($conn-&gt;query($sql) === TRUE) &#123; echo \"数据库创建成功\";&#125; else &#123; echo \"数据库创建失败：\" . $conn-&gt;error;&#125;//删除所创建的数据库$sql = \"DROP DATABASE myDB\";if ($conn-&gt;query($sql) === TRUE) &#123; echo \"数据库删除成功\";&#125; else &#123; echo \"数据库删除失败：\" . $conn-&gt;error;&#125; 创建数据表 SQL数据类型 列属性： NOT NULL - 每一行都必须含有值（不能为空），null 值是不允许的。 DEFAULT value - 设置默认值 UNSIGNED - 使用无符号数值类型，0 及正数 AUTO INCREMENT - 设置 MySQL 字段的值在新增记录时每次自动增长 1 PRIMARY KEY - 设置数据表中每条记录的唯一标识。 通常列的 PRIMARY KEY 设置为 ID 数值，与 AUTO_INCREMENT 一起使用。 123456789101112$sql = \"CREATE TABLE MyGuests ( id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, pwd CHAR(50) NOT NULL, nickname varchar(50) NOT NULL, reg_date TIMESTAMP)\";if ($conn-&gt;query($sql) === TRUE) &#123; echo \"Table MyGuests created successfully\";&#125; else &#123; echo \"创建数据表错误: \" . $conn-&gt;error;&#125; 数据表操纵 插入数据 由于 id 是自动增长的，reg_date 是时间戳，因此不需要指定值，MySQL会自动添加的 123456$sql = \"INSERT INTO MyGuests (pwd, nickname) VALUES ('123', 'Eason')\";if ($conn-&gt;query($sql) === TRUE) &#123; echo \"新记录插入成功\";&#125; else &#123; echo \"Error: \" . $sql . \"&lt;br&gt;\" . $conn-&gt;error;&#125; 使用**分号(😉**将插入语句隔开，可以插入多条数据。 预处理语句 mysqli 扩展提供了第二种方式用于插入语句，我们可以预处理语句及绑定参数。工作原理如下： 预处理：创建 SQL 语句模板并发送到数据库。预留的值使用参数 “?” 标记 1INSERT INTO MyGuests (pwd, nickname) VALUES (?, ?) 数据库解析，编译，对 SQL 语句模板执行查询优化，并存储结果不输出 执行：最后，将应用绑定的值传递给参数（&quot;?&quot; 标记），数据库执行语句。应用可以多次执行语句，如果参数的值不一样。 预处理语句的优点： 预处理语句大大减少了分析时间，只做了一次查询（虽然语句多次执行）。 绑定参数减少了服务器带宽，你只需要发送查询的参数，而不是整个语句。 预处理语句针对SQL注入是非常有用的，因为参数值发送后使用不同的协议，保证了数据的合法性。 面向对象的实例： 12345678910// 预处理及绑定$stmt = $conn-&gt;prepare(\"INSERT INTO MyGuests (pwd, nickname) VALUES (?, ?)\");$stmt-&gt;bind_param(\"ss\",$pwd,$nickname);// 设置参数并执行$pwd = \"123\";$nickname = \"Eason\";$stmt-&gt;execute();$stmt-&gt;close(); “?” 可以替换为整型、字符串、双精度浮点型和布尔值 $stmt-&gt;bind_param(&quot;ss&quot;,$pwd,$nickname) 的第一个参数就是各个 “?” 对应的数据类型 i - integer（整型） d - double（双精度浮点型） s - string（字符串） b - BLOB（binary large object:二进制大对象） 查询 使用 select 语句来从数据表中读取数据。 123456789$sql = \"select * from MyGuests\";$result = $conn-&gt;query($sql);if ($result-&gt;num_rows &gt; 0) &#123; while ($row = $result-&gt;fetch_assoc())&#123; echo \"id: \" . $row[\"id\"] . \"- Nickname: \" . $row[\"nickname\"] . \"&lt;br&gt;\"; &#125;&#125; else &#123; echo \"0 结果\";&#125; num_rows() 返回查询结果的行数 fetch_assoc() 将当前行的数据作为数组返回，并跳到下一行 对查询语句预处理： 123456789101112131415161718192021222324252627// 预处理并绑定参数$stmt = $conn-&gt;prepare(\"select * from MyGuests where nickname=?\");$stmt-&gt;bind_param(\"s\",$nickname);$nickname = \"Eason\";$stmt-&gt;execute();// 下面有两种方式// 直接对 $stmt 操作，使用 bind_result() 来绑定全部参数，然后 fetch() 切换至下一行$stmt-&gt;bind_result($id,$pwd,$nickname,$reg_date);while ($stmt-&gt;fetch())&#123; echo $id . \" \" . $nickname;&#125;// 使用 get_result() 来获取 mysqli_result$result = $stmt-&gt; get_result();if ($result-&gt;num_rows &gt; 0) &#123; while ($row = $result-&gt;fetch_assoc())&#123; echo \"id: \" . $row[\"id\"] . \"- Nickname: \" . $row[\"nickname\"] . \"&lt;br&gt;\"; &#125;&#125; else &#123; echo \"0 结果\";&#125;// 释放查询结果并关闭预处理语句$stmt-&gt;free_result();$stmt-&gt;close(); 更新 使用 update 语句来更新 123// 更改Eason的密码$sql = \"update MyGuests set pwd = '321' where nickname = 'Eason'\";$conn-&gt;query($sql); 删除 DELETE FROM 语句用于从数据库表中删除行。","categories":[{"name":"Web","slug":"Web","permalink":"http://yoursite.com/categories/Web/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://yoursite.com/tags/PHP/"},{"name":"MySql","slug":"MySql","permalink":"http://yoursite.com/tags/MySql/"}]},{"title":"PHP表单","slug":"学习/Web/PHP表单","date":"2020-07-20T11:11:33.000Z","updated":"2020-07-21T03:07:59.799Z","comments":true,"path":"2020/07/20/学习/Web/PHP表单/","link":"","permalink":"http://yoursite.com/2020/07/20/学习/Web/PHP表单/","excerpt":"","text":"PHP 超级全局变量 $_GET 和 $_POST 用于收集表单数据（form-data）。$_REQUEST 同时支持 post 和 get 但是速度较慢。 当处理 HTML 表单时，PHP 能把来自 HTML 页面中的表单元素自动变成可供 PHP 脚本使用。 对于HTML的表单，参照本博客的另一篇文章：HTML标签。 使用 isset() 函数来判断 $_GET 和 $_POST 中的项是否被设置，使用 empty() 函数来判断是否有输入 前者有定义就为true，后者值不为空才为true htmlspecialchars() 函数把预定义的字符转换为 HTML 实体。 在 PHP 的表单中的 action，使用 action=&quot;&lt;?php echo htmlspecialchars($_SERVER[&quot;PHP_SELF&quot;]);?&gt;&quot; 来防止 $_SERVER[&quot;PHP_SELF&quot;] 被利用 当用户提交表单时，做一下两件事情： 使用 PHP trim() 函数去除用户输入数据中不必要的字符 (如：空格，tab，换行)。 使用PHP stripslashes()函数去除用户输入数据中的反斜杠 () 通常将这些过滤的函数写在一个自己定义的函数，提高代码复用性： 123456function test_input($data)&#123; $data = trim($data); $data = stripslashes($data); $data = htmlspecialchars($data); return $data;&#125; $_GET 预定义的 $_GET 变量用于收集来自 method=“get” 的表单中的值。 从带有 GET 方法的表单发送的信息，对任何人都是可见的（会显示在浏览器的地址栏），并且对发送信息的量也有限制。 HTTP GET 方法不适合大型的变量值。它的值是不能超过 2000 个字符的。 $_POST 预定义的 $_POST 变量用于收集来自 method=“post” 的表单中的值。 从带有 POST 方法的表单发送的信息，对任何人都是不可见的（不会显示在浏览器的地址栏），并且对发送信息的量也没有限制。 默认情况下，POST 方法的发送信息的量最大值为 8 MB（可通过设置 php.ini 文件中的 post_max_size 进行更改）。 $_REQUEST 预定义的 $_REQUEST 变量包含了 ​$_GET、​$_POST 和 $_COOKIE 的内容。 $_REQUEST 变量可用来收集通过 GET 和 POST 方法发送的表单数据。 但是，速度较慢","categories":[{"name":"Web","slug":"Web","permalink":"http://yoursite.com/categories/Web/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://yoursite.com/tags/PHP/"}]},{"title":"PHP语法","slug":"学习/Web/PHP语法","date":"2020-07-18T06:39:33.000Z","updated":"2020-07-21T03:04:02.572Z","comments":true,"path":"2020/07/18/学习/Web/PHP语法/","link":"","permalink":"http://yoursite.com/2020/07/18/学习/Web/PHP语法/","excerpt":"","text":"PHP的全称是PHP: Hypertext Preprocessor，递归定义。 PHP 是服务器端脚本语言，是一门弱类型语言。 PHP 脚本在服务器上执行，然后将纯 HTML 结果发送回浏览器。 基本语法 PHP 脚本可以放在文档中的任何位置。 PHP 脚本以 结束： 123&lt;?php// PHP 代码?&gt; echo 和 print 都可以在浏览器输出文本。 注释 // 、 /* */、# 变量规则 变量以 $ 符号开始，后面跟着变量的名称 变量名必须以字母或者下划线字符开始 变量名只能包含字母数字字符以及下划线（A-z、0-9 和 _ ） 变量名不能包含空格 变量名是区分大小写的（$y 和 $Y 是两个不同的变量） PHP 没有声明变量的命令，和Python一样。 作用域：local、global、static、parameter 函数外部定义的变量拥有全局作用域，要在一个函数中访问一个全局变量，需要使用 global 关键字。 PHP 将所有全局变量存储在一个名为 $GLOBALS[index] 的数组中 在 PHP 函数内部声明的变量是局部变量，仅能在函数内部访问。 echo 和 print echo - 可以输出一个或多个字符串 print - 只允许输出一个字符串，返回值总为 1 echo 输出的速度比 print 快， echo 没有返回值，print有返回值1。 EOF(heredoc) 必须后接分号，否则编译通不过。 EOF 可以用任意其它字符代替，只需保证结束标识与开始标识一致。 结束标识必须顶格独自占一行(即必须从行首开始，前后不能衔接任何空白和字符) 开始标识可以不带引号或带单双引号，不带引号与带双引号效果一致，解释内嵌的变量和转义符号，带单引号则不解释内嵌的变量和转义符号。 当内容需要内嵌引号（单引号或双引号）时，不需要加转义符，本身对单双引号转义，此处相当与q和qq的用法。 数据类型 String、Integer、Float、Boolean、Array、Object、NULL var_dump() 函数返回变量的数据类型和值，自带输出功能 array() 函数创建数组 class 关键字声明类对象 类型比较 松散比较：使用两个等号 == 比较，只比较值，不比较类型。 严格比较：用三个等号 === 比较，除了比较值，也比较类型。 0、false、null松散比较相等，但是严格比较不相等 常量 常量是一个简单值的标识符。该值在脚本中不能改变。 常量名不需要加 $ 修饰符，如果使用时加了就是一个新的变量了 常量在整个脚本中都可以使用，即常量是全局的 使用 define() 函数设置常量，不能在函数中定义 bool define ( string $name , mixed $value [, bool $case_insensitive = false ] ) **name：**必选参数，常量名称，即标志符。 **value：**必选参数，常量的值。 case_insensitive ：可选参数，如果设置为 TRUE，该常量则大小写不敏感。默认是大小写敏感的。 const也可以定义常量，但是只能是静态常量 字符串 单引号或者双引号都可以用于定义字符串。 并置运算符 (.) 用于把两个字符串值连接起来。 strlen() 函数返回字符串的长度（字节数）。 strpos() 函数用于在字符串内查找一个字符或一段指定的文本。 运算符 算符运算符：+、-、*、/、%、-、. 赋值运算符：=、+=、-=、*=、/=、%=、.= 自增自减：++、– 比较运算符：==、===、!=、&lt;&gt;、!==、&gt;、&lt;、&gt;=、&lt;= 逻辑运算符：and、or、xor、&amp;&amp;、||、! 数组运算符：+、==、===、!=、&lt;&gt;、!== 三元运算符：?: 组合运算符：&lt;=&gt; 条件与循环 条件语句 if、if-else、if-elseif-else switch 循环语句 while、do-while for、foreach 12for (初始值; 条件; 增量)&#123;&#125;foreach ($array as $value)&#123;&#125; 数组 数组是一个能在单个变量中存储多个值的特殊变量。 PHP中有三种类型的数组： 数值数组：带有数值ID键的数组，类似于Python的元组 关联数组：带有指定的键的数组，类似于Python中的字典 使用=&gt;来关联键值对，如&quot;Eason&quot; =&gt; “Kailey” 多维数组：包含一个或多个数组的数组 count() 函数用于返回数组的长度（元素的数量） print_r() 函数可以打印出数组 用 for、foreach 遍历数组 在关联数组中，foreach应该这样写 foreach($arr as $x=&gt;$x_value){} 数组排序 sort() - 对数组进行升序排列 rsort() - 对数组进行降序排列 asort() - 根据关联数组的值，对数组进行升序排列 ksort() - 根据关联数组的键，对数组进行升序排列 arsort() - 根据关联数组的值，对数组进行降序排列 krsort() - 根据关联数组的键，对数组进行降序排列 超级全局变量 PHP中预定了几个超级全局变量(superglobals)，这意味着它们在一个脚本的全部作用域中都可用。 PHP中的所有的超级全局变量：$GLOBALS、$_SERVER、$_REQUEST、$_POST、$_GET、$_FILES、$_ENV、$_COOKIE、$_SESSION $GLOBALS $GLOBALS 是PHP的一个超级全局变量组，包含了全部变量，变量的名字就是数组的键。 $_SERVER $_SERVER 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。 $_REQUEST $_REQUEST 用于收集HTML表单提交的数据，包含了$_POST、$_GET、$_COOKIE，速度较慢 $_POST $_POST 被广泛应用于收集表单数据，在HTML form标签的指定该属性：&quot;method=“post”。 $_GET $_GET 同样被广泛应用于收集表单数据，在HTML form标签的指定该属性：&quot;method=“get”。 函数 PHP 提供了超过 1000 个内建的函数。 创建PHP函数 12345&lt;?phpfunction functionName($arg)&#123; // 要执行的代码&#125;?&gt; PHP函数准则： 函数的名称应该提示出它的功能 函数名称以字母或下划线开头（不能以数字开头） 参数名依旧以**$**开头 使用return来返回 函数的名称和关键词大小写都不敏感。 魔术常量 PHP有八个魔术变量，它们的值随着它们在代码中的位置改变而改变。 __LINE__ 文件中的当前行号。 __FILE__ 文件的完整路径和文件名（绝对路径）。如果用在被包含文件中，则返回被包含的文件名。 __DIR__ 文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。 __FUNCTION 函数名称。PHP 5 起本常量返回该函数被定义时的名字（区分大小写）。 __CLASS__ 类的名称。PHP 5 起本常量返回该类被定义时的名字（区分大小写）。对 trait 也起作用。 __TRAIT__ Trait 的名字。自 PHP 5.4.0 起，PHP 实现了代码复用的一个方法，称为 traits。 __METHOD__ 类的方法名（PHP 5.0.0 新加）。返回该方法被定义时的名字（区分大小写）。 __NAMESPACE__ 当前命名空间的名称（区分大小写）。此常量是在编译时定义的（PHP 5.3.0 新增）。 命名空间 PHP 命名空间可以解决以下两类问题： 用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。 为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性。 定义命名空间 默认情况下，所有常量、类和函数名都放在全局空间下，就和PHP支持命名空间之前一样。 命名空间通过关键字 namespace 来声明。如果一个文件中包含命名空间，它必须在其它所有代码之前声明命名空间。语法格式如下； 123456&lt;?php // 定义代码在 'MyProject' 命名空间中 namespace MyProject; // ... 代码 ... ?&gt; 将全局的非命名空间中的代码与命名空间中的代码组合在一起，只能使用大括号形式的语法。全局代码必须用一个不带名称的 namespace 语句加上大括号括起来. 命名空间必须是程序脚本的第一条语句. 子命名空间 与目录和文件的关系很像，PHP 命名空间也允许指定层次化的命名空间的名称。因此，命名空间的名字可以使用分层次的方式定义： 123&lt;?phpnamespace MyProject\\Sub\\Level;?&gt; 命名空间使用 PHP 命名空间中的类名可以通过三种方式引用： 非限定名称，或不包含前缀的类名称 限定名称,或包含前缀的名称 完全限定名称，或包含了全局前缀操作符的名称 使用命名空间：别名/导入 使用use操作符导入/使用别名 use语句导入多个命名空间 导入和动态名称 导入和完全限定名称 面向对象 类定义 1234567891011&lt;?phpclass phpClass &#123; var $var1; var $var2 = \"constant string\"; function myfunc($arg1, $arg2)&#123; [..] &#125; [..]&#125;?&gt; 类使用 class 关键字后加上类名定义。 类名后的一对大括号({})内可以定义变量和方法。 类的变量使用 var 来声明, 变量也可以初始化值。 函数定义类似 PHP 函数的定义，但函数只能通过该类及其实例化的对象访问。 类中有一个变量 $this 代表自身的对象。 此外还有 self、parent、static 关键字 self:: 访问本类中的静态成员 static:: 访问调用类中的静态成员 parent:: 访问父类中的静态成员和调用父类的函数 PHP_EOL 为换行符，但是在浏览器中并不能显示，只对文本文件有效。 创建对象 使用 new 运算符来实例化该类的对象。 使用 -&gt; 运算符来访问成员方法与成员变量。 访问成员变量时，变量名无需加 $ 构造、析构 1234// 构造函数定义void __construct ([ mixed $args [, $... ]] ) &#123;&#125;// 析构函数void __destruct ( void ) &#123;&#125; 继承 使用关键字 extends 来继承一个类，PHP 不支持多继承 123class Child extends Parent&#123; // 代码部分&#125; 方法重写 如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。 访问权控制 PHP 对属性或方法的访问控制，是通过在前面添加关键字 public（公有），protected（受保护）或 private（私有）来实现的。 **public（公有）：**公有的类成员可以在任何地方被访问。 **protected（受保护）：**受保护的类成员则可以被其自身以及其子类和父类访问。 **private（私有）：**私有的类成员则只能被其定义所在的类访问。 如果用 var 定义，则被视为 public 方法的访问控制 类中的方法可以被定义为公有，私有或受保护。如果没有设置这些关键字，则该方法默认为公有。 接口 接口是通过 interface 关键字来定义的，就像定义一个标准的类一样，但其中定义所有的方法都是空的且public。 要实现一个接口，使用 implements 操作符。类中必须实现接口中定义的所有方法，否则会报一个致命错误。类可以实现多个接口，用逗号来分隔多个接口的名称。 常量 使用 const 关键词在类中定义常量，无需使用 $ 符号。 常量的值必须是一个定值，不能是变量，类属性，数学运算的结果或函数调用。 在类中使用 self::变量名 来访问常量 抽象类 任何一个类，如果它里面至少有一个方法是被声明为抽象的，那么这个类就必须被声明为抽象类。 抽象类不能实例化。 继承一个抽象类的时候，子类必须定义父类中的所有抽象方法；另外，这些方法的访问控制必须和父类中一样（或者更为宽松） 此外，子类方法可以包含父类抽象方法中不存在的可选参数。 Static 关键字 声明类属性或方法为 static(静态)，就可以不实例化类而直接访问。 静态属性不能通过一个类已实例化的对象来访问（但静态方法可以）。 由于静态方法不需要通过对象即可调用，所以伪变量 $this 在静态方法中不可用。 静态属性不可以由对象通过 -&gt; 操作符来访问。 使用 self:: 或者 static:: 都可以访问。 Final 关键字 如果父类中的方法被声明为 final，则子类无法覆盖该方法。如果一个类被声明为 final，则不能被继承。 调用父类构造函数 PHP 不会在子类的构造方法中自动的调用父类的构造方法。要执行父类的构造方法，需要在子类的构造方法中调用 parent::__construct() 。","categories":[{"name":"Web","slug":"Web","permalink":"http://yoursite.com/categories/Web/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://yoursite.com/tags/PHP/"}]},{"title":"HTML标签","slug":"学习/Web/HTML标签","date":"2020-07-15T12:44:46.000Z","updated":"2020-07-20T08:41:17.329Z","comments":true,"path":"2020/07/15/学习/Web/HTML标签/","link":"","permalink":"http://yoursite.com/2020/07/15/学习/Web/HTML标签/","excerpt":"","text":"&lt;!DOCTYPE html&gt; 是一个声明，表示该文档是由 HTML5 进行编写的。 &lt;meta&gt;：描述页面内容，关键词，作者，最新修订时间以及其它元信息。 永远位于head元素内部，元数据总是以名称/值的形式被成对传递。 解决编码问题，将编码设置为UTF-8 1&lt;meta charset=\"UTF-8\"&gt; 实现网页尺寸“自适应” 1&lt;meta name=\"viewpoint\" content=\"width=device-width, initial-scale=1.0\"&gt; 搜索引擎优化：描述网页内容，定义网页关键词、网页作者 123&lt;meta name=\"keywords\" content=\"网页关键词\"&gt;&lt;meta name=\"description\" content=\"描述网页的内容\"&gt;&lt;meta name=\"author\" content=\"网页作者\"&gt; 网页自动刷新，可以用于重定向 1&lt;meta http-equiv=\"refresh\" content=\"3;http://39.107.228.148/\"&gt; &lt;sytle&gt;：为HTML文档定义样式信息。 style元素可以出现在HTML文档的各个部分，一个文档可以包含多个style元素。 style的属性有： media：指定样式适用的媒体 可以使用逻辑运算符 scoped：指定样式的作用范围，只有Firefox支持 type：指定样式的类型，目前的值只总是text/css &lt;link&gt; ：指定外部资源，最常用的是链接样式表、链接网站图标 link元素定义了6个属性： 属性 值 描述 href URL 指定被链接资源的URL。 hreflang language_code 指定被链接资源使用的语言。 sizes Height x Width 指定图标的大小（比如sizes=&quot;16x16&quot;） media media_query 指定被链接的资源将被显示到什么设备上。 rel alternate、author、help、icon、licence、next、pingback、prefetch、prev、search、sidebar、stylesheet、tag 指定当前文档与被链接资源之间的关系。 type MIME_type 规定被链接文档的 MIME 类型。 其中rel属性必选，它说明了当前文档与被链接资源之间的关系 &lt;base&gt; ：设置相对 URL 的解析基准。 必须位于&lt;head&gt;标签内部，并尽量靠前，以便随后的元素中的相对URL可以用上其设置的基准URL 定义了两个属性： href：指定该 HTML 文档中所有相对链接的基准 URL target：指定在何处打开超链接 _blank：在新窗口中打开 _parent：在当前的父窗口中打开，如果不存在父窗口，此选项的行为方式与 _self 等同 _self：当前窗口打开（默认） _top：在整个窗口中打开 framename：在指定的框架中打开 &lt;script&gt; ：在 HTML 文档中加入脚本（例如 JavaScript）。 script 元素既可以直接定义内嵌脚本语句，也可以通过 src 属性引用外部脚本文件。 属性 值 描述 type media_type 指定所定义或引用的脚本类型（如果使用 JavaScript 脚本，这个属性可以忽略）。 async async 告诉浏览器异步执行脚本。注意：该属性只能用于引用外部脚本文件，对内嵌脚本不起作用。 charset charset 指定外部脚本文件中使用的字符编码。注意：该属性只能与 src 属性一起使用。 defer defer 告诉浏览器延迟执行脚本（直到页面载入并解析完毕后再执行脚本）。注意：该属性只能用于引用外部脚本文件，对内嵌脚本不起作用。 src URL 指定外部脚本文件的 URL。 &lt;noscript&gt; 标签：向不支持 JavaScript 的浏览器显示一些替代内容。 &lt;!--...--&gt; ：在源文档中插入注释。注释不会在浏览器中显示。 CSS的注释：/* */，在Style标签中也用这种注释方法 JavaScript的注释：与C语言一致，//和/* */ &lt;span&gt; ：组合文档中的行内元素。 &lt;pre&gt; ：定义预格式化的文本。 保留空格和换行符，文本自身也会呈现为等宽实体 HTML中有预留字符，须替换成字符实体才能正常显示 &lt;code&gt; ：定义计算机代码片段。 要显示多行代码时，使用&lt;pre&gt;中嵌套&lt;code&gt; &lt;var&gt; ：定义程序的变量。 &lt;kbd&gt; ：定义键盘输入文本。 &lt;samp&gt; ：定义计算机程序的输出。 引用大作战： &lt;q&gt; ：定义较短的引用。 浏览器通常会在引用内容的两侧添加引号。 &lt;blockquote&gt; 标签：定义块引用。 使用缩进表示引用 &lt;cite&gt; ：定义作品（比如书籍、歌曲、电影、电视节目、绘画、雕塑等）的标题。 &lt;abbr&gt; ：定义简称或缩写，比如 “WWW” 或 “NATO”。 通过对缩写进行标记，能够为浏览器、拼写检查和搜索引擎提供有用的信息。 &lt;dfn&gt; ：表现定义中的术语。 &lt;address&gt; ：定义文档或文章的作者/拥有者的联系信息。 在&lt;body&gt;标签内则表示文档的联系信息；在&lt;article&gt;标签内则表示文章的联系信息 &lt;ruby&gt; ：定义注音符号。与rt、rp元素配合 rt 元素用来标记注音符号 rp 元素则用来标记当浏览器不支持 ruby 元素时所显示的内容。 bdo ：修改默认的文本方向。 属性dir：ltr（left to right）；rtl（right to left） 格式化大比拼： &lt;strong&gt; ：定义表示重要的文本。 一般是粗体，语义表示重要 &lt;b&gt; ：定义表示粗体的文本。 只表示粗体，没有语义 &lt;em&gt; ：定义表示强调的文本。 &lt;i&gt; ：定义表示斜体的文本。 HTML5规范推荐使用 css 样式来实现粗体、斜体 &lt;del&gt;：定义文已被删除的文本。 &lt;ins&gt; ：定义新插入的文本。 &lt;s&gt;：定义那些不正确的文本 &lt;u&gt;：定义与常规文本风格不同的文本。 &lt;mark&gt; ：定义带有标记的文本。 &lt;sub&gt; ：定义下标文本。 &lt;sup&gt; ：定义上标文本。 &lt;small&gt; ：定义更小字体的文本（比如旁注）。 列表 &lt;li&gt; 标签用于定义列表中的项目。 &lt;ol&gt; 标签用于定义有序列表。 属性：reversed（降序）、start（起始值）、type（编号类型：1、A、a、I、i） &lt;ul&gt; 标签用于定义无序列表。 两个常用的CSS属性：list-style-type，list-style-image 定义列表 &lt;dl&gt; 标签定义了一个包含术语定义以及描述的列表。 &lt;dt&gt; 标签用于定义列表中的项目（即术语部分）。 &lt;dd&gt; 标签用于定义列表中项目的描述部分。 表格 &lt;table&gt; 标签用于定义 HTML 表格。 简单的表格由table元素以及一个或多个&lt;tr&gt;、&lt;th&gt; 或 &lt;td&gt; tr(row) 元素定义表格中的行，th(header) 元素定义表格中的表头，td(data) 元素定义表格中的单元格。 &lt;th&gt;、&lt;td&gt; 都有 colspan、rowspan来设置跨列、跨行 使用css来设置表格的样式：border、border-collapse、padding…… &lt;caption&gt; 元素定义表格标题。 必须紧随&lt;table&gt; 标签之后，一个表格只有一个标题 &lt;thead&gt; 标签定义表格的表头。 应该与&lt;tfoot&gt;和 &lt;tbody&gt; 元素结合起来使用 &lt;colgroup&gt; ：对表格中的列进行组合，以便对其进行格式化。 只能在&lt;table&gt; 元素中使用 表单 &lt;form&gt; ：为用户输入创建 HTML 表单。用于向服务器传输数据。 设置 enctype=“multipart/form-data” 来上传文件 &lt;input&gt; ：搜集用户信息。 可以是文本字段、复选框、掩码后的文本控件、单选按钮、按钮等等 autocomplete 属性来设置自动填充 method 属性设置发送 form-data 的 HTTP 方法：get或post disabled 和 readonly，两者都使用户不能输入，但是后者会提交 可以利用 hidden 类型，name=“MAX_FILE_SIZE” 来限制上传文件的大小 &lt;button&gt;：定义一个按钮。 始终要设置 type(button、reset、submit) 属性，因为不同的浏览器可能有不同的默认值 input 元素也可以设置成按钮的样式 &lt;label&gt;：为 input 元素定义标注（标记）。 为鼠标用户改进了可用性 &lt;label&gt; 标签的 for 属性应当与相关元素的 id 属性相同 &lt;fieldset&gt; ：将表单内容的一部分打包，生成一组相关表单的字段。 &lt;legend&gt; ：标签用于为 fieldset 元素定义说明文字。 必须是 fieldset 元素的第一个子元素 &lt;select&gt; ：创建单选或多选菜单。 &lt;option&gt; ：定义下拉列表中的一个选项。 &lt;option&gt; 标签中的内容作为 &lt;select&gt; 标签的菜单或是滚动列表中的一个元素显示 &lt;optgroup&gt; ：为下拉列表的选项进行分组。 &lt;datalist&gt; ：规定了 &lt;input&gt; 标签可能的选项列表。 使用 &lt;input&gt; 标签的 list 属性来绑定 &lt;datalist&gt; 标签的ID值 使用&lt;option&gt; 来定义选项 &lt;output&gt; ：将计算结果输出显示（比如执行脚本的输出）。 需要设置 &lt;form&gt; 的 oninput 属性 &lt;textarea&gt; ：定义多行的文本输入控件。 wrap属性设置hard、soft，设置为hard时要设置cols属性 语义化结构 语义化的优点：HTML结构清晰、代码可读性好、无障碍阅读、便于维护开发…… 每个HTML元素其实都是一个方框的形式呈现的。 &lt;div&gt; ： HTML 文档中的一个分隔区块或者一个区域部分。 div 是一个块级的无语义元素，经常与 CSS 一起使用 HTML5 新添加了许多语义化元素：article、aside、data、details…… 图片 &lt;img&gt; ：用于向网页中嵌入一幅图像。 &lt;img&gt; 标签有两个必需的属性：src 属性（图片的URL） 和 alt 属性（图片的替代文本）。 &lt;map&gt; ：一个客户端图像映射。图像映射（image-map）指带有可点击区域的一幅图像。 &lt;area&gt; ：图像映射中的区域（注：图像映射指得是带有可点击区域的图像）。 area 元素总是嵌套在 &lt;map&gt; 标签中。 &lt;picture&gt; ：为其内部特定的 img 元素提供多样的 source 元素。 &lt;figure&gt; ：规定独立的流内容（图像、图表、照片、代码等等）。 &lt;figcaption&gt; ：为 figure 元素定义标题。 多媒体 &lt;video&gt; ：视频，比如电影片段或其他视频流。 属性：src（URL）、width（宽度）、height（高度）、autoplay（自动播放）、controls（显示控制控件）、loop（循环播放）、muted（静音）、poster（视频加载时显示的图像）、preload（是否预加载） 目前支持三种视频格式：MP4、WebM、Ogg &lt;audio&gt; ：声音，比如音乐或其他音频流。 比&lt;video&gt;标签少了三个属性：width、height、poster 目前支持三种音频格式：MP3、Wav、Ogg &lt;track&gt; ：为 HTML5 的媒体文件添加字幕。 字幕格式WebVTT，后缀为 .vtt &lt;source&gt; ：为 picture , audio 或者 video 元素指定多个媒体资源。 就是为不同的设备提供不同的媒体资源 参考资料： 鱼C-速查宝典 input元素总结 正则表达式大全","categories":[{"name":"Web","slug":"Web","permalink":"http://yoursite.com/categories/Web/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/tags/HTML/"}]},{"title":"HTML基础","slug":"学习/Web/HTML基础","date":"2020-07-11T14:39:31.000Z","updated":"2020-07-15T13:06:08.945Z","comments":true,"path":"2020/07/11/学习/Web/HTML基础/","link":"","permalink":"http://yoursite.com/2020/07/11/学习/Web/HTML基础/","excerpt":"","text":"基本的HTML标签 HTML标题：通过 &lt;h1&gt; - &lt;h6&gt; 等标签进行定义的。 HTML段落：通过 &lt;p&gt; 标签进行定义的。 HTML链接：通过 &lt;a&gt; 标签进行定义的。 href属性中指定链接的地址 HTML图像：&lt;img&gt;标签 自闭元素，不需要结束标记 HTML空格：包括换行，HTML解释器会将连续出现的空格字符减少为一个单独的空格符 HTML强调：&lt;em&gt;（默认斜体）或&lt;strong&gt;（默认粗体） HTML元素：指的是从开始标签（start tag）到结束标签（end tag）的所有代码。 HTML 元素以开始标签起始 HTML 元素以结束标签终止 元素的内容是开始标签与结束标签之间的内容 某些 HTML 元素具有空内容（empty content） 空元素在开始标签中进行关闭（以开始标签的结束而结束） 大多数 HTML 元素可拥有属性 空的HTML元素：没有内容的 HTML 元素被称为空元素 空元素是在开始标签中关闭的 &lt;br&gt;就是空元素，但是推荐使用&lt;br /&gt;来让元素关闭 HTML是大小写不敏感的，但是XHTML中强制使用小写 行内元素、块级元素 行内元素只能包含数据、其他行内元素 块级元素可以包含行内元素、其他块级元素 HTML属性：HTML标签可以拥有属性，提供了有关 HTML 元素的更多的信息 属性总是以名称/值对的形式出现 属性总是在 HTML 元素的开始标签中规定 始终为属性值加引号 双引号最常用，但是用单引号也没问题 属性值中有双引号时，必须采用单引号 完整的 HTML 参考手册 大多数的HTML元素的属性： 属性 值 描述 class classname 规定元素的类名（classname） id id 规定元素的唯一 id style style_definition 规定元素的行内样式（inline style） title text 规定元素的额外信息（可在工具提示中显示） HTML负责语义，为结构层 CSS负责呈现，为表示层 JavaScript负责协调前两者，为行为层","categories":[{"name":"Web","slug":"Web","permalink":"http://yoursite.com/categories/Web/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/tags/HTML/"}]},{"title":"正则表达式","slug":"学习/Python学习/正则表达式","date":"2020-02-16T02:20:22.000Z","updated":"2020-02-18T03:12:42.814Z","comments":true,"path":"2020/02/16/学习/Python学习/正则表达式/","link":"","permalink":"http://yoursite.com/2020/02/16/学习/Python学习/正则表达式/","excerpt":"","text":"正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配，但是正则表达式不容易，“如果你有一个问题需要用正则表达式解决,那就是两个问题了” re 模块 Python 通过 re 模块来使用正则表达式。下面通过举例来学习吧 123&gt;&gt;&gt; import re&gt;&gt;&gt; re.search(r'Eason', 'Kailey likes Eason')&lt;re.Match object; span=(13, 18), match='Eason'&gt; search() 方法用于字符串中 搜索正则表达式模式第一次出现的位置，要注意两点： 第一个参数是正则表达式模式，也就是要描述的搜索规则，最好使用原始字符串，可以避免麻烦 找到后返回的范围是以下标为 0 开始的，找不到就返回 None 通配符 上面 search() 实现的功能用字符串的 find() 同样能实现。但是正则表达式有所谓的通配符：点号(.)，它可以 匹配除换行符之外的任何字符，且只匹配一个字符 123&gt;&gt;&gt; import re&gt;&gt;&gt; re.search(r'like.', 'Kailey likes Eason')&lt;re.Match object; span=(7, 12), match='likes'&gt; 通常的通配符有 *（匹配 0/多 个字符） 和 ?（匹配 0/1 个字符） 反斜杠 如果我想搜索 通配符. 怎么办？与字符串相同，正则表达式只要在 元字符（有特殊能力的字符） 前面加上 反斜杠\\，就能消除它的特殊功能。 同时，反斜杠\\ 也可以赋予普通字符超能力。比如，\\d 代表者数字，因此我们可以这样匹配 IP 地址 12&gt;&gt;&gt; re.search(r'\\d\\d\\d\\.\\d\\d\\d\\.\\d\\d\\d\\.\\d\\d\\d', 'qweqww4280192.168.123.1231hgw99y13yha')&lt;re.Match object; span=(10, 25), match='192.168.123.123'&gt; 当然上面这样写是有问题的： \\d 匹配 0-9 的数字，\\d\\d\\d 匹配 000-999 的数字，而 IP 地址的范围是 0-255 这里要求 IP 地址每个部分都是 3 位数字，现实生活中并不都是，如 192.168.0.1 字符类 为了表示一个字符的范围，可以创建一个 字符类。使用 中括号[] 将任何内容包起来就是一个字符类，它的含义是 只要是这个字符类中的任何字符，结果就算匹配 举个例子，比如想要匹配元音字母，可以这样做： 12&gt;&gt;&gt; re.search(r'[aeiou]', 'qweqww4280192.168.123.4561hgw99y13yha')&lt;re.Match object; span=(2, 3), match='e'&gt; 但是这样子并不会识别大写的元音字母，我们有两种解决方法： 关闭大小写敏感模式 修改字符类 这里先说修改字符类，我们只需把 [aeiou] 改成 [aeiouAEIOU] 即可匹配大小写的元音字母。 在字符串中，还可以使用 小横杠(-) 来 表示范围：[a-z]（所有小写字母） 同样也可以表示 数字范围：[0-2][0-5][0-5]（000-255） 重复匹配 范围问题解决了，我们开始解决另一个问题——匹配个数。 使用 大括号{} 来实现重复匹配的功能： 12&gt;&gt;&gt; re.search(r'ab&#123;3&#125;c', 'abc abbbc')&lt;re.Match object; span=(4, 9), match='abbbc'&gt; 重复次数也可以取一个范围：{3,5} 表示重复次数 3-5 次。 现在会了重复匹配，但是数字范围还没解决呢。 [0-255] 其实是 [0-2 5 5]，表示 0-2 和 5，匹配 0,1,2,5，只匹配一位数字 [0-2][0-5][0-5] 也不是表示 0-255，比如 188 就表示不了 现在我们要怎么表示 0-255呢？要用上 或| 了。 [0-1]\\d\\d|2[0-4]\\d|25[0-5] 0或1开头；2开头；25开头 注意：或| 左右不能有空格，否则会被当作空格符去匹配 我们现在可以试试匹配每部分都是三位数的 IP 地址了： 12&gt;&gt;&gt; re.search(r'(([0-1]\\d\\d|2[0-4]\\d|25[0-5])\\.)&#123;3&#125;([0-1]\\d\\d|2[0-4]\\d|25[0-5])', '192.168.255.255')&lt;re.Match object; span=(0, 15), match='192.168.255.255'&gt; 小括号() 表示分组，表示这个小组是一个整体。后面再加上 {3} 表示这个小组重复匹配 3 次。 注意不要忘记 IP 地址间的 点号. 现在开始考虑位数了，因为有些部分不是三位数，那要怎么办呢？重复次数为 0 ！现在，我们可以真正匹配一个合格的 IP 地址了： 12&gt;&gt;&gt; re.search(r'(([0-1]&#123;0,1&#125;\\d&#123;0,1&#125;\\d|2[0-4]\\d|25[0-5])\\.)&#123;3&#125;([0-1]&#123;0,1&#125;\\d&#123;0,1&#125;\\d|2[0-4]\\d|25[0-5])', 'other192.168.0.1other')&lt;re.Match object; span=(5, 16), match='192.168.0.1'&gt; 特殊符号及用法 Python 中的正则表达式也是以字符串的形式描述的。 正则表达式的强大之处在于 特殊符号的应用，特殊符号定义了 字符集合、子组匹配、模式重复次数。正是这些特殊符号，使得一个正则表达式可以匹配一个复杂的规则。 下表列举了 Python3 正则表达式特殊符号及用法 字符 含义 . 1. 表示匹配除了换行符以外的任何字符。 2. 通过设置 re.DOTALL 标志可以使 点. 匹配所有字符（包括换行符）。 | A|B，表示匹配正则表达式 A 或者 B。 ^ 1. 匹配输入字符串的开始位置。 2.如果设置了 re.MULTILINE 标志，^ 也可以匹配换行符之后的位置。 $ 1. 匹配输入字符串的结束位置。 2. 如果设置了 re.MULTILINE 标志，$ 也可以匹配换行符之前的位置。 \\ 1. 将一个普通字符变成特殊字符。 2. 解除元字符的特殊功能 引用序号对应的子组所匹配的字符串。 […] 1. 字符类，匹配所包含的任意一字符。 2. 连字符(-) 如果出现在字符串中间表示字符范围描述；如果出现在首位则仅作为普通字符。 3. 特殊字符仅有反斜线()保持特殊含义，用于转义字符；其他特殊字符，如 *、+、? 等均作为普通字符处理。 4. 脱字符(^) 如果出现在首位则表示匹配不包含其中的任意字符；如果出现在中间就仅作普通字符匹配 {M,N} M 和 N 均为非负整数，其中 M&lt;=N，表示前面的 RE 匹配 M~N 次。 注：{M,} 表示至少匹配 M 次；{,N} 等价于 {0,N} 表示至多匹配 N 次 * 匹配前面的子表达式零次或多次，等价于 {0,} + 匹配前面的子表达式一次或多次，等价于 {1,} ? 匹配前面的子表达式零次或一次，等价于 {0,1} *?,+?,?? 默认境况下，*、+、? 的匹配模式是贪婪模式（会尽可能多地匹配符合规则的字符串）；*?,+?,?? 分别对应启用对应的非贪婪模式 。 例如：“Easonzzzz”，‘Easonz+’ 会匹配整个字符串，而 ‘Easonz+?’ 则只匹配 ‘Easonz’ {M,N}? 启动非贪婪模式，既只匹配 M 次 (…) 匹配小括号中的正则表达式，或者指定一个子组的开始和结束位置。 注：子组的内容可以在匹配之后被 “\\数字” 再次引用。 例如：(\\w+) \\1 会匹配 “Eason Easonzzzz” 中的 ‘Eason Eason’ (?..) (? 开头的表示为正则表达式的扩展语法 下表列举了 ‘\\’ 和另一个字符组成的特殊含义 字符 含义 \\序号 1. 引用对应的子组所匹配的字符串，子组的序号从 1 开始计算。 2. 如果序号是以 0 开头，或者 3 个数字的长度，那么不会被用于引用对应的子组，而是用于匹配八进制数字所表示的 ASCII 码对应的字符。 \\A 匹配输入字符串的开始位置 \\Z 匹配输入字符串的结束位置 \\b 匹配一个单词边界，单词被定义为 Unicode 的字母数字或下划线字符 \\B 匹配非单词边界，与 \\b 相反 \\d 1. 对于 Unicode（str类型）模式：匹配任何一个数字，包括 [0-9] 和其他数字字符；如果开启了 re.ASCII 标志，就匹配 [0-9]。 2. 对于 8 位（bytes类型）模式：匹配 [0-9] 中任何一个数字 \\D 匹配任何非 Unicode 的数字，与 \\d 相反；如果开启了 re.ASCII 标志，就匹配 [^0-9]。 \\s 1. 对于 Unicode（str类型）模式：匹配 Unicode 中的空白字符（包括 [\\t\\n\\r\\f\\v] 以及其他空白字符）；如果开启了 re.ASCII 标志，就匹配 [\\t\\n\\r\\f\\v]。 2. 对于 8 位（bytes类型）模式：只匹配 [\\t\\n\\r\\f\\v] \\S 匹配任何非 Unicode 中的空白字符，其实就是与 \\s 相反；如果开启了 re.ASCII 标志，就相当于匹配 [^\\t\\n\\r\\f\\v] \\w 对于 Unicode（str类型）模式：匹配 Unicode 中的单词字符，基本所有的语言的字符都可以匹配，当然包括数字和下划线；如果开启了 re.ASCII 标志，只匹配 [a-zA-Z0-9]。 \\W 匹配任何非 Unicode 的单词字符，与 \\w 相反；如果开启了 re.ASCII 标志，匹配 [^a-zA-Z0-9]。 正则表达式还支持大部分 Python 字符串的转义符号：\\a,\\b,\\f,\\n,\\r,\\t,\\u,\\U,\\v,\\x,\\\\。注意： \\b 通常用于匹配一个单词边界，只有在字符类中才表示“退格” \\u 和 \\U 只有在 Unicode 模式下才被识别 八进制转义（\\数字）是有限制的，如果第一个数字是 0 或者有 3 个八进制数字，那么就被认为是八进制数；其他情况被认为是子组引用；至于字符串，八进制转义总是最多只能是 3 个数字的长度 下表列举了 Python 支持的所有扩展语法 字符 含义 (?aiLmsux) 1. (? 后可以紧跟着 ‘a’，‘i’，‘L’，‘m’，‘s’，‘u’，‘x’ 中的一个或多个字符，只能在正则表达式的开头使用。 2. 每一个字符对应一种匹配标志：re-A（只匹配 ASCII 字符），re-I（忽略大小写），re-L（区域设置），re-M（多行模式）, re-S（. 匹配任何符号），re-X（详细表达式），包含这些字符将会影响整个正则表达式的规则3. 当你不想通过 re.compile() 设置正则表达式标志，这种方法就非常有用啦。 注意，由于 (?x) 决定正则表达式如何被解析，所以它应该总是被放在最前边（最多允许前边有空白符）。如果 (?x) 的前边是非空白字符，那么 (?x) 就发挥不了作用了。 (?..) 非捕获组，即该子组匹配的字符串无法从后边获取 (?P&lt;name&gt;…) 命名组，通过组的名字（name）即可访问到子组匹配的字符串 (?P=name) 反向引用一个命名组，它匹配指定命名组匹配的任何内容 (?#…) 注释，括号中的内容将被忽略 (?=…) 前向肯定断言。如果当前包含的正则表达式（这里以 … 表示）在当前位置成功匹配，则代表成功，否则失败。一旦该部分正则表达式被匹配引擎尝试过，就不会继续进行匹配了；剩下的模式在此断言开始的地方继续尝试。举个栗子：Eason(?=zz) 只匹配后边紧跟着 “zz” 的字符串 “Eason” (?!..) 前向否定断言。这跟前向肯定断言相反（不匹配则表示成功，匹配表示失败）。 举个栗子：Eason(?!zz) 只匹配后边不是 “zz” 的字符串 “Eason” (?&lt;=…) 后向肯定断言。跟前向肯定断言一样，只是方向相反。 举个栗子：(?&lt;=Eason)zz 只匹配前边紧跟着 “Eason” 的字符串 “zz” (?&lt;!..) 后向否定断言。跟前向肯定断言一样，只是方向相反。举个栗子：(?&lt;!Eason)zz 只匹配前边不是 “Eason” 的字符串 “zz” (?(id/name)yes-pattern|no-pattern) 1. 如果子组的序号或名字存在的话，则尝试 yes-pattern 匹配模式；否则尝试 no-pattern 匹配模式。 2. no-pattern 是可选的。 元字符 以下是正则表达式所有的元字符，它们各自有特殊的含义： . ^ $ * + ? {} [] \\ | () 点号(.)：表示匹配除换行符外的任何字符 管道符(|)：有点类似于 逻辑或 操作 脱字符(^)：表示匹配字符串的 开始位置（从开始位置开始匹配） 美元字符($)：表示匹配字符串的 结束位置，也就是只有目标字符出现在末尾才匹配 反斜杠(\\)：既能让一个普通字符特殊化，也能接触元字符的特殊功能 如果反斜杠后面跟着数字，它还有两种用法： 如果跟着 1~99，那么它表示引用序号对应的子组所匹配的字符串 如果跟着 以 0 开头或者是三位数字，那么它是一个八进制数，代表对应的 ASCII 字符 小括号()：本身是一对元字符，被它们括起来的称为一个 子组 子组是一个整体，可以在后面对它引用，以 1 开始，不是零基 中括号[]：可以说生成一个字符类，其实就是一个字符集合，被它包围的元字符都失去了特殊功能，除了反斜杠(\\)。 常和 连字符(-) 使用，表示范围。如果放在开头会，被当作普通字符处理 脱字符(^) 放在首位表示取反 大括号{}：用于表示重复。 重复次数可以是一个数字，也可以是一个范围 星号*，加号(+)，问号(?)：也表示重复，分别是 *: {0,}；+: {1,}；?: {0,1} 推荐使用这三个，因为进行了内部优化，效率更高 贪婪和非贪婪 正则表达式默认是启用贪婪的匹配模式，也就是说：只要是条件符合的情况下，会尽量多地匹配。举个栗子： 123&gt;&gt;&gt; s = \"&lt;html&gt;&lt;title&gt;Easonzzzz&lt;/title&gt;&lt;/html&gt;\"&gt;&gt;&gt; re.search('&lt;.+&gt;', s)&lt;re.Match object; span=(0, 37), match='&lt;html&gt;&lt;title&gt;Easonzzzz&lt;/title&gt;&lt;/html&gt;'&gt; 这段代码原本只想匹配 &lt;html&gt;，但是由于贪婪模式，直接匹配了整个字符串，那怎么关闭贪婪模式，或者说启用非贪婪模式。 只需在表示重复的元字符后面加上 一个问号(?)： 12&gt;&gt;&gt; re.search('&lt;.+?&gt;', s)&lt;re.Match object; span=(0, 6), match='&lt;html&gt;'&gt; 编译正则表达式 如果需要重复使用某个正则表达式，那么可以先将正则表达式编译成模式对象。 使用 re.compile() 方法来进行编译： 12345&gt;&gt;&gt; p = re.compile(\"[A-Z]\")&gt;&gt;&gt; p.search(\"EasonZzZzZz\")&lt;re.Match object; span=(0, 1), match='E'&gt;&gt;&gt;&gt; p.findall(\"EasonZzZzZz\")['E', 'Z', 'Z', 'Z'] 其中的 p 就是模式对象 &lt;class ‘re.Pattern’&gt;。之前使用的 search() 和 findall() 都是它的内建函数。 此外，我们还可以正则表达式的工作方式。 下表列举了可以使用的编译标志 标志 含义 ASSCII, A 使得转义符号只能匹配 ASCII 字符 DOTALL, S 使得(.)匹配任何符号，包括换行符 IGNORECASE, I 匹配时不区分大小写 LOCALE, L 支持当前的语言（区域）设置 MULTILINE, M 多行匹配，影响 ^ 和 $ VERBOX, X(for ‘entended’) 启用详细的正则表达式 A(ASCII) 使得 \\w,\\W,\\b,\\B,\\s,\\S 只匹配 ASCII 字符，而不匹配完整的 Unicode 字符。这个标志仅对 Unicode 模式有意义，并忽略字节模式 S(DOTALL) 使得 点号(.) 匹配任何字符，包括换行符。不启用的话，点号(.) 匹配除了换行符的所有字符 I(IGNORECASE) 字符类和文本字符串在匹配时不区分大小写。 不设置 LOCALE 的话，不考虑语言（区域）设置这方面的大小写问题 L(LOCALE) 使得 \\w,\\W,\\b,\\B 依赖当前的语言（区域）环境，而不是 Unicode 数据库 M(MULTILINE) 通常 ^ 和 $ 只匹配字符串的开头和结尾。如果这个标志被设置的话，它们还匹配每一行的行首和行尾 X(VERBOSE) 可以使正则表达式更加好看、有条理，因为这个标志可以使空格被忽略（除了出现在字符类中和使用反斜杠转义的空格） 这个表示还允许使用注释，井号(#)后面的内容是注释（当然，也除了字符类中和转义的 \\#）123456789char_ref = re.compile(r\"\"\"&amp;[#] # 开始数字引用( 0[0-7]+ # 八进制 | [0-9]+ # 十进制 | x[0-9a-fA-F] # 十六进制); # 结尾分号\"\"\", re.VERBOSE) 实用的方法 search() 模块级别的 search() 方法就是直接调用 re.search()，编译后的正则表达式模式对象也同样拥有 search() 方法。 re.search(pattern, string, flags=0) regex.search(string[, pos[, endpos]]) 由于 flags 在编译的时候就同时编译进去了，所以 regex.search 不需要 flags。另外 regex.search 还支持设置搜索的开始和结束位置。 匹配对象 search() 并不会立刻返回可以使用的字符串，而是返回一个匹配对象。我们需要使用匹配对象的一些方法才能获得需要的内容。 使用 group() 方法可以获取匹配的字符串。还可以设置序号来访问对应的子组捕获的内容 start()、end() 和 span() 分别返回匹配的开始位置、结束位置和匹配的范围。 findall() 如果正则表达式没有包含子组的话，findall() 方法只是找出所有匹配的内容，然后组织成列表返回。 但是如果正则表达式包含一个或者多个子组，就会返回子组中匹配的内容；如果存在多个子组，那么就会将匹配的内容组成元组的形式返回。 其他 另外还有一些实用的方法，例如：finditer() 将结果返回一个迭代器；sub() 实现字符串的替换。","categories":[{"name":"Python学习","slug":"Python学习","permalink":"http://yoursite.com/categories/Python学习/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"正则表达式","slug":"正则表达式","permalink":"http://yoursite.com/tags/正则表达式/"}]},{"title":"论一只爬虫的自我修养","slug":"学习/Python学习/论一只爬虫的自我修养","date":"2020-02-14T08:07:07.000Z","updated":"2020-02-16T03:48:46.310Z","comments":true,"path":"2020/02/14/学习/Python学习/论一只爬虫的自我修养/","link":"","permalink":"http://yoursite.com/2020/02/14/学习/Python学习/论一只爬虫的自我修养/","excerpt":"","text":"入门 网络爬虫，又称网页蜘蛛(WebSpider)，非常形象的一个名字。互联网是蛛网，而蜘蛛在网上爬，以获取资源。 百度或谷歌这样的搜索引擎检索到需要的网页，就是靠它们的爬虫在互联网上，对每个关键词进行索引，建立索引数据库。经过复杂的算法排序后，这些结果将按照与搜索关键词相关度的高低依次排。 编写一个搜索引擎，十分困难。但是我们可以从最简单的网络爬虫开始，不断改进。 Python 中提供了 urllib(url+lib) 模块，可以让 Python 接入互联网。 URL 的一般格式（带 方括号[] 为可选项） protocol: // hostname[: port] / path / [;parameters] [?query] # fragemnt URL 由三部分组成： 协议(protocol)，常见有 http、https、ftp、file、ed2k 存放资源的服务器的 域名系统(DNS) 主机名或 IP 地址（有时候要包括端口号，各种协议都有默认端口号） 主机资源的具体地址 在 Python3 中，urllib 其实是一个包，它包括了 urllib 和urllib2，统一命名为 urllib。这个包中有四个模块： urllib.request for opening and reading URLs，这是做重要的模块 urllib.error containing the exceptions raised by urllib.request urllib.parse for parsing URLs urllib.robotparser for parsing robots.txt files Python 爬取内容是以 utf-8 编码的 bytes 对象（打印字符串前有个 b，表示这是一个 bytes 对象），要还原成 html 代码，需要对其进行解码。 编码 为了解决不同国家不同标准的编码方法，Unicode 编码应运而生。它的做法十分简单：创建一个足够大的编码，将所有国家的编码都加进来，统一标准。 而且，为了能节省空间，Unicode 还创造了很多种实现方式。 UTF-8 就是 Unicode 的常见实现方式，是一种可变长编码 简单来说，就是当文本时 ASCII 编码的字符时，用 1 字节存放；而文本是其他 Unicode 字符时，按一定算法转换，每个字符使用 1-3 个字节存放。 下载一只猫 我们可以在 http://placekitten.com 尝试下载一张猫的图片。在这个网址后面附上宽度和高度，就可以得到一只随机的猫。 http://placekitten.com/200/300 得到一张宽度为 200 像素，高度为 300 像素的图片 1234567import urllib.requestresponse = urllib.request.urlopen('http://placekitten.com/200/300')cat_img = response.read()with open('cat_200_300.jpg', 'wb') as f: f.write(cat_img) 执行上面代码，就能在文件夹中看到猫的照片了 其实，urlopen() 的参数可是一个字符串也可以是 Request 对象。如果是一个字符串，会默认被转为 Request 对象再传入。 因此，代码也可以这样写： 12req = urllib.request.Request('http://placekitten.com/200/300')response = urllib.request.urlopen(req) urlopen() 实际上返回一个类文件对象，因此用 read() 方法来读取内容，除此之外，文档还告诉我们这个类文件对象还能使用以下三个函数： geturl()：返回请求的 url，通常用于判断是否重定向 info()：返回一个 httplib.HTTPMessage 对象，包含远程服务器返回的头信息 getcode()：返回 HTTP 状态码 更好的选择 通常情况下，Python 官方提供的“电池”都是最可靠和实用的，除了 urllib。因为，还有一个比 urllib 更好的 HTTP 库——Requests 安装 Requests 与之前安装 EasyGui 一样，使用 pip 命令安装即可 安装 BeautifulSoup4 有了 Requests 模块，就可以用它的 get() 方法从服务器上下载网页。但是下载的是网页源代码，不利于检索数据，因而我们需要一个解析器。 推荐使用 BeautifulSoup4(BS4)，这是一个网页解析利器。安装方法也是用 pip 命令安装 爬取豆瓣 Top250 电影排行榜 这是我初中就开始看的排行榜，看的电影基本都在上面找的。虽然有些电影已经很老了，但是经典不会随着时间消去的，建议观看。 使用 Requests 下载这个榜单非常简单： 1234567891011import requestsimport bs4headers = &#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:64.0) Gecko/20100101 Firefox/64.0',&#125;res = requests.get('https://movie.douban.com/top250', headers=headers)soup = bs4.BeautifulSoup(res.text, 'html.parser')targets = soup.find_all('div', class_='hd')for each in targets: print(each.a.span.text) 由于豆瓣有反爬虫机制，我刚开始没加 headers，然后 status_code 一直返回 418，于是百度了一番，加上了 headers，居然就可以了。至于 headers 是什么？我也不知道，计网应该会学的 这些数据是什么来的？看一下 HTML 源代码。 每部电影的标题都位于 &lt;div class=‘hd’&gt;…&lt;/div&gt; 的标签中，它的从属关系是 div-&gt;a-&gt;span 所以先调用 find_all() 方法，找到所有 class=‘hd’ 的 div 标签，然后按从属关系直接取出电影名。 现在我们把所有的数据爬出来吧 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566import requestsimport bs4def open_url(url): headers = &#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:64.0) Gecko/20100101 Firefox/64.0', &#125; res = requests.get(url, headers=headers) return resdef find_movies(res): soup = bs4.BeautifulSoup(res.text, 'html.parser') # 电影名 movies = [] targets = soup.find_all('div', class_='hd') for each in targets: movies.append(each.a.span.text) # 评分 ranks = [] targets = soup.find_all('span', class_='rating_num') for each in targets: ranks.append(' 评分：%s ' % each.text) # 资料 messages = [] targets = soup.find_all('div', class_='bd') for each in targets: try: messages.append(each.p.text.split('\\n')[1].strip() + each.p.text.split('\\n')[2].strip()) except: continue result = [] length = len(movies) for i in range(length): result.append(movies[i] + ranks[i] + messages[i] + '\\n') return result# 找出一共几个页面def find_depth(res): soup = bs4.BeautifulSoup(res.text, 'html.parser') depth = soup.find('span', class_='next').previous_sibling.previous_sibling.text return int(depth)def main(): host = \"https://movie.douban.com/top250\" res = open_url(host) depth = find_depth(res) result = [] for i in range(depth): url = host + '/?start=' + str(25*i) res = open_url(url) result.append(find_movies(res)) with open('豆瓣Top250电影.txt', 'w', encoding='utf-8') as f: for each in result: for i in each: f.write(i)if __name__ == '__main__': main()","categories":[{"name":"Python学习","slug":"Python学习","permalink":"http://yoursite.com/categories/Python学习/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"爬虫","slug":"爬虫","permalink":"http://yoursite.com/tags/爬虫/"}]},{"title":"Python模块","slug":"学习/Python学习/Python模块","date":"2020-02-14T01:55:39.000Z","updated":"2020-02-14T05:07:06.052Z","comments":true,"path":"2020/02/14/学习/Python学习/Python模块/","link":"","permalink":"http://yoursite.com/2020/02/14/学习/Python学习/Python模块/","excerpt":"","text":"模块就是程序 模块是更高级的封装。说到封装，我们学了什么类型的封装： 容器（列表、元组、字符串、字典等），是对数据的封装 函数，是对语句的封装 类，是对方法和属性的封装，也就是对函数和数据的封装 现在我们要学的模块，就是程序的封装，保存的每一个 .py 结尾的文件，都是一个独立的模块。 命名空间 命名空间(namespace) 表示 标识符(identifier) 的可见范围。一个标识符可在多个命名空间中定义，它 在不同命名空间中的含义是互不相干的。 在 Python 中，每个模块都会维护一个独立的命名空间，如果你只是通过 import 模块名 来导入的话，要用 模块名.函数名 才能正常使用模块中的函数。 导入模块 导入模块有三种方法。 import 模块名 直接使用 import，但是在调用模块中的函数时，要加上模块的命名空间 这种方法如果模块名太长的话，不是很方便 from 模块名 import 函数名 这种导入方法会直接将模块的命名空间覆盖过来，调用时不用加上命名空间 函数名用通配符 星号* 代替可以导入模块的所有命名空间，这样可能会陷入名字混乱的局面，不建议 import 模块名 as 新名字 这种方法可以给命名空间取个较简单的新名字，又不会污染命名空间，建议使用 __name__=’__main__’ 模块是用来 组织 Python 的代码，还能 实现代码的重用。 但是模块可以导入模块，在运行模块的时候可能会执行导入模块的测试语句。 所以，要使用模块的 __name__属性。如果模块是主模块，__name__ = ‘__main__’。 因而模块中经常见到：if __name__==’__main__’ 这句代码，这个 if 语句下再写测试语句，这样在别人调用自己的模块时，就不会执行测试语句了。 搜索路径 Python 模块的导入需要一个路径搜索的过程。在 Python 预定义好的搜索路径 中寻找对应的模块文件：如果有，则导入；如果没有，则导入失败。 而这个搜索路径，就是一组目录，可以通过 sys 模块中的 path 变量显示出来（不同的机器上显示的路径信息可能不同） 列出的这些路径都是 Python 在导入模块操作时回去搜索的。但是 site-package 目录是最佳选择，因为它生来就是做这些事情的。 搜索路径也是可以扩展的，使用 sys.path.append() 就可以扩展搜索路径了。 包 实际上，一个大型的系统有成千上万的模块也是很正常的事。单单用模块来定义 Python 的功能显然还不够，如果都放在一起显然不好管理，而且还有命名冲突的可能。因此，Python 也出现了包的概念。 Python 中的包的实现要比 Java 中更为简洁。如何创建一个包： 创建一个文件夹用于存放相关模块，文件夹的名字就是包的名字 在文件夹中创建一个 __init__.py 的模块文件，内容可以为空 这一步是必要的，内容可以为空，也可以写一些初始化代码。这一条是 Python 的规定，这样子可以告诉 Python 这个文件夹是包 将相关模块放入文件夹中 像个极客一样去思考 “Python 自己带着电池”，Python 附带安装了 Python 标准库。标准库中的模块极其有用，现在我们要学习：如何自主学习这些模块？ 利用 Python 的官方文档，与 Java Document 一样。Python 的官方文档由几部分组成： What’s new in Python 3.7? or all “What’s new” documents since 2.0 Python3.7 的新内容，或者是列举 2.0 document 的新内容 Tutorial Python 的基本语法 Library Reference Python 官方枕边书，详细列举了 Python 所有内置函数和标准库的各个模块 Installing Python Modules 安装第三方模块 Disturbing Python Modules 发布第三方模块 Language Reference 讨论 Python 的语法与设计哲学 Python Setup and Usage 各个平台上 Python 的安装和使用 Python HOWTOs 深入探讨一些特定主题 Extending and Embedding 介绍如何用 C 和 C++ 开发 Python 的扩展模块 FAQs 常见问题的解决 另外值得一提的是 PEP(Python Enhancement Proposal)，Python 的增强建议书，用来规范与定义 Python 的各种增强与延伸功能的技术规格，让 Python 统一 PEP1 是 PEP 本身的规范定义 PEP3000 是 Python3 的相关技术规格 PEP8 定义了 Python 代码的风格指南 对一个模块查看 __all__ 属性，可以直接获取可供调用接口的信息 不是所有的模块都有，建议编写这个属性 from 模块名 import * ：只导入 __all__ 属性这个列表里的名字（如果没有，则导入所有不以下划线开头的名字） 模块的 __all__ 属性可以查看源代码位置","categories":[{"name":"Python学习","slug":"Python学习","permalink":"http://yoursite.com/categories/Python学习/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"Python魔法方法","slug":"学习/Python学习/Python魔法方法","date":"2020-02-12T02:58:26.000Z","updated":"2020-02-13T07:03:45.921Z","comments":true,"path":"2020/02/12/学习/Python学习/Python魔法方法/","link":"","permalink":"http://yoursite.com/2020/02/12/学习/Python学习/Python魔法方法/","excerpt":"","text":"在此之前，已经接触过了 Python 最常用的魔法方法（__init__()），什么是魔法方法： 魔法方法总是被左右两个下划线(__)包围 魔法方法是面向对象的 Python 的一切 能在适当的时候助你一臂之力 构造和析构 __init__(self[, …]) __init__() 方法是构造方法，也就是类在实例化成对象时候要调用的初始化方法 返回值一定是 None __new__(cls[, …]) 事实上，__new__() 才是在一个对象实例化的时候调用的第一个方法。它与其他魔法方法不同，它的 第一个参数不是 self 而是这个类(cls)，而其他参数会直接传给 __init__() 方法 __new__() 方法需要返回一个实例对象，通常是 cls 的实例对象，当然也可以返回其他对象 __new__() 很少重写，只有一种情况需要重写这个魔法方法，就是当继承一个不可变类型的时候 12345678class CapStr(str): def __new__(cls, string): string = string.upper() return str.__new__(cls, string)&gt;&gt;&gt; a = CapStr('I love you')&gt;&gt;&gt; a'I LOVE YOU' 这里的 return str.new(cls, string) 值得提倡，建议使用 Python 默认机制，而不是完全重写 __del__(self) __del__() 是 Python 的析构方法。当一个对象要被销毁时，这个方法就会被调用 注意：del x 并非相当于自动调用 x.__del__()，__del__() 是当垃圾回收机制回收这个对象时候调用的 算术运算 工厂函数，其实就是一个类对象，当调用它们时候，事实上就是创建了一个相应的实例对象，就像工厂生产货物一样 其实 Python 中无处不对象，计算时使用的数字也是对象，因此对象是可以计算的 Python 的魔法方法还提供了自定义对象的数值处理，通过对下面魔法方法的重写，可以自定义任何对象间的算术运算 常见的算术运算 下表列举了算术运算相关的魔法方法。 魔法方法 含义 __add__(self, other) 加法：+ __sub__(self, other) 减法：- __mul__(self, other) 乘法：* __truediv__(self, other) 真除法：/ __floordiv__(self, other) 整数除法：// __mod__(self, other) 取模算法：% __divmod__(self, other) 当被 divmod() 调用 __pow__(self, other[, modulo]) 当被 power() 调用或 ** 运算的行为 __lshift__(self, other) 按位左移：&lt;&lt; __rshift__(self, other) 按位右移：&gt;&gt; __and__(self, other) 按位与操作：&amp; __xor__(self, other) 按位异或操作：^ __or__(self, other) 按位或操作：| 重写以上方法时，依然建议采取上面重写 __new__() 的方法，尽量使用 Python 默认机制，而不是自己完全重写 例如： 123456def __add__(self, other): return self + other# 这里就触发无限递归了# 因为 self + other 依然调用 __add__ 魔法方法# 这不就是递归了？# 建议使用 int.__add__(self, other) 反运算 下表列举了反运算相关的魔法方法。 魔法方法 含义 __radd__(self, other) 加法：+ __rsub__(self, other) 减法：- __rmul__(self, other) 乘法：* __rtruediv__(self, other) 真除法：/ __rfloordiv__(self, other) 整数除法：// __rmod__(self, other) 取模算法：% __rdivmod__(self, other) 当被 divmod() 调用 __rpow__(self, other[, modulo]) 当被 power() 调用或 ** 运算的行为 __rlshift__(self, other) 按位左移：&lt;&lt; __rrshift__(self, other) 按位右移：&gt;&gt; __rand__(self, other) 按位与操作：&amp; __rxor__(self, other) 按位异或操作：^ __ror__(self, other) 按位或操作：| 以上反运算与上一节的算术运算只多了一个 ‘r’，这些函数是在左操作数不支持相应的操作时被调用的 例如：a + b，a 没有定义 __add__() 或者不支持相应操作，此时 Python 就会自动调用 b 的 __radd__() 方法 一元操作符 Python 支持的一元操作符： __neg__() 表示正号行为； __pos__() 表示负号行为； __abs__() 表示定义 abs() 函数被调用时的行为； __invert__() 表示定义按位取反的行为 字符串 __str__() 和 __repr___() 是两个 返回字符串 的魔法方法。 __str__() 是定义对实例对象调用 str() 时的行为，面向人，转化为适于人阅读的形式 __repr___() 是定义对实例对象调用 repr() 时的行为，面向机器，转化为供解释器读取的形式 定义类的输出的时候经常会使用这两个其中的魔法 属性访问 通常使用 点(.) 操作符的形式访问对象的属性，在 类与对象 中也提到几个访问属性的 BIF，还提到了 property() 来更好的管理属性。 下表列举了与属性相关的魔法方法。 魔法方法 含义 __getattr__(self, name) 当用户试图获取一个不存在的属性时的行为 __getattribute__(self, name) 当该类的属性被访问时的行为 __setattr__(self, name, value) 当一个属性被设置时的行为 __delattr__(self, name) 当一个属性被删除时的行为 注意：重写这些方法时，容易陷入无限递归，建议在自定义后，建议使用 super() 来调用基类相应的魔法方法 例如： 12345678def __setattr__(self, name, value): self.name = value # 此时陷入无限递归 # 因为这里发生对属性的赋值操作 # 会再自动调用 __setattr__ () # 因而陷入无限递归 # 在__setattr__() 中赋值，建议使用 # super().__setattr__(name, value) 还有一种给特殊属性 __dict__ 赋值的方法。对象有一个特殊的属性：__dict__，它的作用是 以字典的形式显示出当前所有属性名以及相应的值 描述符（property 的原理） 描述符(descriptor) 是什么：描述符 本质就是一个新式类,在这个新式类中,至少定义了 __get__()，__set__()，__delete__() 三个特殊魔法方法中的任意一个。它的作用是 用来代理另一个类的属性， 下表是与描述符相关的魔法方法 魔法方法 含义 __get__(self, instance, owner) 用于属性访问，它返回属性的值 __set__(self, instance, value) 将在属性分配操作中调用，不返回任何内容 __delete__(self, instance) 控制删除操作，不返回任何内容 property 事实上就是一个描述符类 定制容器 要想实现容器的定制，首先要谈一谈协议。 协议(protocol) 与其他编程语言中的接口相似，它规定哪些方法必须定义。然而，Python 中的协议没那么正式，更像是一种指南，不会严格的要求定义 在 Python 中，像序列类型，映射类型都属于容器类型。与定制容器有关的一些协议： 容器不可变，只需要定义 __len__() 和 __getitem__() 方法 容器可变得话，除了定义 __len__() 和 __getitem__() 方法，还要定义 __setitem__() 和 __delitem__() 两个方法 下表列举了与容器类型相关的魔法方法。 魔法方法 含义 __len__(self) 当被 len() 函数调用时（返回元素个数） __getitem__(self, key) 获取容器中指定元素，相当于 self[key] __setitem__(self, key, value) 设置容器中指定元素，相当于 self[key]=value __delitem__(self, key) 删除容器中指定元素，相当于 del self[key] __iter__(self) 当迭代容器中的元素 __reversed__(self) 当被 reversed() 函数调用时 __contains__(self, item) 当使用成员测试操作符（in 或 not in）时 迭代器 迭代是 Python 最强大的功能之一，是访问集合元素的一种方式。 迭代的意思类似于循环，每一次重复的过程称为一次迭代的过程，而每一次迭代得到的结果会被用来作为下一次迭代的初始值。 迭代器是提供迭代方法的容器，通常接触的迭代器有序列、字典等，它们都支持迭代的操作 迭代器是一个可以记住遍历的位置的对象，从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。 关于迭代，Python 提供了两个 BIF：iter() 和 next() 对一个容器对象调用 iter() 就得到它的迭代器 调用 next() 迭代器就会返回下一个值 如果迭代器没有值可以返回了，Python 会抛出一个名为 StopIteration 的异常 利用这两个 BIF 就可以分析出 for 语句其实是这样工作的 123456it = iter(container)while True: try: each = next(it) except StopIteration: break 关于实现迭代器的魔法方法有：__iter__() 和 __next__() 如果一个容器是迭代器，就必须实现 __iter__()，这个方法实际上就是返回迭代器本身(self) 重点是 __next__()，它决定了迭代的规则 以下举例个斐波那契数列的迭代器 1234567891011121314151617181920class Fibs: def __init__(self, n=20): self.pre = 0 self.cur = 1 self.n = n def __iter__(self): return self def __next__(self): self.pre, self.cur = self.cur, self.pre+self.cur if self.pre &gt; self.n: raise StopIteration return self.prefibs = Fibs(100)for each in fibs: print(each) 生成器 与迭代器一样，生成器也是 Python 最强大的功能之一。 生成器的学习并不涉及魔法方法，也没有类和对象，它仅用普通的函数就能实现了。 生成器其实是一种迭代器的实现，但是更为简单。迭代器需要定义一个类和实现相关方法，而生成器只需要在普通函数中加上 yield 语句即可 生成器的发明使得 Python 模仿协同程序的概念得以实现 协同程序：可以运行的独立函数调用，函数可以暂停或挂起，并在需要的时候从程序离开的地方继续或重新开始 对于调用一个普通的 Python 函数，一般是从函数的第一行代码执行开始，结束于 return、异常或者函数所有语句执行完。一旦函数将控制权交还给调用者，函数所有工作以及局部变量中的数据全部丢失。 Python 的生成器可以暂时挂起函数，并保留函数的局部变量等数据，然后再次调用它时，从上次暂停的位置继续执行下去 在调用生成器运行的过程中，每次 遇到 yield 时函数会暂停 并保存当前所有的运行信息，返回 yield 的值, 并 在下一次执行 next() 方法时从当前位置继续运行 调用一个生成器函数，返回的是一个迭代器对象 下面我们再次使用斐波那契数列举例： 123456789101112def fibsGen(): pre = 0 cur = 1 while True: pre, cur = cur, pre+cur yield prefor each in fibsGen(): if each &gt; 100: break print(each) 生成器表达式 列表推导式(list comprehensions) 也叫做列表解析，灵感取自函数式编程 Hashell，它是一个非常有用和灵活的工具，可以动态地创建列表。 下面举个栗子吧： 1234567# 列表推导式list1 = [i*i for i in range(10)]# 上式相当于list2 = []for i in range(10): list2.append(i*i) 除了列表推导式，还有字典推导式（dictionary comprehension） 12&gt;&gt;&gt; &#123;i : i%2 == 0 for i in range(10)&#125;&#123;0: True, 1: False, 2: True, 3: False, 4: True, 5: False, 6: True, 7: False, 8: True, 9: False&#125; 除了上面两个，还有元组推导式吗？ 12&gt;&gt;&gt; (i for i in range(10))&lt;generator object &lt;genexpr&gt; at 0x000001E43227B348&gt; 似乎没有元组推导式哦？其实它就是个 generator ，小括号的内容就是 生成器表达式（generator expressions），可以利用 next() 生成 0-9 的序列 123456&gt;&gt;&gt; e = (i for i in range(10))&gt;&gt;&gt; next(e)0&gt;&gt;&gt; next(e)1 还有一个特性更“牛”，生成器表达式也能作为函数的参数使用 12&gt;&gt;&gt; sum(i for i in range(100) if i % 2)2500","categories":[{"name":"Python学习","slug":"Python学习","permalink":"http://yoursite.com/categories/Python学习/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"Python类和对象","slug":"学习/Python学习/Python类和对象","date":"2020-02-11T01:20:37.000Z","updated":"2020-02-12T09:05:50.151Z","comments":true,"path":"2020/02/11/学习/Python学习/Python类和对象/","link":"","permalink":"http://yoursite.com/2020/02/11/学习/Python学习/Python类和对象/","excerpt":"","text":"对象=属性+方法 Python 中的对象由两部分组成：“属性”（对象的特征） 和 “方法”（对象的行为） 面向对象编程 self 对象的每一个方法都有一个 self 参数，这里的 self 就相当于 C++ 中的 this 指针 当一个对象的方法被调用时，对象会将自身的引用作为第一个参数传给该方法，这样子 Python 就知道该操作哪一个对象了 Python 中也有 this，但是建议使用 self Python 的魔法方法 Python 的对象天生拥有一些神奇的方法，它们是可以给类增加魔力的特殊方法，如果对象实现了这些方法的某一个，那么 这个方法就会在特殊的情况下被自动调用 魔法方法总会被左右各两个下划线所包围 这里只介绍一个最基本的特殊方法：__init__() 构造方法，只要实例化对象就会被调用，可以传入参数 可以通过重写这个方法来 自定义对象的初始化操作 公有和私有 Python 中并没有像 C++ 和 Java 中的访问修饰符用于声明数据的访问权限。为了实现类似私有变量的特征，Python 采用了一种叫做 Name Mangling（名字改编技术），只需要在变量名或函数名前加上 &quot;__&quot;两个下划线，那么这个函数或变量就会变成私有的了 在外部这个变量是不可见的（隐藏），访问时不会提示它是私有变量 但是Python只是在名字上动了手脚，实际上可以通过“_类名__变量名”访问私有变量。因而 Python 目前的私有机制其实是 伪私有，所有的变量在外部都可以访问 继承 Python 中类继承的语法很简单： 12class 类名(被继承的类): ...... 被继承的类称为基类、父类或超类；继承者称为子类，一个子类可以继承它的父类任何属性和方法 子类中定义与父类同名属性或方法，会自动覆盖父类对应的成员 子类的 __init__() 并不会自动调用父类的构造函数，可以采用两种方法调用： 调用未绑定的父类方法 使用 super 函数 调用未绑定的父类方法 使用 Python GUI入门 中的 easygui.EgStore 演示 12345678910import easygui as egclass Settings(eg.EgStore): def __init__(self, filename): # 这里的未绑定是指：不需要绑定父类的实例对象 # 使用子类的实例对象代替即可 eg.EgStore.__init__(filename) 使用 super 函数 对上例改进 12345678import easygui as egclass Settings(eg.EgStore): def __init__(self, filename): super().__init__(filename) super 函数：不需要明确给出任何基类的名字，它会自动找出所有基类以及对应的方法。 如果改变继承关系，使用 super 的话就基本无须改变代码，而第一个方法要改较多代码 多重继承 Python 与 C++ 相同，与 Java 不同，它支持多重继承。语法十分简单： 12class 类名(父类1, 父类2, ...): ...... 多重继承容易导致代码混乱，所以 Java 中禁止这种做法，虽然 Python 允许，但是要尽量避免使用它，因为会出现不可预见的 BUG。 例如：钻石（菱形）继承问题 组合 组合是一种将几个类组合成一个类，进行管理 例如：鱼，乌龟两个类，组合成了一个水池类 1234567891011121314151617181920class Turtle: def __init__(self, x): self.num = x class Fish: def __init__(self, y): self.num = y class Pool: def __init__(self, x, y): self.turtle = Turtle(x) self.fish = Fish(y) def print_num(self): print('水池中有：%d 只乌龟，%d 条鱼' % (self.turtle.num, self.fish.num)) 类、类对象和实例对象 在 Python 中，类中定义的属性是静态变量，也就是 Java 中的 static 变量，类的属性是与类对象绑定的，不依赖任何它的实例对象 类属性被所有类对象的实例对象(实例方法)所共有，在内存中只存在一个副本。对于公有的类属性，在类外可以通过类对象和实例对象访问。 所有的实例对象在初始化时都引用类对象的属性，为同一内存区域，如果实例对象没有对其赋值覆盖，那么类对象一改属性，实例对象也会跟着改变 指针：内容是一块内存的地址 引用：一块内存的别名 123456789101112131415class C: count = 0a = C()b = C()print(a.count, b.count)b.count += 10print(a.count, b.count)C.count += 100print(a.count, b.count)# 0 0# 0 10# 100 10 属性和方法名相同的话，属性会覆盖方法 什么是绑定 Python 严格要求方法必须要有实例才能被调用，这种限制其实就是 Python 所谓的绑定概念 类可以定义不传入 self 的函数，但是只有类对象能使用，实例对象不能调用，因为实例对象调用方法时会自动传入实例对象（self）作为第一个参数 使用 __dict__ 可以查看对象拥有的属性，仅显示实例对象的属性，不显示类属性和特殊属性，键表示属性名，值表示属性相应的数据值 函数(function) 也是一种属性，但是 绑定方法(bound method) 不是属性 函数(function) 和 方法(method) 的区别： 函数是可以直接写文件中，方法是只能写在class中 方法必须带一个默认参数(self)。如果不带就是非绑定方法(unbound method)，在 Python3 中为普通函数，因为 Python3 取消了 unbound method 的说法 一些相关的 BIF 介绍一些类和对象相关的一些 BIF（内置函数） issubclass(class, classinfo) 如果第一个参数（class）是第二个参数（classinfo）的一个子类，则返回True，反之返回False 一个类被认为是其自身的子类 classinfo 可以是类对象组成的元组，只要是 class 是其中任一类的子类就返回 True 可能抛出 TypeError 的异常 isintance(object, classinfo) 如果第一个参数（object）是第二个参数（classinfo）的实例对象，则返回True，反之返回False 如果 object 是 classinfo 的子类的一个实例，也返回 True 如果第一个不是对象，永远返回 False 和 issubclass() 相同，classinfo 也可以是类对象组成的元组 如果第二个不是类或者类对象组成的元组，会抛出 TypeError 的异常 hasattr(object, name) attr 即 attribute 的缩写，属性的意思，这个 BIF 判断一个对象是否有指定的属性 第一个参数是对象，第二个是属性名（属性的字符串名字） getattr(object, name[, default]) 返回对象指定的属性值，如果指定属性不存在，则返回 default（可选参数）的值，若没有设置 default 参数，则抛出 AttributeError异常 setattr(object, name, value) 设置对象中指定属性的值，如果指定属性不存在，那么会新建属性并赋值 delattr(object, name) 删除对象中指定的属性，如果属性不存在，则抛出 AttributeError异常 property(fget=None, fset=None, fdel=None, doc=None) property() 返回一个可以设置属性的属性，用于管理、封装属性，文档中描述为：Typical use is to define a managed attribute x fget：获得属性的方法 fset：设置属性的方法 fdel：删除属性的方法 doc：描述属性的文档 例如： 1234567891011121314class C(object): def __init__(self): self._x = None def getx(self): return self._x def setx(self, value): self._x = value def delx(self): del self._x x = property(getx, setx, delx, \"I'm the 'x' property.\") 如果 c 是 C 的实例化, c.x 将触发 getter，c.x = value 将触发 setter，del c.x 触发 deleter。 如果给定 doc 参数，其将成为这个属性值的 docstring，否则 property 函数就会复制 fget 函数的 docstring（如果有的话）","categories":[{"name":"Python学习","slug":"Python学习","permalink":"http://yoursite.com/categories/Python学习/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"Python GUI入门","slug":"学习/Python学习/Python GUI入门","date":"2020-02-10T07:49:12.000Z","updated":"2020-02-10T12:03:54.706Z","comments":true,"path":"2020/02/10/学习/Python学习/Python GUI入门/","link":"","permalink":"http://yoursite.com/2020/02/10/学习/Python学习/Python GUI入门/","excerpt":"","text":"安装 EasyGui EasyGui 可以直接使用 pip 工具安装，打开 CMD 命令行窗口，输入 pip install easygui 即可。 pip(the package installer for Python) 是 Python 的包管理工具，提供了对 Python 包的查找、下载、安装、卸载功能 导入 EasyGui 为了使用 EasyGui 这个模块，首先应当导入它，有三种方法： import easygui 这种方法最为简单，但是使用 EasyGui 的函数时，必须加上前缀easygui from easygui import * 导入整个 EasyGui 包，能直接调用 EasyGui 的函数 会污染命名空间 import easygui as eg 建议这样操作，因为既可以保持 EasyGui 的命名空间，也可以减少前缀，直接使用 eg 前缀就可以了 各种功能演示 调用 easygui.egdemo() 函数，就可以尝试 EasyGui 拥有的各种功能、 使用 EasyGui 使用按钮组件 根据需求，EasyGui 在 buttonbox() 上建立了一系列的函数供调用 msgbox() msgbox(msg=’(Your message goes here)’, title=’ ', ok_button=‘OK’, image=None, root=None) msg：要显示的信息 title：标题 ok_button：可以重写确认按钮 ccbox() ccbox(msg=‘Shall I continue?’, title=’ ', choices=(‘C[o]ntinue’, ‘C[a]ncel’), image=None, default_choice=‘Continue’, cancel_choice=‘Cancel’) 继续选择框，提供两个选择：C[o]ntinue 或者 C[a]ncel，并相应的返回 True 或者 False C[o]tinue 中的 [o] 表示快捷键，按一下键盘的 o 相当于单机了 C[o]tinue 按钮 ynbox() ynbox(msg=‘Shall I continue?’, title=’ ‘, choices=(’[]Yes’, ‘[]No’), image=None, default_choice=’[]Yes’, cancel_choice=’[]No’) 与 ccbox() 一样，但是默认的 choices 参数不同 这里的[]也是快捷键 buttonbox() buttonbox(msg=’’, title=’ ', choices=(‘Button[1]’, ‘Button[2]’, ‘Button[3]’), image=None, images=None, default_choice=None, cancel_choice=None, callback=None, run=True) 使用 buttonbox() 可以自定义一组按钮，单机按钮返回按钮的值 这里文档只有三个按钮，但是实测可以多个 默认返回 None indexbox() indexbox(msg=‘Shall I continue?’, title=’ ', choices=(‘Yes’, ‘No’), image=None, default_choice=‘Yes’, cancel_choice=‘No’) 基本与之前的相同，但是这里返回的索引值，而不是按钮的值 第一个按钮返回索引值0，第二个返回1 boolbox() boolbox(msg=‘Shall I continue?’, title=’ ‘, choices=(’[Y]es’, ‘[N]o’), image=None, default_choice=‘Yes’, cancel_choice=‘No’) 如果第一个按钮被选中返回 True，否则返回 False 以上按钮组件都有一个 image 参数，可以传入图片的路径以显示图片 为用户提供一系列的选择 buttonbox() 为用于提供了一个简单的按钮选项，如果选项过多，就要采用可选择列表了 choicebox() choicebox(msg=‘Pick an item’, title=’’, choices=[], preselect=0, callback=None, run=True) 向 choices 传入序列，这些选项会按字母（不区分大小写）进行排序 multchoicebox() multchoicebox(msg=‘Pick an item’, title=’’, choices=[], preselect=0, callback=None, run=True) 基本与 choicebox() 一致，但是 multchoicebox() 支持多选 让用户输入消息 enterbox() enterbox(msg=‘Enter something.’, title=’ ‘, default=’’, strip=True, image=None, root=None) 提供一个最为简单的输入框，返回值为用户输入的字符串 默认返回的值会去掉首位空格，若要保留空格的话，设置参数 strip=False integerbox() integerbox(msg=’’, title=’ ', default=None, lowerbound=0, upperbound=99, image=None, root=None) 用于只能输入范围内的整数，否则会要求用户重新输入 范围：lowerbound ~ upperbound multenterbox() multenterbox(msg=‘Fill in values for the fields.’, title=’ ', fields=[], values=[], callback=None, run=True) 提供多个简单的输入框 如果用户输入值比选项少，则返回列表中的值用空字符串填充为用户输入的项 如果用户输入的值比选项多，则截断为选项的数量 取消操作的话，返回域中列表的值或者 None 值 让用户输入密码 passwordbox() passwordbox(msg=‘Enter your password.’, title=’ ‘, default=’’, image=None, root=None) passwordbox() 与 enterbox() 样式一样，但是输入的内容是用星号(*)显示出来 multpasswordbox() multpasswordbox(msg=‘Fill in values for the fields.’, title=’ ', fields=(), values=(), callback=None, run=True) multpasswordbox() 与 multenterbox() 采用相同的接口，但是它的最后一个输入框显示为密码的形式(*) 显示文本 textbox() textbox(msg=’’, title=’ ‘, text=’’, codebox=False, callback=None, run=True) 默认会以比例字体（codebox=True 设置等宽字体）来显示文本，自动换行，适合于显示一般的书面文字 有一个 textArea 组件，按 OK 的话会返回 None 或者 输入 textArea 的内容 codebox() codebox(msg=’’, title=’ ‘, text=’’) 以等宽字体显示文本内容，不自动换行，等宽字体适合于代码显示 相当于 textbox(codebox = True)，与 textbox() 一样有一片 textArea 目录与文件 GUI 编程中一个常见情景：要求用户输入目录及文件名。 diropenbox() diropenbox(msg=None, title=None, default=None) 提供一个对话框，返回用户选择的目录名（带完整路径），如选择 Cancel，则返回 None default 设置默认打开目录（确保目录已存在） fileopenbox() fileopenbox(msg=None, title=None, default=’*’, filetypes=None, multiple=False) 提供一个对话框，返回用户选择的文件名（带完整路径），如选择 Cancel，则返回 None 关于 default 参数的设置方法： 指定一个默认路径，通常包含一个或多个通配符（通配符是一种特殊语句，主要有星号(*)和问号(?)，用来模糊搜索文件） 如果设置了 default 参数，fileopenbox() 会显示默认的文件路径和格式 default 默认参数是 ‘*’，即匹配所有格式的文件。 例如 default=‘c:/eason/*.py’ 即显示 c:/eason 文件夹下所有的 Python 源文件 default=‘c:/eason/test*.py’ 即显示 c:/eason 文件夹下所有的以test开头的 Python 源文件（同样也可以设置xx结尾的） 关于 filetypes 参数的设置方法： 可以是包含文件掩码的字符串列表，如：filetypes = [’*.txt’] 可以是字符串列表，列表的最后一项字符串是文件类型的描述，如：[&quot;*.css&quot;, [&quot;*.htm&quot;, “*.html”, “HTML files”]]（HTML files就是对前面两种文件类型的描述） multiple 参数设置是否可以多选 filesavebox() filesavebox(msg=None, title=None, default=’’, filetypes=None) 提供一个对话框，用于选择文件需要保存的路径 default 参数应该包含一个文件名（如当前需要保存的文件名），当然也可以为空，或者是一个文件格式掩码的通配符 filetypes 参数的设置参照 fileopenbox() 捕获异常 使用 EasyGui 编写 GUI 时难免会产生异常，当程序崩溃时，堆栈追踪可能会被抛出，或者被写入 stdout 标准输出函数中。 EasyGui 通过 exceptionbox() 将堆栈追踪显示在一个 codebox() 中，并且允许做进一步的处理 exceptionbox(msg=None, title=None) Display a box that gives information about an exception that has just been raised. 记住用户的设置 GUI 编程中一个常见情景：要求用户设置参数，然后保存下来，以便下次用户使用 EasyGui 提供了一个名为 EgStore 的类。应用程序必须定义一个类继承 EgStore 类，并创建一个该类的实例化对象 设置类的 构造函数（__init__ 方法） 必须初始化所有想要记住的那些值。这样这可以在对象中设定值去实例化变量，之后使用 store() 方法在硬盘中持久化存储。 保存设置 12345678910111213141516171819202122import easygui as egclass Settings(eg.EgStore): def __init__(self, filename): # 实例化变量 self.author = '' self.book = '' self.filename = filename # 读取保存的文件，第一次打开时为空 # 第二次以后恢复filename中的内容 self.restore()settingsFilename = 'setting.txt'settings = Settings(settingsFilename)settings.author = 'Eason'settings.book = '《凯莉生气的十万个原因》'settings.store() 恢复设置 1234settingsFilename = 'setting.txt'settings = Settings(settingsFilename)print(settings.author)print(settings.book)","categories":[{"name":"Python学习","slug":"Python学习","permalink":"http://yoursite.com/categories/Python学习/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"Python异常处理","slug":"学习/Python学习/Python异常处理","date":"2020-02-08T02:54:50.000Z","updated":"2020-02-08T07:58:56.625Z","comments":true,"path":"2020/02/08/学习/Python学习/Python异常处理/","link":"","permalink":"http://yoursite.com/2020/02/08/学习/Python学习/Python异常处理/","excerpt":"","text":"你不能总是对的 程序总会出现问题，就应该学会用适当的方法去解决问题。 可以利用Python提供的异常处理机制，在异常出现的时候及时捕获，并从内部自我处理掉。 常见异常 AssertionError：断言语句(assert)失败 AttributeError：尝试访问未知的对象属性 IndexError：索引超出序列范围 KeyError：字典中查找一个不存在的关键字 NameError：尝试访问一个不存在的变量 OSError：操作系统产生的异常 就是操作系统产生的异常，像打开一个不存在的文件会引发 FileNotFoundError，而这个异常是 OSError 的子类 SyntaxError：Python 的语法错误 TypeError：不同类型间的无效操作 ZeroDivisionError：除数为零 try-except 语句 用法与java中的try-catch相同，一旦出错，try剩下的语句不再执行 1234try: 检测范围except Exception [as reason]: 出现异常(Exception)后的处理代码 BaseException为所有异常的父类 [as reason] 可以省略，但是如果要对Exception进行操作的话，reason 就代表了抛出的异常，不能省略 try-except 语句有多种结构： 针对不同异常设置多个except 类似于 Java 中多个 catch，要从小到大 except 异常 123456try: 检测范围except OSError as reason: 处理OSErrorexcept ZeroDivisionError as reason: 处理ZeroDivisionError 对多个异常统一处理 except 可以跟着多个异常，直接使用小括号()括起 1234try: 检测范围except (OSError, ZeroDivisionError) as reason: print(\"抛出：\" + str(reason)) 捕获所有异常 直接使用except，或者捕获BaseException 12except [BaseException]: 处理 raise 语句 raise 语句可以直接抛出异常，抛出的异常还能带参数，表示异常的解释 12345&gt;&gt;&gt; raise ZeroDivisionError(\"除数为0\")Traceback (most recent call last): File \"&lt;pyshell#0&gt;\", line 1, in &lt;module&gt; raise ZeroDivisionError(\"除数为0\")ZeroDivisionError: 除数为0 丰富的 else 语句 Python3 中 else 语句有各种丰富的功能： 要么怎样，要么不怎样 即 if-else 语句 干完了能怎样，干不完就别想怎样 else 语句与 for 和 while 循环语句配合使用，else 语句块只有循环完成后才执行 没有问题？那就干吧 else 语句与 try-except 语句配合，如果 try 的执行没有异常，就执行 else 语句块的内容；若抛出异常，则不执行 finally 语句 finally 语句和 Java 中的 finally 相同，都是无论是否发生异常都将执行 finally 语句块 总结 简洁的 with 语句 Python 中提供了一个 with 语句，可以抽象出文件操作中频繁使用的 try-except-else-finally。 with 语句会自动完成文件的关闭操作 以下举个例子： 123456try: with open('data.txt') as file: for each_line in f: print(each_line)except OSError as reason: print(str(reason))","categories":[{"name":"Python学习","slug":"Python学习","permalink":"http://yoursite.com/categories/Python学习/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"Python永久存储","slug":"学习/Python学习/Python永久存储","date":"2020-02-06T04:31:11.000Z","updated":"2020-02-08T02:58:38.316Z","comments":true,"path":"2020/02/06/学习/Python学习/Python永久存储/","link":"","permalink":"http://yoursite.com/2020/02/06/学习/Python学习/Python永久存储/","excerpt":"","text":"文件 打开文件 在Python中，使用 open() 内置函数来 打开文件并返回文件对象 open(file, mode=‘r’, buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None) Open file and return a stream. Raise OSError upon failure. open() 有很多参数，值得注重的有： file：传入的文件名 如果只有文件名，那么会在当前文件夹中寻找文件 mode：指定文件打开模式 打开模式 执行操作 ‘r’ open for reading (default) ‘w’ open for writing, truncating the file first ‘x’ create a new file and open it for writing ‘a’ open for writing, appending to the end of the file if it exists ‘b’ binary mode ‘t’ text mode (default) ‘+’ open a disk file for updating (reading and writing) ‘U’ universal newline mode (deprecated) 文件对象的方法 下表列举了一些常用的文件对象方法。 文件对象的方法 执行操作 close() 关闭文件 read(size = -1) 从文件读取 size 个字符，当 size 为负值时，读取所有字符，然后返回字符串 readline() 从文件中读取一整行字符串 write(str) 将字符串str写入文件 writelines(seq) 写入字符串序列seq seek(offset, from) 在文件中移动文件指针，从 from（0表示文件起始位置，1表示当前位置，2表示文件末尾）偏移 offset 个字节 tell() 返回当前文件中的位置 文件的关闭 close() 用于文件的关闭。但是Python具有垃圾收集机制，会自动关闭文件。但是，这不代表可以不要关闭文件，因为Python可能会缓存写入的数据，一旦程序出现意外，缓存的数据不会写入。为了安全起见，最好要使用完立刻关闭文件 文件的读取和定位 文件的读取有很多方法： read() 和 readline() read() 按字节读取 但是在读取中文时，会按两个字节取出一个完整的中文 readline() 按行读取（读取到&quot;\\n&quot;） 直接 list(file) 或者使用迭代来读取 list(file) 会将文件按行分成列表 迭代读取的话可以直接使用file，因为文件对象本身是一个可迭代对象 文件指针：可以认为是个“书签”，起到定位的作用，按字节计数（中文为两个字节） seek() 移动文件指针，seek(0, 0) 设置指针回到文件起始位置 tell() 告诉当前文件指针的位置 文件的写入 打开模式要有 ‘w’(覆盖写入) 和 ‘a’(写在末尾) 血的教训：‘w’ 模式会直接删除原有内容，无论你是否有写入 文件系统 介绍一些与Python文件相关的模块。 模块(Module)：是一个Python文件，以 .py 结尾，能更好的组织Python代码段 OS 模块 OS(Operating System)：操作系统模块 以下是OS模块中关于文件/目录的常用函数 函数名 使用方法 getcwd() 返回当前工作目录 chdir(path) 改变工作目录 listdir(path=’.’) 列举指定目录中的文件名（’.‘表示当前目录，’…'表示上一级目录） mkdir(path) 创建单层目录，如已存在则抛出异常 makedirs(path) 递归创建多层目录 remove(path) 删除文件 rmdir(path) 删除单层目录，如该目录非空则抛出异常 removedirs(path) 递归删除目录，从子目录逐层尝试删除，遇到目录非空则抛出异常 rename(old, new) 将文件old重命名为new system(commond) 运行系统的shell指令 walk(top) 遍历top参数指定目录的所有子目录，返回一个(路径, [包含目录], [包含文件])的三元组生成器 以下是支持路径操作中常用的一些定义，支持所有平台 定义 含义 os.curdir 指代当前目录(’.’) os.pardir 指代上一级目录(’…’) os.seq 输出操作系统特定的路径分隔符（Win下为’\\\\’，Linux下为’/’） os.lineseq 当前平台使用的终止符（Win下为’\\r\\n’，Linux下为’\\n’） os.name 指代当前使用的操作系统（包括’posix’,‘nt’,‘mac’,‘os2’,‘ce’,‘java’） OS.path 模块 OS.path 模块可以完成一些针对路径的操作。 以下列举了 OS.path 常用函数 函数名 使用方法 basename() 去掉目录路径，单独返回文件名 dirname() 去掉文件名，单独返回目录 join(path1[,path2[,…]]) 将path1，path2各部分组合成一个路径名 split(path) 分割文件名和路径，返回(f_path,f_name)元组 splitext(path) 分离文件名和扩展名，返回(f_name,f_extension)元组 getsize(file) 返回指定文件的尺寸，单位是字节 getatime(file) 返回指定文件的最近访问时间 getctime(file) 返回指定文件的创建时间 getmtime(file) 返回指定文件最新的修改时间 join(path1[,path2[,…]])：用于将路径名和文件名组合成一个完整的路径 split(path)：如果只传入一个目录，它也会将最后一层目录当作文件名分离，不会去判断文件或者目录是否存在 getatime(file)，getctime(file)，getmtime(file)：返回值都是浮点型秒数，可用 time模块 的 gmtime() 或 localtime() 函数换算 以下函数返回True or False 函数名 使用方法 exists(path) （目录或文件）是否存在 isabs(path) 是否为绝对路径 isdir(path) 是否存在且是一个目录 isfile(path) 是否存在且是一个文件 islink(path) 是否存在且是一个符号链接 ismount(path) 是否存在且是一个挂载点 samefile(path1,path2) 两个路径是否指向同一文件 pickle 模块 pickle 模块几乎可以把所有 Python 的对象都转化成二进制的形式存在，这个过程称为 pickling，把二进制形式转化成对象的过程称为 unpickling。 也可以称为 序列化(serializing) 和 反序列化(de-serializing)，与java中类似，将对象转换成二进制形式 常用函数 pickle.dump(obj, file, protocol=None, *, fix_imports=True, buffer_callback=None)¶ obj 表示将要封装的对象 file 表示 obj 要写入的文件对象，必须以 ‘wb’ 模式打开，即二进制可写模式 protocol 表示 pickle 使用的协议，有0，1，2，3，默认是 Python3 中使用的3 pickle.load(file, *, fix_imports=True, encoding=“ASCII”, errors=“strict”, buffers=None) file 必须以 'rb’模式打开，即二进制可读模式 其他均为可选参数 pickle.dumps(obj, protocol=None, *, fix_imports=True, buffer_callback=None) 以字节对象形式返回封装的对象，而不是将其写入文件 pickle.loads(bytes_object, *, fix_imports=True, encoding=“ASCII”, errors=“strict”, buffers=None) 从字节对象中读取并返回被封装的对象","categories":[{"name":"Python学习","slug":"Python学习","permalink":"http://yoursite.com/categories/Python学习/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"Python字典和集合","slug":"学习/Python学习/Python字典和集合","date":"2020-02-05T04:31:11.000Z","updated":"2020-02-06T07:34:22.824Z","comments":true,"path":"2020/02/05/学习/Python学习/Python字典和集合/","link":"","permalink":"http://yoursite.com/2020/02/05/学习/Python学习/Python字典和集合/","excerpt":"","text":"字典：当索引不好用时 字典类似于Java中的Map，就是建立两个列表间的映射（key-value）。 使用 大括号{} 定义，由 “键” 和 “值” 共同构成，每一对键值组合称为 “项” 字典中的键独一无二，且必须不可变类型 值可重复，可以取任意值 字典不支持拼接和重复操作的，因为键独一无二 创建方法 直接使用 大括号{} ，如dict1 使用 dict() 内置函数创建 键值对要打包成元组送入，因为 dict()只接受一个序列，如dict2 通过提供具有映射关系的参数建立，键的位置不能加上引号，如dict3 123dict1 = &#123;'L': 1, 'O': 2, 'V': 3, 'E': 4&#125;dict2 = dict((('L', 1), ('O', 2), ('V', 3), ('E',4)))dict3 = dict(L = 1, O = 2, V = 3, E = 4) 访问方法 访问字典里的值与访问序列雷子，只需要把相应的键放入 方括号[] 即可 如果键不存在，则抛出KeyError 如果是一个赋值语句，则覆盖或者新建键值对 内置方法 fromkeys(seq[, value]) fromkeys()方法用于新建并返回一个新的字典，它有两个参数： 第一个参数是字典的键； 第二个是可选的，传入所有键对应的值，如果没有传入，则默认None 如果第二参数传入的是序列，也会被当成一个Value赋给所有的key keys()，values()，items() keys()返回字典中所有的键 &lt;class ‘dict_keys’&gt; values()返回字典中所有的值 &lt;class ‘dict_values’&gt; items()返回字典中所有的键值对 &lt;class ‘dict_items’&gt; get(key[, default]) get() 提供了更宽松的方法访问字典，当键不存在时，不会报错，而是返回None 第二个参数用于设置键不存在时返回的值，默认None，因此默认返回None 可以用成员资格操作符 in 和 not in 来判断键是否存在 clear() clear() 用于清空词典 copy() copy() 方法用于拷贝（浅拷贝）整个字典 在这里，浅拷贝的含义是，字典是不同字典，但是里面的键，值为同一内存区域 12345678910&gt;&gt;&gt; dict1 = &#123;1:[1,2,3]&#125;&gt;&gt;&gt; dict2 = dict1.copy()# 字典已经不同&gt;&gt;&gt; id(dict1) == id(dict2)False# 但是子对象相同&gt;&gt;&gt; id(dict1[1]) == id(dict2[1])True 扩展学习： 直接赋值：对象的引用（别名） 浅拷贝：copy，拷贝父对象，子对象还是引用 深拷贝：deepcopy，完全拷贝，父子对象都拷贝 pop(ket[, default]) 和 popitem() pop()是给定键弹出对应的值 popitem()弹出最后一个项 这里的弹出是返回并删除 setdefault(key[, default]) setdefault() 与 get() 类似，但是，setdefault() 在字典中找不到键时会自动添加 第二个参数是不仅是返回值，还是新建键值对的值 update([other]) update() 方法用于更新字典，将键对应的值更新 此功能与新建键值对的覆盖类似 集合：你就是我的唯一 与Java中的Set相同，Python中的集合(set)的特点是：唯一，无序，与字典相同使用 大括号{}，但是没有映射关系 创建集合 直接把一大堆元素用 大括号{} 括起来 但是如果要建立空集合，这样子做会被Python认为是字典 用 set() 内置函数，传入可迭代对象 1234&gt;&gt;&gt; set1 = &#123;1,2,3,4&#125;&gt;&gt;&gt; set2 = set([1,2,3,4])&gt;&gt;&gt; set1 == set2True 如果创建中的元素有重复，会只留下一个 访问集合 因为集合是无序的，因此不能使用下标访问，只能用迭代把集合中的数据一个个读取出来 可以用 in 和 not in，判断一个元素是否存在 可以使用add()，remove()内置方法增删元素 不可变集合 不可变集合(frozenset)中的元素只能访问，不能修改 使用 frozenset() 函数创建不可变集合，传入可迭代对象，返回为&lt;class ‘frozenset’&gt;","categories":[{"name":"Python学习","slug":"Python学习","permalink":"http://yoursite.com/categories/Python学习/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"Python函数","slug":"学习/Python学习/Python函数","date":"2020-02-03T07:11:56.000Z","updated":"2020-02-11T04:45:07.143Z","comments":true,"path":"2020/02/03/学习/Python学习/Python函数/","link":"","permalink":"http://yoursite.com/2020/02/03/学习/Python学习/Python函数/","excerpt":"","text":"函数定义 以下是简单的规则： 函数代码块以 def关键词 开头，后接 函数标识符名称 和 圆括号()。 任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。 函数内容以冒号起始，并且缩进。 return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。 语法 12def 函数名(函数列表): 函数体 函数调用 定义一个函数：给了函数一个名称，指定了函数里包含的参数，和代码块结构。 这个函数的基本结构完成以后，你可以通过另一个函数调用执行，也可以直接从 Python 命令提示符执行。 参数传递 在 python 中，类型属于对象，而变量是没有类型的，它只是一个引用，可以代表任何对象 可更改(mutable)与不可更改(immutable)对象： 在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。 不可变类型：新建了一个对象赋值给变量，原对象被丢弃 可变类型：修改了对象 python的参数传递： 不可变类型：类似于值传递，即拷贝传值，不影响原对象 可变类型：类似于引用传递，影响原对象 python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。 参数 python中的正式参数类型： 必需参数 关键字参数 默认参数 不定长参数 必需参数 必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。 关键字参数 关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。 使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。 默认参数 与C++中的默认参数一致，调用函数时，如果没有传递参数，则会使用默认参数。 不定长参数 也称收集参数，你可能需要一个函数能处理比当初声明时更多的参数，这些参数叫做不定长参数。 单星号*(tuple) 加了 星号* 的参数会以 元组(tuple) 的形式导入，存放所有未命名的变量参数。 若没有指定，则为空元组 123456789def printinfo(*vartuple, end = \"\\n\"): \"打印所有传入的参数\" for var in vartuple: print(var, end = end) return# 调用printinfo# printinfo(1,2,3,4,5,end=\"\")# 12345 双星号**(dict) 加了 两个星号** 的参数会以 字典(dict) 的形式导入。使用方法与上面类似。 总结 星号* 可以单独出现，但是如果单独出现 星号* 后的参数必须用关键字传入。 其实 星号* 起到“打包”作用，将多个参数打包成一个元组 星号* 在形参中的作用是“打包”，在实参中的作用是“解包” 若作为不定长参数传入元组和字典时，要加上星号* 和 双星号**，即传入时要解包，否则元组和字典只会被当作一个参数 变量作用域 局部变量 定义在函数内部的变量是局部变量，它的作用域：函数内部，不能在函数外部被引用 全局变量 与局部变量相对，拥有更大的作用域，可以在函数中访问 函数中可以访问全局变量，但是不能修改（Python会在函数内部新建了一个局部变量，真正的全局变量不被改变） global关键字 Python使用 屏蔽（shadowing） 保护全局变量：一旦函数内部试图修改全局变量，那么就会新建一个名字一样的局部变量代替，保护全局变量。 如果你还是要坚持修改，使用 global关键字 声明该全局变量，即可在函数内部修改全局变量。 内嵌函数 Python的函数定义支持嵌套，定义在别的函数内部的被称为内嵌函数或者内部函数 内部函数整个作用域在外部函数之内，只有在外部函数里才能调用内嵌函数 内部函数可以引用外部函数的局部变量，此时内部函数称为 闭包 ，但是与全局变量类似，不能在内部函数修改外部函数的局部变量，且不能使用 global 修改，可以使用 nolocal关键字 修改 LEGB原则 变量查找的顺序按照 L→E→G→B LEGB含义解释： L-Local：函数内的名字空间 E-Enclosing function locals：嵌套函数中外部函数的名字空间 G-Global：函数定义所在模块的名字空间 B-Builtin：Python内置模块的名字空间 闭包 闭包(closure)是语法闭包(lexical closure)的简称，是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。 Python中的闭包表现在：如果一个内部函数里，对在外部作用域但不是在全局作用域的变量进行引用，那么内部函数就是闭包 在闭包中，外部函数的局部变量对应内部函数的局部变量，相当于全局变量与局部变量的关系，可以访问不能修改，但是可以使用 nolocal关键字 修改 装饰器 装饰器(decorator) 的功能：将被装饰的函数当作参数传递给装饰器对应的函数（名称相同的函数），并返回包装后的被装饰的函数 @语法糖 1234567891011121314151617# 给eat函数加上日志def log(func):def wrapper(): print(&quot;开始调用eat函数&quot;) func() print(&quot;结束调用eat函数&quot;)return wrapper# @log 等价于 log(eat())@logdef eat():print(&quot;开始吃了&quot;)&gt;&gt;&gt; eat()开始调用eat函数开始吃了结束调用eat函数 可以省去手动将eat()传递给log()再将返回值重新赋值的过程（eat = log(eat)） 如果使用 @语法糖 时候，eat()有参数，最好使用不定长参数，不然在修改eat()的参数时，也要修改装饰器log() @语法糖也可以嵌套使用 函数式编程 函数式编程(funtional programming)，是一种编程范式，它将电脑运算视为函数运算，并避免使用程序状态以及易变对象。 其中，λ演算(lambda calculus) 为该语言最重要的基础。而且，λ演算的函数 可以接受函数当作输入（引数）和输出（传出值）。 lambda Python使用 lambda关键字 来创建 匿名函数，简化函数定义的过程。 基本语法：使用 冒号: 分隔函数的参数及返回值 冒号左边放参数，使用 逗号, 隔开 冒号右边是函数的返回值 执行完 lambda 返回的是一个函数对象，如果要对它进行调用，只需要给它绑定一个临时的名字 123&gt;&gt;&gt; g = lambda x,y : x**y&gt;&gt;&gt; g(3,4)81 filter() filter()函数是一个过滤器，它的作用是在海量得数据里面提取出有用得信息 class filter(object) | filter(function or None, iterable) --&gt; filter object | | Return an iterator yielding those items of iterable for which function(item) | is true. If function is None, return the items that are true. filter有两个参数：第一个是一个函数或者None 如果是一个函数的话，则把第二个可迭代对象里的每一个元素作为函数的参数进行计算，筛选出返回True的元素 如果是None，则直接将第二个参数中为True的值筛选出来 filter()返回的是一个迭代器对象 123# 筛选出0~9中的奇数&gt;&gt;&gt; list(filter(lambda x : x%2, range(10)))[1, 3, 5, 7, 9] map() map()会根据提供的函数对指定序列做映射。 class map(object) | map(func, *iterables) --&gt; map object | | Make an iterator that computes the function using arguments from | each of the iterables. Stops when the shortest iterable is exhausted. map有两个参数：一个函数和一个可迭代对象，将可迭代对象的每一个元素作为函数的参数进行运算加工，直至可迭代序列每个元素都加工完毕，即 将序列的每一个元素通过函数进行映射 map()第二个参数是不定长参数，支持多个可迭代对象。map()会从所有可迭代对象各取一个元素组成元组，类似于zip()函数，然后将元组传递给func（第一个参数） 以短的可迭代对象为止 map()返回的是一个迭代器","categories":[{"name":"Python学习","slug":"Python学习","permalink":"http://yoursite.com/categories/Python学习/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"Python序列","slug":"学习/Python学习/Python序列","date":"2020-01-31T12:49:11.000Z","updated":"2020-02-05T08:31:58.773Z","comments":true,"path":"2020/01/31/学习/Python学习/Python序列/","link":"","permalink":"http://yoursite.com/2020/01/31/学习/Python学习/Python序列/","excerpt":"","text":"列表：一个打了激素的数组 列表类似于数组，但是比数组更加强大，它能 同时存放不同类型的变量 创建列表 只需使用 方括号[] 将数据包裹起来（数据之间用逗号隔开） 1test = [1,2,3,4,5] 增删改查 增 append()：将元素添加在列表末尾 extend()：使用一个列表来扩充另一个列表 insert()：第一个参数指定待插入位置（索引值），第二个参数是待插入的元素 删 remove()：指定一个待删除元素，不需要知道位置 pop()：将指定元素取出并删除，参数是一个索引值（不带参数的话，默认弹出最后一个） del：Python中的del关键词，可以直接删除列表或列表中的某个元素 改 使用一个temp变量作为中间值，交换元素 偷懒方法12345eggs[1], eggs[2] = eggs[2], eggs[1]# 等同于# temp = eggs[1]# eggs[1] = eggs[2]# eggs[2] = temp 查 通过索引值直接获取，与数组相同 当索引值为负数时，表示从列表的末尾反向索引 切片(slice) 取出列表的部分元素，用冒号隔开两个索引值，即可返回一个切片（新列表） 12list2 = list[2:5]# 以list1中索引值2到5作为一个新列表，赋值给list2 如果索引值全部为空，则返回列表的拷贝 步长 切片可以接受第三个参数：步长（默认值1） 可以设置步长为-1，逆置列表 常用操作符 比较操作符：从第一个元素开始比较，只要有一个赢了，就算整个列表赢了，与字符串的比较同理 连接操作符(+)：将多个列表对象来合并起来 重复操作符(*)：重复列表 成员关系操作符：in 和 not in（只能判断一个层次的成员关系） 元组：戴上了枷锁的列表 元组（tuple）：只读，不可写的列表 创建 使用 小括号() 创建，元素用逗号隔开 其实小括号是可以不要的，关键是逗号，小括号只是补充123tuple1 = (520,)tuple2 = 520,# tuple1和tuple2是同样的元组 访问 直接使用下标访问，或者使用切片 更新和删除 元组并不能改变，但是我们可以创建一个新的同名元组，来起到更新和删除的功能 若要删除元组，使用 del 即可 字符串 字符串在基础知识中已经学了不少，这里只是加入来学习序列的同一性 字符串和元组一样，不能修改，只能通过新建同名字符串 切片 字符串可以使用索引值访问，当然也可以使用切片功能 内置函数 count(sub,[start[,end]])：计算sub参数在字符串中出现的次数，可选参数start和end find(sub[,start[,end]]) 和 index(sub[,start[,end]])：都是寻找sub第一次出现的位置，返回索引值 找不到的话find返回-1；index抛出异常 replace(old,new[,count])：将原字符串中的old替换成new，可以指定次数 split(seq=None, maxsplit=-1)：拆分字符串，返回一个字符串列表 join(iterable)：拼接字符串 使用方法：&quot;,&quot;.join(elems)。因为join的参数是一切可迭代对象，如果将其写在左侧，那就必须对所有这些对象新建join方法,因而将字符串写在前面。 格式化 format() 举例即可： 12\"&#123;0&#125; &#123;1&#125; make a &#123;2&#125;\".format(\"I\", \"will\", \"difference\")# I will make a difference % 字符串独享的 格式化操作符(%) 当 % 出现在字符中，它表示格式化操作符 12'%c%c' % (65, 97)# 'Aa' 序列 列表，元组和字符串都是序列，它们有很多共同点： 都可以通过索引值访问（默认为0，也支持负数索引） 可以使用切片 有很多共同操作符（重复、拼接、成员关系） 常用BIF list([iterable])：将一个可迭代对象转换成列表 若参数为空，则创建一个空列表 tuple([iterable])：将一个可迭代对象转换成元组 str(obj)：将obj对象转换成字符串 len(sub)：返回sub参数的长度 max()：返回序列中的最大值 min()：返回序列中的最小值 sum(iterable[,start])：从start为基值，加上序列所有元素和 sorted(iterable, key=None, reverse=False)：返回一个排序的列表，而内建sort()方法是原地排序 reversed(sequence)：返回逆序的序列，内建方法是原地翻转 也可以使用逆向切片实现：seq[::-1] enumerate(iterable)：生成一个由二元组构成的可迭代对象，每个二元组由可迭代的索引号及对应的元素组成 zip(iter1[,iter2[…]])：返回由各个可迭代参数共同组成的多元组序列","categories":[{"name":"Python学习","slug":"Python学习","permalink":"http://yoursite.com/categories/Python学习/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"Python分支和循环","slug":"学习/Python学习/Python分支和循环","date":"2020-01-31T05:32:22.000Z","updated":"2020-01-31T06:19:30.238Z","comments":true,"path":"2020/01/31/学习/Python学习/Python分支和循环/","link":"","permalink":"http://yoursite.com/2020/01/31/学习/Python学习/Python分支和循环/","excerpt":"","text":"条件控制 if语句 123456if condition_1: statement_block_1elif condition_2: statement_block_2else: statement_block_3 elif代替了else if，所以if语句的关键字为：if–elif–else 在Python中没有switch–case语句 if嵌套 if中含有if 断言(assert) assert关键字后边条件若为假，则程序崩溃，抛出AssertionError 循环控制 while循环 12while 判断条件(condition)： 执行语句(statements)…… 简单语句组 类似if语句的语法，如果你的while循环体中只有一条语句，你可以将该语句与while写在同一行中 for循环 1234for &lt;variable&gt; in &lt;sequence&gt;: &lt;statements&gt;else: &lt;statements&gt; range()函数 生成数列，以便于for循环 break，continue和else break，continue和其他语言基本一致 循环中的else语句：它在穷尽列表(以for循环)或条件变为 false (以while循环)导致循环终止时被执行，但循环被 break 终止时不执行 pass语句 Python pass是空语句，是为了保持程序结构的完整性，pass不做任何事情，一般用做占位语句 12while True: pass # 等待键盘中断 (Ctrl+C)","categories":[{"name":"Python学习","slug":"Python学习","permalink":"http://yoursite.com/categories/Python学习/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"Python基础知识","slug":"学习/Python学习/Python基础知识","date":"2020-01-26T14:04:22.000Z","updated":"2020-02-15T08:45:59.433Z","comments":true,"path":"2020/01/26/学习/Python学习/Python基础知识/","link":"","permalink":"http://yoursite.com/2020/01/26/学习/Python学习/Python基础知识/","excerpt":"","text":"常用操作符 算术操作符 +、-、*、/、%、**(乘方)、//(地板除法) 地板除法(floor)：计算结果取比商小的最大整型值(舍去小数，取整) 比较操作符 &lt;、&lt;=、&gt;、&gt;=、==、!= 返回布尔类型值 逻辑操作符 and、or、not 返回布尔类型值 变量(variable) 当为一个值起名字的时候，它将会存储在内存中，称为变量(variable) Python与大多数计算机语言不同，它并不是把值储存在变量中，而像是把名字&quot;贴&quot;在值上边 使用变量之前，要先赋值 字符串(string) 字符串也称为文本，就是引号内的一切内容 Python 创建字符串时，可以是单引号或双引号(不能混用) 如果字符串内容有引号，要用转义字符 '\\' 如果在数字相加时加上引号，则变成了字符串的连接 原始字符串 将字符串不通过转义输出，在字符串前面加上一个英文字母’r’即可 例如： 1string = r\"C:\\Eason\" 使用字符串时都需要注意：无论是否为原始字符串，都不能以反斜杠作为结尾 反斜杠放在末尾表示还未结束，换行继续的意思12'中南大学' \\'我来了' 长字符串 三重引号字符串(&quot;&quot;“内容”&quot;&quot;)即为长字符串 1234print(\"\"\"我是中南人哈哈哈哈哈\"\"\") 标准数据类型 Python的变量是没有类型的，但是不代表Python没有数据类型 Python3 中有六个标准的数据类型： Number(数字) String(字符串) List(列表) Tuple(元组) Set(集合) Dictionary(字典) 其中： 不可变数据：Number、String、Tuple 可变数据：List、Set、Dictionary Number(数字) Python3 支持 int、float、bool、complex(复数)。 在 Python3 里，只有一种整数类型 int，表示为长整型，默认无限长，没有 python2 中的Long。 内置的 type() 函数可以查询变量所指的对象类型，只有一个参数：待确定类型的数据。返回对象类型 isinstance() 函数也可以判断，有两个参数：第一个待确定类型的数据；第二个指定一个数据类型。返回一个布尔值 isinstance 和 type 的区别在于： type()不会认为子类是一种父类类型。 isinstance()会认为子类是一种父类类型。 注意：在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。到 Python3 中，把 True 和 False 定义成关键字了，但它们的值还是 1 和 0，它们可以和数字相加。 String(字符串) 之前已简单介绍，此后再详细介绍 List(列表) List 是 Python 中使用最频繁的数据类型。 列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。 列表是写在 方括号[] 之间、用逗号分隔开的元素列表。 Tuple(元组) tuple与list类似，不同之处在于元组的元素不能修改。 元组写在 小括号() 里，元素之间用逗号隔开。 其实，可以把字符串看作一种特殊的元组。 Set(集合) set 是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。基本功能是进行成员关系测试 和 删除重复元素。 可以使用 大括号{} 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。 Dictionary(字典) 字典（dictionary）是Python中另一个非常有用的内置数据类型。 字典是一种映射类型，字典用 大括号{} 标识，它是一个无序的 键(key) : 值(value) 的集合。 key不可变且唯一 与java中的HashMap十分相似 Python数据类型转换 数据类型的转换，你只需要将数据类型作为函数名即可。 函数 描述 int(x,[base]) 将x转换为一个整数 float(x) 将x转换到一个浮点数 complex(real [,imag]) 创建一个复数 str(x) 将对象 x 转换为字符串 repr(x) 将对象 x 转换为表达式字符串 eval(str) 用来计算在字符串中的有效Python表达式,并返回一个对象 tuple(s) 将序列 s 转换为一个元组 list(s) 将序列 s 转换为一个列表 set(s) 转换为可变集合 dict(d) 创建一个字典。d 必须是一个 (key, value)元组序列。 frozenset(s) 转换为不可变集合 chr(x) 将一个整数转换为一个字符 ord(x) 将一个字符转换为它的整数值 hex(x) 将一个整数转换为一个十六进制字符串 oct(x) 将一个整数转换为一个八进制字符串","categories":[{"name":"Python学习","slug":"Python学习","permalink":"http://yoursite.com/categories/Python学习/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"计算机组成概论","slug":"学习/计组/计算机组成概论","date":"2020-01-01T16:00:00.000Z","updated":"2020-01-04T08:42:49.745Z","comments":true,"path":"2020/01/02/学习/计组/计算机组成概论/","link":"","permalink":"http://yoursite.com/2020/01/02/学习/计组/计算机组成概论/","excerpt":"","text":"计算机系统概论 机器字长 CPU一次能处理数据的位数 与CPU中的寄存器位数有关 存储容量：存放二进制信息的总位数 主存容量：存储单元个数 X 存储字长 冯·诺依曼机的特点 计算机由运算器、存储器、控制器、输入设备和输出设备五大部件组成 指令和数据以同等的地位存于存储器，并可按地址寻址 指令和数据均用二进制表示 指令由操作码和地址码组成 指令在存储器内按顺序存放 机器以运算器为中心","categories":[{"name":"计算机组成原理","slug":"计算机组成原理","permalink":"http://yoursite.com/categories/计算机组成原理/"}],"tags":[{"name":"计组","slug":"计组","permalink":"http://yoursite.com/tags/计组/"}]},{"title":"Java基本语法","slug":"学习/Java学习/Java基本语法","date":"2019-12-26T16:00:00.000Z","updated":"2019-12-27T12:37:22.362Z","comments":true,"path":"2019/12/27/学习/Java学习/Java基本语法/","link":"","permalink":"http://yoursite.com/2019/12/27/学习/Java学习/Java基本语法/","excerpt":"","text":"立即数系统默认为int/double 如要赋值一个long，必须要在最后加上L符号表示这是个long类型 数组初始化 int[] a = new int[]{1,2,3}; 类型转换 低精度可以直接赋给高精度 byte &lt; short &lt; char &lt; int &lt; long &lt; float &lt; double java中的char是十六位，双字节，因此比short大 高精度不能直接赋值给低精度：需要强制类型转换 不同类型之间的运算结果为精度最高的类型 基本数据类型和字符串转换 String.valueOf(各种基本类型)，返回String对象 XXX.parseXXX(字符串)，返回的是primitive类型，而不是对象 文档注释：&quot;/**&quot; 开头，&quot;*/&quot;结束 字符串相加(实为连接)：&quot;+&quot;是Java中唯一重载过的一个字符 &amp;&amp; 和 || 都是短路运算符，即如果第一个可以判断出表达式的TF，就不再运算后面的内容 运算符的优先级： 点号，括号，分号，逗号 算术运算符 移位运算符 关系运算符 逻辑运算符 赋值运算符 Java流程 选择：if-else switch-case(会让你判断结果) 循环：for while do-while break continue 注意：判断中只能为boolean类型，不能为数值","categories":[{"name":"Java学习","slug":"Java学习","permalink":"http://yoursite.com/categories/Java学习/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"Java常用API","slug":"学习/Java学习/Java常用API","date":"2019-12-26T16:00:00.000Z","updated":"2019-12-27T12:39:20.517Z","comments":true,"path":"2019/12/27/学习/Java学习/Java常用API/","link":"","permalink":"http://yoursite.com/2019/12/27/学习/Java学习/Java常用API/","excerpt":"","text":"API：Application Programming Interface，Java内置的一些类及其功能 java.lang Java语言核心包，包含了Java编程最基本的支持类 java.lang默认被任何程序import，使用里面的类，不需要导入。其他包必须导入才能使用 包括：Object，Math，String，StringBuffer，StringBuilder，基本数据类型包装类，System Math 负责数值运算 一般采用Math.Xxx调用 例：在一个100个元素的1维数组（默认值为0）中，随机将50个值赋为1 思路：先用一个ArrayList保存1－100的元素值。每次从中随机取出一个值，并将其赋给数组的一个元素。然后从ArrayList中删除这个值 String 负责字符串处理 不可变，采用池机制，任何一个新字符串都会被新建空间存放，因此循环中用String会大大影响程序性能 调用replace这种函数时，原字符串不变，会返回一个新的字符串 StringBuffer和StringBuilder 两者都是可变的字符串 StringBuffer：可变，效率低，线程安全 StringBuilder：可变，效率高，线程不安全 如果要操作少量的数据用String 多线程操作字符串缓冲区下操作大量数据StringBuffer 单线程操作字符串缓冲区下操作大量数据StringBuilder。 基本数据类型包装类 包装类 Java是面向对象的语言，但是基本类型，如int，short，float，double等并没有遵循面向对象；Java中为它们各自设计一个包装类 boolean——Boolean，byte——Byte，short——Short，char——Character，int——Integer，long——Long，float——Float，double——Double 作用 将各种数据用对象包装，便于管理 便于和字符串之间相互转换 String.valueOf(各种类型) Xxx.parseXxx(字符串) System 显示时间：System.currentTimeMillis() 看程序运行多长时间 终止程序：System.exit(int status) 强制垃圾收集：System.gc() java.util 集合 Collection List接口：有顺序,下标访问，可重复，一维变长 ArrayList：底层数组存储，线程不安全 LinkedList：底层链表存储，线程不安全 Vector：底层数组存储，线程安全 功能基本相同：增删改查 Set接口：无下标，不可重复(唯一)，一维变长 HashSet：普通的set，保存元素，乱序 LinkedHashSet：顺序按照元素添加顺序 TreeSet：自动排序(自然/比较器排序) Collections类 Collections是类，不是接口 为集合提供处理功能的工具类 sort，frequency，disjoint，max/min，replaceAll…… Map &lt;Key,Value&gt;，key不可重复，每个key对应一个value(类似于映射) HashMap：普通map，乱序 LinkedHashMap：按添加顺序排序 TreeMap：按Key排序，(自然/比较器排序) Hashtable(线程同步)，Properties：具有更多功能 遍历方法 List：下标访问，可以用普通for或高级for遍历 Set：无下标 利用迭代器进行，迭代遍历 高级for foreach Map：无下标 在for循环中使用entries实现Map的遍历 在for循环中遍历key或者values，一般适用于只需要map中的key或者value时使用，在性能上比使用entrySet较好 通过Iterator遍历 通过键找值遍历，这种方式的效率比较低，因为本身从键取值是耗时的操作 日期操作 Date Calendar","categories":[{"name":"Java学习","slug":"Java学习","permalink":"http://yoursite.com/categories/Java学习/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"Java IO操作","slug":"学习/Java学习/Java IO操作","date":"2019-12-26T16:00:00.000Z","updated":"2019-12-27T12:39:02.678Z","comments":true,"path":"2019/12/27/学习/Java学习/Java IO操作/","link":"","permalink":"http://yoursite.com/2019/12/27/学习/Java学习/Java IO操作/","excerpt":"","text":"IO操作 IO：输入输出，站在内存角度 输入输出，最典型的是文件输入输出 文件输入：将已有文件的内容输入内存-&gt;文件读 文件输出：将内存数据输出到文件-&gt;文件写 IO操作支持的API一般保存在java.io包 File类 最常见的构造函数： public File(String pathname) Windows系统分隔符&quot;\\&quot;，但是要用&quot;\\\\“表示，因为”\\&quot;转义字符 Unix系统分隔符是&quot;/&quot;，但是Windows系统也能使用，所以一般用&quot;/&quot; 常用方法： getAbsolutePath()，exists()，isDirectory()，isFile()，length()，delete()…… 没有复制文件(读取，再新建)，移动文件(读取，删除，再新建)的功能 文件的length用字节表示，删除为永久删除 读写文件 流(Stream)：就是指像水流一样长长的一串连续的东西。在很多时候，流(Stream)是字节流(Byte Steram)的简称，也就是长长的一串字节。 读文件 InputStream FileInputStream：字节流，支持类型多，但是对双字节字符支持不佳(不能识别中文) BufferedInputStream(常用)：带缓冲，速度较快，但只能使用read或readLine Reader FileReader：字符流，一般支持字符，对双字节字符支持较好(可以识别中文) BufferedReader(常用)：带缓冲，速度较快 readLine：按行读，在网络编程中应用较多，会阻塞 flush：将缓冲区中的数据立马存入硬盘 写文件 OutputStream FileOutputStream：字节流，对中文支持尚可 BufferedOutputStream：带缓冲，速度较快 Writer FileWriter：字符流 BufferedWriter(常用)：带缓冲，速度较快 PrintStream RandomAccessFile 随机访问，在文件随机位置定义一个起始点，从起始点读写，有着各种类型的读写 在于可以随意在文件中间定义起始点：seek(long pos) 函数 public RandomAccessFile(String name，String mode) throws FileNotFountException 总结 一般使用BufferedReader，PrintStream 流使用完后要关闭，关闭最外层流，内层流自动关闭","categories":[{"name":"Java学习","slug":"Java学习","permalink":"http://yoursite.com/categories/Java学习/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"Java网络编程","slug":"学习/Java学习/Java网络编程","date":"2019-12-26T16:00:00.000Z","updated":"2019-12-27T12:40:09.154Z","comments":true,"path":"2019/12/27/学习/Java学习/Java网络编程/","link":"","permalink":"http://yoursite.com/2019/12/27/学习/Java学习/Java网络编程/","excerpt":"","text":"IP和Port 如何定位到某台电脑？ IP地址 IPV4：32位，分割成4个&quot;8位二进制数&quot;，2019.11.26耗尽 IPV6：128位 确定IP后，如何确定特定的网络应用程序？ 端口(Port) 0~65535，其中0~1024被占用(HTTP:80) IP确定电脑地址，Port确定应用程序，实现计算机之间的相互通讯 TCP和UDP TCP(Transmission Control Protocol) 基于连接，只有C/S两端连接上才能通信 打电话 UDP(User Datagram Protocol) 基于报文，只传送信息，并不保证信息传送一定成功，性能好 写信 C/S模式 Client/Server模式 客户端的通信通过服务器的转发 过程： 服务器启动（确定端口） 客户端连到服务器（根据服务器IP和端口） 客户端发信息给服务器 服务器发信息给另一个客户端 java.net包 ServerSocket：开启服务器，指定端口，接受客户端连接。 accept()：阻塞函数(死等函数) Socket：套接字。负责实际的通信连接，以及发送接收信息。 getOutputStream，getIntputStream，老师推荐使用： 12PrintStream ps = new PrintStream(socket.getOutputStream())BufferedReader br = new BufferedReader(new IntputStreamReader(socket.getIntputStream()))","categories":[{"name":"Java学习","slug":"Java学习","permalink":"http://yoursite.com/categories/Java学习/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"Java异常处理","slug":"学习/Java学习/Java异常处理","date":"2019-12-26T16:00:00.000Z","updated":"2019-12-27T12:40:24.668Z","comments":true,"path":"2019/12/27/学习/Java学习/Java异常处理/","link":"","permalink":"http://yoursite.com/2019/12/27/学习/Java学习/Java异常处理/","excerpt":"","text":"认识异常 java.lang.Exception 程序出现异常，有什么危害？ 异常退出，错误提示 程序在出现异常之后，后面的代码将不会执行 解决异常 预见所有异常可能，进行约束。很难做到 一网打尽 try-catch-finally 用try块来管理可能出现异常的代码 用catch块处理某种异常 用finally块包起来不管异常与否都要运行的代码，保证程序安全性 1234567try&#123; // 可能出现异常的代码&#125; catch (Exception ex)&#123; // 处理异常&#125; finally&#123; // 不管异常与否都要运行的代码&#125; try至少接一个catch或finally，而且两个之间不能有代码 catch能有多个(从小到大排序)，但finally至多一个 只有try-finally必须throws异常 try中异常后的代码不执行 finally最大的特点是：即使在try中跳出了代码块，甚至return跳出了函数，finally内的代码仍然能运行 抛出异常 throw：在函数中抛出一个异常对象 throws：标注该函数可能会抛出某种异常 一般情况下，标注了throws的函数，调用时一定要用try-catch处理异常或者再次抛出(直至到JVM，它也不会处理，出现异常的话只好死给你看) RuntimeException在编译时不会报错，但是在运行时会出错，相当于main函数抛出异常 自定义异常：extends Exception即可","categories":[{"name":"Java学习","slug":"Java学习","permalink":"http://yoursite.com/categories/Java学习/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"Java多线程开发","slug":"学习/Java学习/Java多线程开发","date":"2019-12-26T16:00:00.000Z","updated":"2019-12-27T12:39:33.795Z","comments":true,"path":"2019/12/27/学习/Java学习/Java多线程开发/","link":"","permalink":"http://yoursite.com/2019/12/27/学习/Java学习/Java多线程开发/","excerpt":"","text":"认识多线程 进程(process)：操作系统层面，计算机能够“同时”运行的各个应用程序；管理上，每个进程占用独自的内存资源分时间片 线程(Thread)：应用程序层面，程序能够“同时”运行的各个任务；管理上，各个线程共用进程的内存资源 例：一个程序，可以下载文件，同时播放音乐。两个任务分别运行。 开发线程 关键是将需要用线程管理的代码（不依赖主程序，可以同时运行的代码），放在线程中。 方法1：继承 Thread 类开发多线程 继承 java.lang.Thread 类开发多线程 1class MyThread extends Thread 在这个类重写 Thread 类中的run函数： 1public void run()&#123;&#125; 实例化线程对象，调用其 start() 函数启动该线程 12MyThread thread = new MyThread();thread.start(); 方法2：实现 Runnable 接口开发多线程 编写一个类，实现 java.lang.Runnable 接口 1class MyRunnable implements Runnable 在这个类中重写 java.lang.Runnable 接口中的函数： 1public void run()&#123;&#125; 实例化 java.lang.Thread 对象，实例化上面编写的 Runnable 实现类，将后者传入 Thread 对象的构造函数，调用 Thread 对象的 start() 函数来启动线程 12345Runnable threadJob = new MyRunnable();Thread thread = new Thread(threadJob);thread.start();// 等价于// new Thread(new MyRunnable()).start(); 两种方法比较 第一种每个对象都是一个线程，而第二种每个对象不是一个线程，必须将其传入Thread对象才能运行 第一种每个线程都有自己的成员变量，而第二种共享成员变量 Java不支持多重继承，只能继承一个类，但是可以实现多个接口，第一种方法虽然较简单，但是扩展性没有第二种强 线程控制 启动(start)、暂停(suspend)、继续(resume)、停止(stop)，销毁(destroy) Thread的suspend(暂停)，resume(继续)虽然可以使用，但是由于有死锁危险，被废弃。因为线程暂停时，并不释放线程所拥有的资源。 解决方法：建议让线程暂停，等价于让线程结束运行。因为结束运行会释放资源；线程结束运行的标志：run函数运行完毕。线程继续相当于新开一个线程，在原来线程基础上运行。所以线程暂停时，要注意保护现场。","categories":[{"name":"Java学习","slug":"Java学习","permalink":"http://yoursite.com/categories/Java学习/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"Java界面和事件","slug":"学习/Java学习/Java界面和事件","date":"2019-12-26T16:00:00.000Z","updated":"2019-12-27T12:39:47.554Z","comments":true,"path":"2019/12/27/学习/Java学习/Java界面和事件/","link":"","permalink":"http://yoursite.com/2019/12/27/学习/Java学习/Java界面和事件/","excerpt":"","text":"GUI GUI(Graphics User Interface)：图形用户界面 Swing 用于开发GUI程序，有三大要素：窗口(Window)，控件(Component)，渲染 窗口 javax.swing.JFrame:普通窗口 javax.swing.JWindow：无标题栏的窗口 javax.swing.JDialog：窗口间调用时的对话框 控件 常见以下控件： 按钮(JButton) 标签(JLabel) 文本框(JTextField) 多行文本框(JTextArea) 密码框(JPasswordField) 单选按钮(JRadioButton) 下拉列表框(JComboBox)：addItem 复选框(JCheckBox) 菜单：JMenuBar，JMenu，JMenuItem 为了更好的组织界面，通常：先将控件添加到面板(JPanel)上，再添加到窗口上 JPanel上的控件，默认FlowLayout布局：系统确定的大小，从左到右，从上到下按照顺序布局，不可更改。 如果要自由地安排布局，一般将JPanel的布局方式设置为null，通过setSize设置控件大小，setLocation设置控件位置。 渲染 颜色(Color)，字体(Font)，图标(Icon)…… 所有控件都可以设置背景颜色和前景颜色(字的颜色)： setBackground(Color c) setForeground(Color c) 颜色用java.awt.Color来表示 所有含文字的控件都可以设置字体； setFont(Font f) 字体用java.awt.Font来表示 Layout FlowLayout：流式布局，JPanel默认布局 从左到右，从上到下 GridLayout：网格布局 将界面划分成相等大小的块 BorderLayout：边界布局 分成东南西北中，每个方向最多放一个组件 null：空布局 事件处理 方式 事件(Event)是指用户为了交互而产生的键盘和鼠标动作 上面定义不严谨，程序出现异常，也可以被认为是一个事件 事件是一个对象 事件的处理者(Listener)必须有监听的能力 通常三步走：长耳朵，绑定，监听 编写一个类，implements相应的Listener，实现事件的响应（长耳朵） 将需要监听的控件和这个类的对象绑定（告诉它你要监听事件） 控件开始监听，一旦有该种事件发生，会实现事件的相应 常见Event-Listener Event和Listener都在java.awt.event包 ActionListener-ActionEvent：鼠标点击控件，文本框中回车 KeyListener-KeyEvent：操作键盘发生的事件 MouseListener-MouseEvent：通用的操作鼠标发生的事件；画图软件 MouseMotionListener-MouseEvent：鼠标拖动或移动事件 FocusListener-FocusEvent：控件得到聚焦","categories":[{"name":"Java学习","slug":"Java学习","permalink":"http://yoursite.com/categories/Java学习/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"Java面向对象","slug":"学习/Java学习/Java面向对象","date":"2019-12-26T16:00:00.000Z","updated":"2019-12-27T12:40:00.012Z","comments":true,"path":"2019/12/27/学习/Java学习/Java面向对象/","link":"","permalink":"http://yoursite.com/2019/12/27/学习/Java学习/Java面向对象/","excerpt":"","text":"概念 面向对象的三大特征： 封装(Encapsulation) 继承(Inheritance) 多态(Polymorphism) 面向对象(Object Oriented)是一个编程思想：将事件看成事件(过程)的集合还是物体(对象)的集合 类是对象的抽象 对象是类的实例 对象拥有两类内容： 成员变量：属性(Property, Member Variable, Field) 成员函数(方法)：功能(Member Function, Method) 对象的引用性质：Java中的对象名只是一个引用(指针)，或者是一个遥控器，并不代表其实际占据内存，只有通过&quot;.&quot;号才能访问到其真实内存中的数据 成员变量和成员函数 成员函数 目的：复用代码 参数传递方式： 简单数据类型采用值传递 primitive类型 引用数据类型采用引用传递 对象的引用，数组 函数重载(Overload) 允许多个函数名字相同，但是要满足要求 参数个数不同 个数相同，类型不同 个数相同，类型相同，但是不同类型的参数出现的顺序不同 函数的返回值不能作为重载的条件 函数重载也叫静态多态(Static Polymorphism) 构造函数(Constructor) 构造函数也是一种函数，为了强制对象初始化，但必须满足： 函数名与类相同 不含返回类型(并不是void) 特点： 对象实例化时自动调用一次 可以被重载 如果一个类没有定义任何构造函数，系统自动为其分配一个空的，不带参数的默认构造函数，如果定义了构造函数，默认构造函数自动失效(不会自动创建) 析构函数(Destructor) 对象结束其生命周期时或者该对象没有被引用，系统会执行析构函数 在java中，对象的内存在哪个时刻回收，取决于垃圾回收器何时运行 静态变量和静态函数 静态变量 默认情况下，各个成员都有自己独有的成员变量，占据不同内存。 而静态变量是该类所有对象公用的变量 访问方式：“对象名.变量名”，“类名.变量名”(推荐) 静态函数 静态函数只能访问静态变量，不能访问类中的普通成员变量。 建议用“类名.函数名”访问。 作用：一般情况下可以用来执行一些不隶属于任何一个特定对象的公共的工作。 封装(Encapsulation) 隐藏对象的属性和实现细节，仅对外公开接口 最大层面的封装：包 用包来管理类 如何把类放入包中 在文件头声明类所在的包：package 包名; Java中，包名一般名词，首字母小写； 如果包中还含有包，用.号隔开 如何使用包中的类 同一个包中的类直接使用 不同包中的类不能直接使用，需以下操作： import 另一个包中的类 import 类路径; import 包路径.*; 表示导入包中所有类（不含子包中的类） 被使用的类是一个public类 public类对包外可见，非public类只能在包内可见；public-类的类名必须与所在文件名相同 一个文件中，最多只能有一个public类 细节层面的封装：访问区分符 有些成员不适合其他类直接调用，这不安全。用访问区分符来管理成员的访问权限 在成员定义前面加上访问区分符：public，protected，default，private 访问权限如下： 访问权限 本类 同包类 外包子类 外包类 public √ √ √ √ protected √ √ √ × default √ √ × × private √ × × × 以上访问区分符适合成员变量和函数 default是一种包访问，外包不能访问 一般情况下，成员变量定义为私有(private),成员函数定义为公有(public)，如果涉及到继承，可以将成员定义为保护型 如果需要读取成员变量或者修改成员变量怎么做： setXXX函数和getXXX函数 也叫做setter和getter函数 继承(Inheritance) 概念 原因：通过继承，降低代码量，提高可维护性；定义共同协议 实现方式：extends关键字 性质： 不允许多重继承，一个类只能extends一次 所有的成员都可以被继承，但是要考虑访问区分符： 父类的private成员不能被继承 父类的default成员，不能被包外子类继承 成员变量可以被继承，作为子类的成员变量直接使用（属性） 成员函数可以被继承，作为子类的成员函数直接使用（功能） 本质：实例化子类对象时，系统会首先实例化父类对象 如果父类没有默认构造函数，子类必须用super()显式调用(必须写在第一行) 调用本类的其他构造函数this()也必须写在第一行，且不能与super()同时使用，因为this()中也会调用super()，使父类对象构造的两次 成员的覆盖(Override) 子类中重定义父类的成员，方法(参数一致，返回类型兼容) 覆盖是表现多态特性的具体做法 子类对象调用成员时，自动调用子类成员，父类成员不被调用。一定要调用父类成员，可以用super关键字。 super和this是相对的两个关键词，一个指代父类；一个指代自己 使用 执行 super. 调用父类的成员 super(参数列表) 调用父类构造函数 this. 调用本类中成员 this(参数列表) 调用本类中另一个构造函数 覆盖不允许缩小访问权限 Java中有一个类：Object类，是所有成员的父类 常见方法：equals(Object obj)，toString() 多态(Polymorphism) 概念 多种形态：某个东西，在不同情况下呈现出不同形态 动态多态的理论基础是：父类引用可以指向子类对象。 当父类引用调用被覆盖的成员时，调用的是子类成员，从子类向上找 作用： 函数形参为父类类型，实参为子类对象 函数返回类型是父类类型，函数中实际返回子类对象 父类和子类的类型转换 子类转化为父类 可以直接赋值 父类转化为父类 严格来说，无法转换 特殊情况：该父类原本是子类的对象，使用强制类型转换 “对象名 instanceof 类名” 可以判断对象类型 抽象(abstract) 抽象函数：将函数体去掉，定义为抽象函数 特点：必须在子类中被重写，否则报错，除非子类也是抽象类 含有抽象函数的类叫抽象类，必须用abstract修饰 特点： 抽象类必须用abstract修饰，抽象类不能被实例化，只能被继承 抽象类中含有抽象函数（包括继承的，也可以不含有），也可以含有普通函数（便于子类调用） 抽象函数必须在子类中被重写(注意权限不能缩小)，否则报错，除非子类也是抽象类 抽象类中不一定都是抽象函数，但是含抽象函数的类一定是抽象类 抽象类不能被实例化，但是它有构造函数(因为子类中会使用super()调用父类构造函数) 接口(interface) 特点： 全部是public抽象函数，默认public，abstract(可省略) 因此实现接口的类中重写方法必须是public，因为权限不能缩小 接口中定义的“变量”只能是静态public常量，系统默认使用public，static，final修饰，可以省略 一个类继承抽象类–&gt;实现（implements）接口 一个类继承一个父类同时实现多个接口 抽象类和接口的区别 参数 抽象类 接口 方法 可以有正常方法 只有抽象方法 实现 extends implements 构造 可以有 不能有 正常类 只有不能实例化 完全不同类型 修饰符 public、protected和default 默认修饰符是public，不能使用其他 main 可以有main且可以运行 不能有 接口可以extends接口，但不能implements接口，不能extends类 抽象类可以implements接口，也可以extends实体类(这个类必须有明确的构造函数)，因为抽象类也可以有实体函数 final关键字 修饰类：不能被继承 修饰函数：不能被重写 修饰成员变量：不能被改变(哪怕是同一个值)，用来定义常量","categories":[{"name":"Java学习","slug":"Java学习","permalink":"http://yoursite.com/categories/Java学习/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"存储器","slug":"学习/计组/存储器","date":"2019-12-25T16:00:00.000Z","updated":"2020-01-02T04:32:35.251Z","comments":true,"path":"2019/12/26/学习/计组/存储器/","link":"","permalink":"http://yoursite.com/2019/12/26/学习/计组/存储器/","excerpt":"","text":"概述 分类 按存储介质分类 半导体存储器：TTL，MOS(易失) 磁表面存储器 磁芯存储器 光盘存储器 按照存取方式 RAM(Random Access Memory) ROM(Read Only Memory) 串行访问存储器 按在计算机中的作用分类 层次结构 存储器三个主要特性的关系 缓存-主存层次和主存-辅存层次 主存储器 编址单位：字节 技术指标： 容量：主存存放二进制代码的总位数 速度： 存取时间：存储器的访问时间 存取周期：连续两次独立的存储器操作所需的最小间隔时间，比存取时间长，差个复原时间 带宽：位/秒(bit/s) 半导体存储芯片 容量：2地址线×数据线2^{地址线} \\times 数据线2地址线×数据线 译码驱动方式: 线选法 重合法 RAM 静态RAM(SRAM) 动态RAM(DRAM) 2ms(刷新周期) 内再生(刷新)，一行行进行 刷新方式： 集中刷新(有死区) 分散刷新(无死区) 异步刷新(两者结合)：刷新安排在指令译码阶段，不会出现死区 ROM 掩膜ROM：不能修改 PROM(一次性编程) EPROM(多次性编程) EEPROM(电可擦除) Flash Memory(闪速型存储器) 存储器与CPU的连接 存储器容量的扩展 位扩展(增加存储字长) 字扩展(增加存储字的数量) 字、位扩展 存储器与CPU的连接 地址线的连接 低位接存储芯片，高位作片选信号 数据线的连接 读/写命令线的连接 片选线的连接 合理选择存储芯片 其他：时序，负载 做题步骤： 写出对应二进制地址码 确定芯片的数量及类型 优先位扩展：字扩展要设计片选型号，而位扩展只需将数据线引出即可 RAM，ROM尽量选择外特性一致，简化连接，避免二级译码 分配地址线 确定片选信号 存储器的校验 编码的最小距离：任意两组合法代码之间的二进制位数的最少差异数 L - 1 = D + C L：最小距离；D：检错位数；C：纠错位数 汉明码是具有一位纠错能力的编码 汉明码的组成三要素 添加k位校验位：2^k ≥ n+k+1 [传输n位，分成k组] 检测位的位置：2^i (i=0,1,……) [这一位不与其他组共用] C1检测的g1：1，3，5，7，9……C_{1}检测的g_{1}：1，3，5，7，9……C1​检测的g1​：1，3，5，7，9…… C2检测的g2：2，3，6，7，10……C_{2}检测的g_{2}：2，3，6，7，10……C2​检测的g2​：2，3，6，7，10…… C4检测的g3：4，5，6，7，12……C_{4}检测的g_{3}：4，5，6，7，12……C4​检测的g3​：4，5，6，7，12…… C8检测的g4：8，9，10，11，12……C_{8}检测的g_{4}：8，9，10，11，12……C8​检测的g4​：8，9，10，11，12…… 检测位的取值：所在小组中承担的奇偶校验任务有关 汉明码纠错过程 形成新的检测位P[i]，和该组中1个数有关(奇偶校验决定，一般为偶校验) 提高访问速度的措施 采用高速器件 采用层次结构 Cache-主存 调整主存结构 单体多字：增加存储器的带宽 多体并行 高位交叉：顺序编址，各个体并行工作(适合存储器扩展，但不适合增加带宽) 低位交叉：各个体轮流编制，在不改变存取周期的前提下，增加存储器的带宽(流水线方式) 高性能存储芯片 SDRAM(同步RAM) RDRAM 带Cache的DRAM 集成了一个Cache，有利于猝发式读取 高速缓冲存储器 概述 避免CPU&quot;空等&quot;，程序访问局部性原理 Cache工作原理 主存和缓存的编址 主存和缓存按块存储，块大小相等，B为块长 命中和未命中 缓存有C块，主存有M块，M &gt;&gt; C 命中：主存块调入缓存，建立了对应关系 用标记记录与某缓存块建立了对应关系的主存块号 Cache命中率：CPU欲访问的信息再Cache中的比率 与Cache的容量和块长有关 块长取一个存取周期内从主存调出的信息长度 Cache-主存系统的效率 效率e与命中率有关 Cache的结构 Cache存储体 地址映射变换机构 替换机构 Cache的读写操作 读： 写：Cache和主存的一致性 写直达法：既写入Cache又写入主存。写操作时间就是访问主存的时间 写回法：只把数据写入Cache而不写入主存，但Cache数据被替换出去时才写回主存。写操作时间就是访问Cache的时间 Cache的改进 增加Cache的级数 统一缓存和分立缓存 Cache-主存的地址映射 直接映射 每个缓存块 i ———— 若干个主存块 每个主存块 j ———— 一个缓存块 把主存划分成若干个与Cache相等的区，然后每个区里的字块一一映射到Cache字块 主存地址 = 主存字块标记(区号)[t] + Cache字块地址[c] + 字块内地址[b] t + c = m 全相联映射 主存中的任一块可以映射到缓存中的任一块 主存地址 = 主存字块标记(m=t+c) + 字块内地址(b) 组相联映射 直接映射和全相联映射的结合 Cache被分成Q组，每组R块 某一主存块j 按 modQ 映射到缓存的第i组中的任一块 直接映射：给定的一个块只能放在一个组 全相联映射：给定的一个块可以放到这个组中任一块 替换算法 先进先出(FIFO) 近期最少使用(LRU)：较好的利用局部性原理 辅助存储器 概述 不与CPU直接交换信息 磁表面技术指标： 记录密度：道密度Dt，位密度Db 存储容量：C = n X k X s C为存储总量，n为盘面数，k为磁道数，s为磁道的二进制代码数 平均寻址时间：寻道时间+等待时间 平均等待时间：盘片旋转一周所需的时间的一半(即1转速×2\\frac{1}{转速 \\times2}转速×21​) 数据传输率：Dr = Db X V 误码率 磁记录原理和记录方式 磁记录原理 磁层表面被磁化的极性方式不同，以区别0和1 记录方式 归零制(RZ)：RZ记录&quot;1&quot;时，通以正向脉冲；记录&quot;0&quot;时，通以反向脉冲 不归零(NRZ)：NRZ记录时，始终有驱动电流，不是正向就是反向。变化才翻转(见变就翻) &quot;见1就翻&quot;的不归零制(NEZ1)：始终有电流，只有见&quot;1&quot;才翻转 调相制(PM)：又称相位编码(PE)，记录方式：记录&quot;1&quot;时，写电流由负变正；记录&quot;0&quot;时，写电流由正变负。电流变化出现在中间时刻。连续记录相同信息时，在每两个相同信息的交界处，电流反向；如果相邻信息不同，则电流不变向。 调频制(FM)：又称倍频制，以驱动电流变化的频率记录区别0，1。记录&quot;0&quot;时，电流不变；记录&quot;1&quot;时，电流中间时刻反向。交界处均反向一次。所以&quot;0&quot;变化一次，&quot;1&quot;变化两次 改进型调频制(MFM)：基本相同FM，但是MFM只有当连续记录两个或两个以上的&quot;0&quot;时，才在每位的起始位改变一次电流，不在每个起始点改变电流。","categories":[{"name":"计算机组成原理","slug":"计算机组成原理","permalink":"http://yoursite.com/categories/计算机组成原理/"}],"tags":[{"name":"计组","slug":"计组","permalink":"http://yoursite.com/tags/计组/"}]},{"title":"运算方法","slug":"学习/计组/运算方法","date":"2019-12-23T16:00:00.000Z","updated":"2020-01-02T03:27:40.235Z","comments":true,"path":"2019/12/24/学习/计组/运算方法/","link":"","permalink":"http://yoursite.com/2019/12/24/学习/计组/运算方法/","excerpt":"","text":"无符号数和有符号数 无符号数 寄存器的位数：反映无符号数的范围 0 ~ 2n2^n2n 有符号数 机器数和真值 符号&quot;数字化&quot;的数，称为机器数 带&quot;+&quot;,&quot;-&quot;符号的数，称为真值 原码表示法 符号位0表示正数，符号位1表示负数 数值位即真值的绝对值 整数的符号与数值之间用**逗号&quot;,&quot;**隔开 小数的符号位与数值之间用**小数点&quot;.&quot;**隔开 [+0]原(0.0)≠[−0]原(1.0)[+0]_{原}(0.0) \\neq [-0]_{原}(1.0)[+0]原​(0.0)​=[−0]原​(1.0)，原码的0有两种形式 补码表示法 补的概念：一个负数加上 “模” 即得该负数的补数 求补码： 正数：不变 负数：原码(除符号位)求反 + 1 (反码+1) [−1.0000]补=1.0000[-1.0000]_{补} = 1.0000[−1.0000]补​=1.0000，因为补码0只有一种，所以可以多表示一位数字 [+0]补(0.0)=[−0]补(0.0)[+0]_{补}(0.0) = [-0]_{补}(0.0)[+0]补​(0.0)=[−0]补​(0.0)，补码的0只有一种 反码表示法 补码和原码之间互相转换的中间过渡 求反码： 正数：不变 负数：原码(除符号位)求反 [+0]反(0.0)≠[−0]反(1.0)[+0]_{反}(0.0) \\neq [-0]_{反}(1.0)[+0]反​(0.0)​=[−0]反​(1.0)，反码的0有两种形式 三种机器数小结 最高位均为符号位。符号位和数值部分用逗号&quot;,“或小数点”.&quot;(书写时，实际不存在) 正值三码合一，即符号位&quot;0&quot;，数值部分为真值 负值三种方式均不同，但符号位均&quot;1&quot; 补码是原码的&quot;求反加1&quot; 反码是原码的&quot;每位求反&quot; 不论正负，[−y]补[-y]_{补}[−y]补​是：[y]补[y]_{补}[y]补​连同符号位在内，每位求反，末位加1 移码表示法 移码：在真值上加上一个常数 2n2^n2n，与 补码仅差一个符号位 ，将补码的符号位取反即得到移码 [+0]移(1.0)=[−0]移(1.0)[+0]_{移}(1.0) = [-0]_{移}(1.0)[+0]移​(1.0)=[−0]移​(1.0)，移码的0只有一种 定点表示和浮点表示 定点表示 小数点固定在某一位置的数为定点数 数值部分决定了定点机中数的表示范围 浮点表示 N=S×rjN = S \\times r ^ jN=S×rj S 尾数：小数，可正可负 j 阶码：整数，可正可负 r 基数：固定，与计算机有关，取2，4，8，16 …… 上溢中断，下溢为机器0 浮点数的规格化形式(原码) r = 2 ：尾数最高位为 1 r = 4 ：尾数最高2位不全为0 r = 8 ：尾数最高3位不全为0 基数不同，浮点数的规格化形式不同 浮点数的规格化 r = 2 左规：尾数左移 1 位，阶码减 1 右规：尾数右移 1 位，阶码加 1 基数 r 越大，可表示的浮点数的范围越大 基数 r 越大，浮点数的精度降低 规格化后范围变小 机器零： 当浮点数 尾数为 0 时，不论其阶码为何值按机器零处理 当浮点数 阶码等于或小于它所表示的最小数 时，不论尾数为何值，按机器零处理 IEEE 754标准：尾数为规格化表示，非 “0” 的有效位最高位为 “1”（隐含） 定点运算 移位运算 移位的意义：和加减配合，实现乘除 数值相对于小数点移动，而不是小数点移动 算术移位规则 正数：补0 负数： 原码：补0 补码：左移补0，右移补1 反码：补1 算术移位和逻辑移位 算术移位：无符号数 逻辑移位：有符号数 加减法 加法：A+B 整数：[A]补+[B]补=[A+B]补(mod2n+1)[A]_{补} + [B]_{补} = [A+B]_{补}(mod 2^{n+1})[A]补​+[B]补​=[A+B]补​(mod2n+1) 小数：[A]补+[B]补=[A+B]补(mod2)[A]_{补} + [B]_{补} = [A+B]_{补}(mod 2)[A]补​+[B]补​=[A+B]补​(mod2) 减法：A-B 转化为[−B]补[-B]_{补}[−B]补​，就变成了加法 连同符号位一起相加，符号位产生的进位自然丢掉 溢出判断 一位符号位判溢出 两个数符号相同，结果变号即溢出 两位符号位判溢出 双符号位相同，未溢出；不同则溢出 最高符号位代表其真正的符号 乘法运算 分析笔算乘法 符号位单独处理 乘数的某一个决定是否加被乘数 乘积位数扩大一倍 笔算乘法改进 乘法运算可用加和移位实现 由乘数的末位决定被乘数是否与原部分积相加，然后：➡1位形成新的部分积，同时：乘数➡1位(末位移丢)，空出的高位存放部分积的地位 被乘数只与部分积的高位相加 3个寄存器，其中2个具有移位功能；1个全加器 原码乘法 原码一位乘 乘积的符号位单独处理 x0⊕y0x_{0} \\oplus y_{0}x0​⊕y0​ 数值部分为绝对值相乘 x∗×y∗x^* \\times y^*x∗×y∗ 用 逻辑移位 的次数 (乘数位数) 判断乘法是否结束 原码两位乘 原码乘：符号位和数值位部分分开运算 两位乘：每次用 乘数的 2 位判断 原部分积，是否加和如何加被乘数 乘数yn−1yny_{n-1}y_{n}yn−1​yn​ 新的部分积 00 加&quot;0&quot;，➡2位 01 加1倍的被乘数，➡2位 10 加2倍的被乘数，➡2位 11 加3倍的被乘数，➡2位 如何加3倍的被乘数：先减一倍，再加四倍 绝对值的补码运算，采用补码右移：因为要用到减法，所以采用补码运算 用 算术移位 的次数判断乘法是否结束 比较 异同处 原码一位乘 原码两位乘 符号位 x0⊕y0x_{0} \\oplus y_{0}x0​⊕y0​ x0⊕y0x_{0} \\oplus y_{0}x0​⊕y0​ 操作数 绝对值 绝对值的补码 移位 逻辑右移 算术右移 移位次数 nnn n2\\frac{n}{2}2n​(n为偶数) 最多加法次数 nnn n2+1\\frac{n}{2}+12n​+1(n为偶数) n为奇数：最高位补0，就变成了偶数个 补码乘法 补码一位乘 Booth算法(被乘数、乘数符号任意) 小结 整数乘法与小数乘法完全相同 原码乘：符号位单独处理 补码乘：符号位自然形成 原码乘去掉符号位运算，即为无符号数乘法 浮点四则运算 浮点加减运算 对阶 求阶差 对阶原则：小阶向大阶看齐 尾数求和 规格化 定义：r = 2：12≤∣S∣≤1\\frac{1}{2} \\leq \\left| S \\right| \\leq121​≤∣S∣≤1 判断： 原码：不论正数、负数，第一数位为1 补码：符号位和第 一数位不同 特例： [−12]补=1.10..0[-\\frac{1}{2}]_{补} = 1.10..0[−21​]补​=1.10..0 不是规格化数 [−1]补=1.00..0[-1]_{补} = 1.00..0[−1]补​=1.00..0 是规格化数 左规：尾数左移一位，阶码减 1，直到数符和第一数位不同为止 右规：尾数溢出时，即尾数为：01.xxx或10.xxx时，尾数右移一位，阶码加 1 舍入：在对阶和右规过程中，可能出现尾数末位丢失引起误差，需考虑舍入 0舍1入法 恒置1法 浮点乘除运算 x=Sx×2jxx = S_{x} \\times 2^{j_{x}}x=Sx​×2jx​ y=Sy×2jyy = S_{y} \\times 2^{j_{y}}y=Sy​×2jy​ 乘法：x×y=(Sx×Sy)×2jx+jyx \\times y = (S_{x} \\times S_{y}) \\times 2^{j_{x}+j_{y}}x×y=(Sx​×Sy​)×2jx​+jy​ 除法：xy=SxSy×2jx−jy\\frac{x}{y} = \\frac{S_{x}}{S_{y}} \\times 2^{j_{x}-j_{y}}yx​=Sy​Sx​​×2jx​−jy​ 步骤： 阶码采用 补码定点加(乘法)减(除法) 运算 尾数乘除同定点运算 规格化","categories":[{"name":"计算机组成原理","slug":"计算机组成原理","permalink":"http://yoursite.com/categories/计算机组成原理/"}],"tags":[{"name":"计组","slug":"计组","permalink":"http://yoursite.com/tags/计组/"}]},{"title":"IO系统","slug":"学习/计组/IO系统","date":"2019-12-22T16:00:00.000Z","updated":"2020-01-01T04:14:26.804Z","comments":true,"path":"2019/12/23/学习/计组/IO系统/","link":"","permalink":"http://yoursite.com/2019/12/23/学习/计组/IO系统/","excerpt":"","text":"概述 I/O设备与主机信息传送的控制方式 程序查询 程序中断 DMA I/O设备 输入设备：键盘，鼠标，触摸屏…… 输出设备：显示器，打印机…… 其他：A/D，D/A…… 多媒体：VR…… I/O接口 概述 为什么要设置接口： 实现设备的选择 实现数据缓冲达到速度匹配 实现数据串——并格式转换 实现电平转换 传送控制命令 反映设备的状态（“忙”、“就绪”、“中断请求”） 功能和组成 总线连接方式的 I/O 接口电路 设备选择线 数据线 命令线 状态线 功能 组成 选址 设备选择电路 传送命令 命令寄存器、命令译码器 传送数据 数据缓冲寄存器(DBR) 反映设备状态 设备状态标记 状态标记：完成触发器D，工作触发器B，中断请求触发器INTR，屏蔽触发器MASK 接口类型 按数据 传送方式 分类 按功能 选择的灵活性 分类 按 通用性 分类 按数据传送的 控制方式 分类 程序查询方式 程序中断方式 DMA方式","categories":[{"name":"计算机组成原理","slug":"计算机组成原理","permalink":"http://yoursite.com/categories/计算机组成原理/"}],"tags":[{"name":"计组","slug":"计组","permalink":"http://yoursite.com/tags/计组/"}]},{"title":"总线","slug":"学习/计组/总线","date":"2019-12-15T16:00:00.000Z","updated":"2020-01-02T02:15:46.843Z","comments":true,"path":"2019/12/16/学习/计组/总线/","link":"","permalink":"http://yoursite.com/2019/12/16/学习/计组/总线/","excerpt":"","text":"系统总线 基本概念 总线是连接各个部件的信息传输线，是各个部件共享的传输介质 总线(Bus)是指计算机组件间规范化的交换数据（data）的方式，即以一种通用的方式为各组件提供数据传送和控制逻辑。 总线分类 片内总线：芯片内部的总线 系统总线：计算机各部件之间的信息传输线 数据总线：双向，与机器字长、存储字长有关 地址总线：单向，与存储地址、I/O地址有关 控制总线：有出 有入 通信总线：计算机系统之间或与其他系统之间的通信 串行，并行 总线特性及性能指标 特性 机械，电气，功能，时间 性能指标 总线宽度：数据线的根数 标准传输率：即总线带宽，每秒传输最大字节数(MBps/Mbps) 时钟，复用，信号线数，总线控制方式，其他指标(负载能力) 总线结构 单总线 只有一条系统总线 多总线 双总线 三总线(两种结构) 四总线 总线控制 控制方式： 链式查询方式 计数器定时查询方式 独立请求方式 总线传输周期： 申请分配阶段：主模块申请，总线仲裁决定 寻址阶段：主模块向从模块给出地址和命令 传输阶段：主模块和从模块交换数据 结束阶段：主模块撤销有关信息 总线通信四种方式 同步通信：由统一时标控制数据传送 异步通信：采用应答方式(互锁)，没有公共时钟标准 半同步通信：同步，异步结合 分离式通信：充分挖掘系统总线每个瞬间的潜力(效率最高，最复杂)","categories":[{"name":"计算机组成原理","slug":"计算机组成原理","permalink":"http://yoursite.com/categories/计算机组成原理/"}],"tags":[{"name":"计组","slug":"计组","permalink":"http://yoursite.com/tags/计组/"}]},{"title":"汇编伪操作","slug":"学习/汇编/汇编伪操作","date":"2019-12-13T16:00:00.000Z","updated":"2020-01-03T07:26:17.781Z","comments":true,"path":"2019/12/14/学习/汇编/汇编伪操作/","link":"","permalink":"http://yoursite.com/2019/12/14/学习/汇编/汇编伪操作/","excerpt":"","text":"处理器选择伪操作 这类伪操作一般放在程序的最前面，如不给出,则汇编程序默认值为 .8086 段定义伪操作 完整的段定义伪操作 1234段名 SEGMENT [定位类型] [组合类型] [使用类型] [‘类别’] …… …… ;语句序列段名 ENDS 段名是为该段起的名字，用来指出汇编程序为该段分配的存储区起始位置 定位类型：PARA(默认)，WORD，BYTE，PAGE。 段地址起始地址的限制，PARA限制16的整数倍 组合类型：PRIVATE(默认)，PUBLIC，COMMON，STACK，MEMORY(同PUBLIC)，AT 表达式 使用类型：USE16，USE32. 使用xx位寻址方式 类别：在引号中给出连接时组成的段组的类型名。在连接后形成的装入模块中，可使相同类别的段位置靠在一起。 假定伪指令ASSUME 格式：ASSUME 段寄存器：段名 [，段寄存器：段名] 功能：建立段寄存器与段之间的对应关系。该伪指令一般出现在代码段中。 只是建立对应关系，但没有赋值，还需要自己初始化段寄存器的值 其中段寄存器名必须是CS,DS,ES和SS中的一个。段名必须是由SEGMENT定义的段中的段名。 段组定义伪操作 格式：段组名 GROUP 数据段名1[，数据段名2……] 功能：汇编程序把各数据段组成一个段组，以便程序在访问各数据段时使用一个数据段寄存器DS。 数据定义及存储器分配伪操作 格式 [变量名] 助记符 操作数 [ , 操作数 , … ] [ ; 注释] 变量名必须是一个合法的标识符，可写可不写 助记符：DB（字节）、DW（字）、DD（双字）、DF（6字节）、DQ（四字）、DT（10字节） 操作数是定义内存单元时的初值表达式，一个定义语句可以有多个初值表达式，各表达式之间必须用逗号 ‘,’ 分开；如果某个存储单元没有初值表达式，则必须用一个问号 ‘?’ 来表示； 注：‘?’表示保留存储空间但不存入数据 注释可以不写 重复说明符DUP 一般形式：repeat_conut DUP(表达式，表达式……) repeat_conut是重复次数 (表达式，表达式……)是被重复的部分 表达式可以是存储单元的初值，也可以是另一个DUP式子(可以嵌套) 多个表达式要用逗号 ‘,’ 分开 强制属性操作符PTR 类似于C语言的强制类型转换，为临时属性 一般格式：数据类型 PTR 地址表达式 例如：MOV byte ptr[BX]，1H LABEL伪操作 同一个变量可以具有不同的类型属性，除了可以用PTR来定义外，还可以用LABEL伪操作来定义 一般格式：符号名 LABEL 变量类型 LABEL为当前地址的另一别称，不占内存空间 表达式赋值伪操作 等价语句 符号名 EQU 表达式 作用：左边的符号名代表右边的表达式 注意：等价语句不会给符号名分配空间，不能重名，也不能被重新定义 等号&quot;=&quot; 符号名＝数值表达式 汇编语言提供了 等号&quot;=&quot; 来定义符号常数的方法，即可用符号名代表一个常数。 数值表达式在汇编时应该可以计算出数值，它不能含有向前引用的符号名称。 用等号语句定义的符号可以被重复定义。 EQU和&quot;=&quot;的区别 由EQU伪指令定义后的符号名是不能重复再定义的 而“=”伪指令中定义的符号名可重复定义 地址计数器与对准伪操作 地址计数器 $ 作用：保存当前正在汇编的指令的地址 $ 用在伪操作的参数字段：表示地址计数器的当前值 ORG伪操作 作用：告诉汇编程序，本伪指令下面的内存变量从该“数值表达式”所指定的地址开始分配。 基数控制伪操作 RADIX 表达式 ; 规定无标记数的基数 其他 OFFSET运算符 格式：OFFSET 变量或标号 功能：分离出其后变量或标号的偏移地址。","categories":[{"name":"汇编语言","slug":"汇编语言","permalink":"http://yoursite.com/categories/汇编语言/"}],"tags":[{"name":"汇编","slug":"汇编","permalink":"http://yoursite.com/tags/汇编/"}]},{"title":"8086寻址方式","slug":"学习/汇编/8086寻址方式","date":"2019-12-12T16:00:00.000Z","updated":"2020-01-01T04:17:14.440Z","comments":true,"path":"2019/12/13/学习/汇编/8086寻址方式/","link":"","permalink":"http://yoursite.com/2019/12/13/学习/汇编/8086寻址方式/","excerpt":"","text":"有效地址EA 8086中把操作数的偏移地址称为有效地址(EA) EA = 基址 + (变址*比例因子) + 位移量 四种成分 16位寻址 32位寻址 位移量 0、8、16位 0、8、16、32位 基址寄存器 BX，BP 任何32位通用寄存器(包括ESP) 变址寄存器 SI，Di 除ESP以外的32位通用寄存器 比例因子 无 1、2、4、8 比例因子为固定值，其他三个成分都可正可负，以保证指针移动的灵活性 比例因子：386及后续机型新增的寻址方式中的一个术语，其值可以为1、2、4、8。 与数据有关的寻址方式 以MOV指令为例 立即寻址：MOV AX,3069H 寄存器寻址：MOV AL,BH 直接寻址：MOV AX,[2000H] 寄存器间接寻址：MOV AX,[BX] 寄存器相对寻址：MOV AX,COUNT[SI] 基址变址寻址：MOV AX,[BP][DI] 相对基址变址寻址：MOV AX,MASK[BX][SI] 立即数寻址 如：MOV AX, 3069H 操作数作为指令的一部分直接写在指令中，这种操作数成为立即数，这种寻址方式也成为立即数寻址方式 特点：操作数存放在存储器中，指令的下一单元即为立即操作数n。 寄存器寻址 如：MOV AL, BH 指令中要用到的操作数已经存储在某寄存器中，或把目标操作数存入某寄存器。把指令中指出所使用寄存器（即寄存器的助记符）的寻址方式成为寄存器寻址 特点：操作数直接存放在寄存器中，速度较快 直接寻址 如：MOV AX, [2000H] EA = 操作数 指令所要的操作数存放在内存中，指令中直接给出该操作数的有效地址 特点：操作数的有效地址只包含位移量一种成分 直接寻址的地址要写在”[]”内 寄存器间接寻址 如：MOV AX, [BX] EA = BX 操作数在存储器中，操作数的有效地址使用SI、DI、BX和BP等四个寄存器之一来指定 特点：有效地址在寄存器中，操作数在存储器中 寄存器相对寻址 如：MOV AX，COUNT[SI] (也可表示为 MOV AX, [COUNT+SI]) EA = COUNT + SI 操作数在存储器中，其有效地址是一个基址寄存器(BX、BP)或变址寄存器(SI、DI)的内容和指令中的8位/16位偏移量之和 特点：有效地址由两种成分组成 基址变址 寻址 如：MOV AX,[BP][SI](或MOV AX,[BP+SI]) EA = BP+SI 操作数存储在存储器中，其地址是一个基址寄存器（BX、BP）和一个变址寄存器（SI、DI）的内容之和 处理数组和表格，首地址放在基址寄存器(BX,BP)，而用变址寄存器(SI,DI)来访问数组的各个元素 相对基址变址寻址 如：MOV AX,MASK[BX][SI] EA = MASK+BX+SI 操作数存放于存储器中，其有效地址是由一个基址寄存器（BX、BP）、一个变址寄存器（SI、DI）和指令中的8位/16位偏移量之和 通常用于二维数组的寻址","categories":[{"name":"汇编语言","slug":"汇编语言","permalink":"http://yoursite.com/categories/汇编语言/"}],"tags":[{"name":"汇编","slug":"汇编","permalink":"http://yoursite.com/tags/汇编/"}]},{"title":"运算符重载","slug":"学习/C++学习/运算符重载","date":"2019-12-12T16:00:00.000Z","updated":"2019-12-27T12:45:42.497Z","comments":true,"path":"2019/12/13/学习/C++学习/运算符重载/","link":"","permalink":"http://yoursite.com/2019/12/13/学习/C++学习/运算符重载/","excerpt":"","text":"函数类型 operator 运算符名称(形参表) { 对运算符的重载处理 } 函数名是由 operator 和 运算符 组成的 运算符重载的规则 不允许用户自定义新的运算符 不允许重载的5个运算符： 符号 类型 . 成员访问运算符 * 成员指针访问运算符 :: 域运算符 sizeof 长度运算符 ?: 条件运算符 不能改变 操作数个数 不能改变 优先级 和 结合性 不能有默认参数 参数 至少有一个 是类对象（或者对象的引用） = 和 &amp; 不必重载 运算符重载的两个方式： 作为成员函数 可以少写一个函数参数 一般为单目操作符 =，[]，()，-&gt;只能作为成员函数重载 友元函数 一般为 双目操作符 的重载（为了普适交换律），以及 流插入 “&lt;&lt;” 和 流提取 “&gt;&gt;” 的重载 双目运算符的参数列表必须有 两个参数 不能是普通函数 单目运算符：++，–的重载 前增：Object operator ++ (); 后增：Object operator ++ ( int ); 为了让编译器区别前置和后置，在后置的声明中加入一个 虚参数 ，以示区别 而且后增返回的应该为变化前的对象，此时应该调用复制构造函数：123Object temp(*this);//进行++return temp; 流插入 “&lt;&lt;” 和 流提取 “&gt;&gt;” 的重载 必须作为 友元函数 ！ 传入两个参数：一个流参数，一个对象，均为 引用 如果要对 临时对象 (如返回对象)，进行 “&lt;&lt;”，此时要用const修饰引用的对象(ostream &amp;os,const Object &amp;obj)，因为临时对象为 右值且默认const属性, C++ 规定右值不能绑定到非 const 限定的左值引用。 返回的类型要为 流，以便于连续向输出/输出流 插入信息 &quot;&lt;&lt;&quot;的重载格式如下： 1234 ostream&amp; operator&lt;&lt; (ostream &amp;os,Object &amp;obj)&#123; os&lt;&lt;obj.members; return os;&#125; &quot;&gt;&gt;&quot;的重载格式如下： 1234istream&amp; operator&gt;&gt; (istream &amp;is,Object &amp;obj)&#123; is&gt;&gt;obj.members; return is;&#125; 类型转换函数 operator 类型名() {实现转换的语句} //operator double(); 将对象转换为double类型。至于怎么转换，自己定义 不能指定类型，没有参数 必须为成员函数，因为转换的主体是本类的对象","categories":[{"name":"C++学习","slug":"C-学习","permalink":"http://yoursite.com/categories/C-学习/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"}]},{"title":"汇编指令","slug":"学习/汇编/汇编指令","date":"2019-12-12T16:00:00.000Z","updated":"2020-01-04T09:28:09.107Z","comments":true,"path":"2019/12/13/学习/汇编/汇编指令/","link":"","permalink":"http://yoursite.com/2019/12/13/学习/汇编/汇编指令/","excerpt":"","text":"标志寄存器FLASGS ZF(Zero Flag) 零标志位，执行完相关指令后，其结果是否为0 为0则ZF=1；不为0则ZF=0 CF(Carry Flag) 进位标志位，当运行结果的最高有效位有进位（加法）或借位（减法）时，进位标志置1，即CF=1;否则CF=0 SF(Sign Flag) 运行结果最高位为1，则SF=1，否则SF=0 PF(Parity Flag) 当运行结果最低字节的“1”的个数为零或者偶数时，PF=1，否则，PF=0 OF(Overflow Flag) 若算术运算的结果有溢出则OF=1，否则OF=0 数据传送指令 MOV 中文名：传送指令 允许以下操作： MOV 寄存器，寄存器/内存单元/段寄存器/立即数 MOV 内存单元，寄存器/段寄存器/立即数 MOV 段寄存器，寄存器/内存单元 不允许以下操作： 4. 两个操作数类型不一样 例如源操作数是字节，而目的操作数是字 两个操作数不能都是内存单元的数 主存之间的直接传送不允许 段寄存器的操作限制： 不允许直接传立即数给段寄存器 不能直接用变量名，因为变量其实也是个立即数 不要直接改变CS值 不允许段寄存器之间的直接数据传送 PUSH 进栈操作，以一个字为例，系统自动完成两步操作： SP ⬅ SP-2 //堆栈指针减2 (SP+1,SP) ⬅ SRC //将数据压入堆栈 POP 出栈操作，弹出一个字为例，系统自动完成两步操作： 操作数 ⬅ SP SP ⬅ SP+2 功能：将栈顶内容弹至某一寄存器，段寄存器(CS除外)或存储器 XCHG XCHG OPR1, OPR2 功能：交换指令，OPR1，OPR2互换 LEA LEA Reg，Mem 功能：将一个内存变量的有效地址送给指定的寄存器 类型转换指令 CBW AL → AX 执行的操作： 若(AL)的最高有效位为0则 AH = 00H 若(AL)的最高有效位为1则 AH = 0FFH CWD AX → (DX,AX) 执行操作： 若（AX）的最高有效位为0，则（DX)= 0000H 若（AX）的最高有效位为1，则（DX)= 0FFFFH 算术指令 加法 重要的条件标志位：ZF，CF，SF，OF ZF，SF设置较为简单 CF：最高有效位是否有进位 OF：两个操作数符号(最高有效位)相同，结果与之相反则OF=1；否则OF=0 INC对符号位无影响 ADD 功能：DST ⬅ DST+SRC ADC 功能：带进位的加法，DST ⬅ DST+SRC+CF INC 功能：OPR ⬅ OPR+1 减法 CF：减数 &gt; 被减数，此时有借位，则CF=1；否则CF=0 OF：两个数符号(最高有效位)相反，而结果符号与减数相同，则OF=1；否则OF=0 DEC对符号位无影响 SUB 功能：功能：DST ⬅ DST-SRC DEC 功能：OPR ⬅ OPR-1 对CF标志位无影响 NEG 功能：求补，每位求反(包括符号位)后加1 OPR ⬅ 0 - OPR 因此，除了OPR=0，其他情况CF=1 CMP 功能：得到(OPR1-OPR2)的结果，改变标志位ZF或CF 乘法 无符号乘法：MUL SRC 有符号乘法：IMUL SRC 功能： 若是字节数据相乘，AL和SRC相乘的结果放在AX AX⬅AL*SRC 若是字数据相乘，(AX)和SRC相乘得到的双字数据，高字放入DX，低字放入AX DX,AX⬅AX*SRC 乘法中OF，CF使用来判断相乘的结果是什么类型。 字节相乘的结果是字节还是字。OF=CF=0为字节，OF=CF=1为字 字相乘的结果是字还是双字。OF=CF=0为字，OF=CF=1为双字 除法 无符号除法：DIV SRC 有符号除法：IDIV SRC 执行的操作(低位放商，高位放余数)： 字节操作： (AL)⬅(AX)/(SRC)的商 (AH)⬅(AX)/(SRC)的余数 字操作： (AX)⬅(DX,AX)/(SRC)的商 (DX)⬅(DX,AX)/(SRC)的余数 对标志位没影响，但也会产生溢出 可能产生编号为0的内部中断：除法错中断 逻辑指令 逻辑运算指令 AND 功能：两个操作数按位与操作，结果存入操作数 用途：该指令用于清除目的操作数中与源操作数中置0位对应的位 DST ⬅ DST &amp; SRC OR 功能：两个操作数按位或操作，结果放入操作数 用途：用于设置目的操作数中与源操作数置1位的对应位 DST ⬅ DST | SRC NOT 功能：按位取反 DST ⬅ ~DST XOR 功能：两个操作数按位异或，将结果放入操作数 DST ⬅ DST⊕SRC TEST 功能：两个操作数相与，但结果不保存，只根据其特征置条件码 OPR1 &amp; OPR2 注意 NOT不允许使用立即数，其他4条指令至少有一个操作数必须在寄存器中 NOT不影响符号位，其他4条指令 将CF，OF置0 ，AF无定义，而SF，ZF，PF根据结果来设置 移位指令 移位指令后面的数只能为 1，大于1的时候用cl 如：shr xxx,cl；shr xxx,1 算术移位(arithmetic) 算术移位指令有：算术左移SAL和算术右移SAR 指令格式为SAL/SAR OPR,CL/Imm 受影响的标志位：CF、OF、PF、ZF和SF(AF无定义) 功能： 算术左移SAL把目的操作数的低位向高位移，空出的低位补0 算术右移SAR把目的操作数的高位向低位移，空出的高位用最高位（符号位）填补 算术移位指令常用于带符号数*2或/2 逻辑移位(logical) 逻辑左移SHL和逻辑右移SHR它们的指令格式如下： SHL/SHR OPR, CL/Imm 受影响的标志位：CF(移出放在CF)、OF、PF、SF和ZF（AF无定义）。 逻辑左移/右移指令只有它们的移位方向不同，移位后空出的位都补0 逻辑移位指令常用于无符号数*2或/2 循环移位(rotate) 循环移位指令有： 循环：左移ROL，右移ROR； 带进位循环：左移RCL，右移RCR 指令的格式：ROL/ROR OPR, CL/Imm 受影响的标志位：CF和OF 循环左移/右移指令只是移位方向不同，它们移出的位不仅要进入CF，而且还要填补空出的位。 带进位循环移动将CF加入循环中 总结 无符号数：逻辑移位 有符号数：算术移位 逻辑左移和算术左移一致，均把移出的放在CF，末位补0 逻辑右位的方法是逻辑左移镜像 算术右移移出的放在CF，但是首位补符号位，而不是补0 串处理指令 方向标志 执行串处理指令时会根据DF(direction flag)来使地址自动增加/减少 CLD(DF=0)增加 和 STD(DF=1)减少 重复前缀指令REP 重复前缀指令是重复其后的字符串操作指令，重复的次数由CX来决定。 一般格式为：REP MOVS / STOS / LODS 相等重复前缀指令REPE(REPZ) 重复条件：CX != 0 &amp;&amp; ZF = 1 不等重复前缀指令REPNE(REPNZ) 重复条件：CX != 0 &amp;&amp; ZF = 0 串比较指令 CMPS 语句格式： CMPSB——字节串比较 CMPSW——字串比较 功能：将SI所指的源串中的一个字节（或字）存储单元中的数据与DI所指的目的串中的一个字节（或字）存储单元中的数据相减，并根据相减的结果设置标志，但结果并不保存 控制转移指令 无条件转移指令 包括：JMP、子程序调用和返回、中断的调用和返回指令 条件转移指令 分为三类: 基于无符号数的条件转移指令 基于有符号数的条件转移指令 基于特殊算术标志位的条件转移指令 12JXX LABEL ;条件满足：转移，(IP)⬅(IP)+位移量 ;条件不满足，顺序执行 操作数LABEL采用短转移，成为相对寻址方式 JXX不影响标志位，但要利用标志位。 根据单个条件标志的设置情况转移 指令助忆符 检测转移的条件 功能描述 JZ(JE) ZF=1 结果为零或相等则转移 JNZ(JNE) ZF=0 结果不为0或不等则转移 JS/JNS SF=1/SF=0 结果为负/正则转移 JO/JNO OF=1/OF=0 结果溢出/不溢出则转移 JP/JNP PF=1/PF=0 奇偶位为1/0则转移 无符号数的条件转移 Below，Equal，Above 指令助忆符 检测转移的条件 功能描述 JB/JNAE CF=1 小于时，或进位为1则转移 JNB/JAE CF=0 不小于，或进位为0转移 JBE/JNA CFvZF=1 小于等于则转移 JNBE/JA CF^ZF=0 不小于等于,即大于,则转移 有符号数的条件转移 Less，Equal，Greater 指令助忆符 检测转移的条件 功能描述 JL/JNGE SF⊕OF=1 小于则转移 JNL/JGE SF⊕OF=1 不小于，即大于等于转移 JLE/JNG ZF=1 or SF!=OF 小于等于则转移 JG/JNLE ZF=0 and SF=OF 不小于等于,即大于,则转移 循环指令 LOOP 指令格式：LOOP 短标号 执行过程：如果CX ≠ 0，转向“标号”所指向的指令，否则，终止循环，执行该指令的下一条指令 说明：使用LOOP可以代替以下两条指令： DEC CX JNE 短标号 其他 相等/为0循环指令 LOOPE/LOOPZ 不相等/不为零循环指令LOOPNE/LOOPNZ 子程序调用和返回 调用指令 CALL 类似JMP指令，但是不同于JMP，CALL指令需要保存返回地址(将其入栈) 返回指令 RET 将栈内保存的地址弹出，折返调用该子程序的位置 中断的调用和返回指令 中断指令 INT 一般格式：INT TYPE 其中：立即数TYPE是一个0~0FFH范围内的整数。 指令执行的步骤： 把标志寄存器压栈，清除标志位IF和TF； 把代码段寄存器CS和指令指针寄存器IP的内容压栈； IP ← TYPE4，CS ← TYPE4+2 溢出指令 INTO 当标志位OF为1时，引起中断。 中断返回指令 IRET 当一个中断服务程序执行完毕时，CPU将恢复被中断的现场，返回到引起中断的程序中。 该指令执行的过程基本上是INT指令的逆过程: 从栈顶弹出内容送入IP 再从新栈顶弹出内容送入CS 再从新栈顶弹出内容送入标志寄存器 中断和子程序的比较 相同之处：暂停当前程序的执行，转而执行另一程序段，当该程序段执行完时，CPU都自动恢复原程序的执行。 不同之处： 调用：子程序人为调用；中断不可预见(除了INT引起的中断) 实现方式：子程序调用是用CALL指令来实现的，但没有调用中断的指令，只有发出中断请求的事件（指令INT是发出内部中断信号，而不要理解为调用中断服务程序）； 返回方式：子程序RET；中断IRET 在通常情况下，子程序是由应用系统的开发者编写的，而中断服务程序是由系统软件设计者编写的。","categories":[{"name":"汇编语言","slug":"汇编语言","permalink":"http://yoursite.com/categories/汇编语言/"}],"tags":[{"name":"汇编","slug":"汇编","permalink":"http://yoursite.com/tags/汇编/"}]},{"title":"继承与派生","slug":"学习/C++学习/继承与派生","date":"2019-12-11T16:00:00.000Z","updated":"2019-12-27T12:45:45.117Z","comments":true,"path":"2019/12/12/学习/C++学习/继承与派生/","link":"","permalink":"http://yoursite.com/2019/12/12/学习/C++学习/继承与派生/","excerpt":"","text":"继承的三种方式： public private (默认) protected 三种继承方式的不同 继承方式 public protected private public public protected 不可访问 private private private 不可访问 protected protected protected 不可访问 tips： xx继承的话，访问权限必须 &lt;= xx 基类的private均不可访问 protected 成员不能在类外被访问 类里定义的默认成员变量和函数均为private 类默认为public 全局成员默认public 派生类的构成 从基类接受成员 调整从基类接受的成员。 变化访问权限 重写，同名即覆盖 新增成员 执行派生类构造函数的顺序： 调用 基类 构造函数，只与 声明的顺序 有关，和派生类中的调用顺序无关 调用 子对象 (对象中的对象) 构造函数 调用方法：子对象名 (参数表)，没有显式调用的话则为默认构造函数 再执行 派生类 的构造函数本身 虚基类(virtual)的作用：在继承间接共同基类时，只保存一份成员 C++编译系统只执行 最后的派生类对虚基类的构造函数的调用 ，而忽略虚基类其他的派生类。所以我们可以直接显式的调用虚基类的构造函数。 虚基类和抽象类的区别 虚基类式相对它的派生类而言，它可以是个普通的类，被虚继承才叫做虚基类 而抽象类是类中有一个以上的纯虚函数，只能用于继承，不能生成对象，但是能定义对象指针，然后指向派生类对象，实现多态性 基类和派生类的转换 只有public继承的类型才是真正的子类型 只能用 派生类对象对基类对象 赋值，反之不允许 因为基类有的派生类都有，而派生类有的基类不一定有 同一基类的不同派生类对象之间不能赋值","categories":[{"name":"C++学习","slug":"C-学习","permalink":"http://yoursite.com/categories/C-学习/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"}]},{"title":"DOS-21H","slug":"学习/汇编/DOS-21H","date":"2019-12-10T16:00:00.000Z","updated":"2020-01-03T08:01:28.034Z","comments":true,"path":"2019/12/11/学习/汇编/DOS-21H/","link":"","permalink":"http://yoursite.com/2019/12/11/学习/汇编/DOS-21H/","excerpt":"","text":"12MOV AH,xxHINT 21H 常用Dos功能调用： 单字符输入（01H号调用） 12MOV AH,01HINT 21H 从键盘输入字符的ASCII码送入寄存器AL中，并送显示器显示 单字符显示（02H号调用） 123MOV DL,待显示字符的ASCII码MOV AH,02HINT 21H 将DL寄存器中的字符送显示器显示 打印输出（05H号调用） 123MOV DL,待打印字符的ASCII码MOV AH,05HINT 21H 将DL寄存器中的字符送打印机打印 结束调用（4CH号调用） 12MOV AH,4CHINT 21H 终止当前程序并返回调用程序 显示字符串（09H号调用） 123LEA DX,待显示字符串的首偏移地址MOV AH,09HINT 21H 将当前数据区(DX为首地址)中以 ‘＄’ 结尾的字符串送显示器显示，一般把缓冲区设为全 ‘＄’ 字符串输入（0AH号调用） 123LEA DX,缓冲区的首偏移地址MOV AH,0AHINT 21H 从键盘上输入一字符串到用户定义的输入缓冲区(DX为首地址)中，并送显示器显示","categories":[{"name":"汇编语言","slug":"汇编语言","permalink":"http://yoursite.com/categories/汇编语言/"}],"tags":[{"name":"汇编","slug":"汇编","permalink":"http://yoursite.com/tags/汇编/"}]},{"title":"汇编小知识点","slug":"学习/汇编/汇编","date":"2019-12-10T16:00:00.000Z","updated":"2020-01-01T04:18:09.665Z","comments":true,"path":"2019/12/11/学习/汇编/汇编/","link":"","permalink":"http://yoursite.com/2019/12/11/学习/汇编/汇编/","excerpt":"","text":"bit(比特)：一个二进制位，电子计算机的最小的信息单元 Byte(字节)：一个字节，八个二进制位 Word(字)：两个字节，分为高位字节和地位字节，十六个二进制位 寻址能力：$ 2 ^ N(N为地址线宽度) $ 传输能力：数据线宽度 通用寄存器：通常用来存放一般性数据 16位：AX, BX, CX, DX 以上四个可以拆成两个8位寄存器，例如：AX = AH + AL，拆分使用的话，AH和AL是完全独立的寄存器，两者的数据不相关 为了区分不同数制： 十六进制：末尾加上H；如果首位位字母，补0 十进制：什么也不加 二进制：末尾加上B 8086CPU给出物理地址的方法 物理地址 = 段地址 x 16 + 偏移地址 上式合成20位地址，1MB的寻址能力 本质含义：用一个基础地址(段地址x16)和一个相对于基础地址的偏移地址相加。给出物理地址 段地址 x 16 ：将段地址左移4位即可 8086CPU可以分成16个段，每个段有64KB，总共1MB 段的概念： 内存并没有被划分成一个一个段，而只是将若干地址连续的内存单元看作一个段 段寄存器：提供段地址 16位：CS(代码)，DS(数据)，SS(堆栈)，ES(附加) CS和IP为8086CPU中两个最关键的寄存器： CS为代码段寄存器 IP为指令指针寄存器 8086机中，任何时刻，CPU将 CS:IP (CS*16 + IP) 指向的内容当作指令执行。 读取一条指令后，IP = IP + 所读取指令长度，从而指向下一条指令 要通过Jump指令修改，普通的MOV指令不能修改 内存中字的存储：高高低低 高地址放高位，低地址放低位 字单元：存放一个字型数据(16位)的内存单元 起始地址为N的字单元成为N地址字单元 DS和[address] DS为数据段寄存器，存放数据的段地址 address为偏移地址,[address]表示一个偏移地址为address的内存单元 SS和SP SS为栈顶的段寄存器 SP为指向栈底的指针，可以修改 任何时刻，SS:SP指向栈顶元素 8086CPU只记录栈顶的位置，栈空间的大小要自己管理 POP和PUSH指令只修改SP指针 初始化栈的操作 mov ax,1000H mov ss,ax mov sp,0010H ;设置栈顶的偏移地址，因栈为空，SP指向栈最底部单元的下一单元 子程序格式： 过程名 PROC [NEAR/FAR] ┆ 过程名 ENDP 其中PROC表示过程定义开始，ENDP表示过程定义结束。过程名是过程入口地址的符号表示 一般过程名同标号一样，具有三种属性，即段属性、偏移地址属性以及类型属性（NEAR 或 FAR) 过程属性确定原则： NEAR：在同一代码段中 FAR：在不同代码段中 主程序MAIN应该为FAR属性 CALL和RET完成调用和返回 CALL调用时使返回地址入栈 RET时应能使返回地址正确出栈 保护现场和恢复现场 利用堆栈来实现 123456789101112PROG PROC PUSH AX PUSH BX PUSH CX PUSH DX ;保护现场 POP DX POP CX POP BX POP AX ;恢复现场 RET ;返回断点处PROC ENDP 参数传递方法 通过寄存器传递参数 如果过程和调用在同一源文件（同一程序模块中），则过程可以直接访问模块中的变量 通过地址表传递参数 通过堆栈传送参数或参数地址 多个模块间参数传递 public 符号,符号…… 说明其后的符号是全局符号。全局符号能被其他模块引用。 extrn 符号:类型,符号:类型…… 说明在本模块中需要引用的、由其他模块定义的符号，即外部符号。","categories":[{"name":"汇编语言","slug":"汇编语言","permalink":"http://yoursite.com/categories/汇编语言/"}],"tags":[{"name":"汇编","slug":"汇编","permalink":"http://yoursite.com/tags/汇编/"}]},{"title":"多态性与虚函数","slug":"学习/C++学习/多态性与虚函数","date":"2019-12-10T16:00:00.000Z","updated":"2019-12-27T12:45:45.961Z","comments":true,"path":"2019/12/11/学习/C++学习/多态性与虚函数/","link":"","permalink":"http://yoursite.com/2019/12/11/学习/C++学习/多态性与虚函数/","excerpt":"","text":"静态多态性：函数重载 动态多态性：运行阶段调用被派生类重写的函数，通过虚函数实现 派生类对象可以代替基类对象向基类对象的引用初始化或赋值 派生类的对象可以初始化基类对象 虚函数：基类中声明函数是 虚拟的 ，并不是实际存在的函数，然后在 派生类中才正式定义 此函数 但是，在基类中也可以写出定义，以供基类对象调用，即虚函数可以有定义内容 在基类中没有定义的函数可以作为纯虚函数声明 纯虚函数：基类对象不会使用该函数，返回值也没有意义，可以只给出函数的原型，并在末尾加上 “=0” virtual 函数类型 函数名 (参数表列) = 0； 抽象类 定义该类的唯一目的是：用它作为基类去建立派生类 凡是包含 纯虚函数 的类都是抽象类 不能定义对象，但是能定义对象指针","categories":[{"name":"C++学习","slug":"C-学习","permalink":"http://yoursite.com/categories/C-学习/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"}]},{"title":"类和对象","slug":"学习/C++学习/类和对象","date":"2019-12-09T16:00:00.000Z","updated":"2019-12-27T12:45:43.932Z","comments":true,"path":"2019/12/10/学习/C++学习/类和对象/","link":"","permalink":"http://yoursite.com/2019/12/10/学习/C++学习/类和对象/","excerpt":"","text":"声明对象的两种方式： Object obj(参数表/为空); 在栈上 Object *pObj = new Object(参数表/为空); 在堆上，这个要记得delete释放 默认构造函数种类： 没有任何参数，如：Object(); 所有参数都有默认值，如：Object(int x = 0); 两者不能同时共存，一个类只能有一个默认构造函数 只能有一个析构函数 析构函数的作用： 不是删除对象，而是撤销对象占用的内存之前，完成一些清理工作 调用时间： 生命期结束时，和变量类似 构造函数和析构函数的调用顺序： 先构造的后析构，后构造的先析构 类似于栈，先进后出 子类构造函数必须调用父类的构造函数 父类有无参构造函数，会自动调用 父类无无参构造函数，必须显式调用，否则报错（Java也是） 虚基类的构造函数最先调用 对于派生类的构造函数，在定义对象时构造函数的执行顺序为： 虚基类的构造函数 基类的构造函数 成员对象的构造函数 派生类本身的构造函数 若一个子类虚继承了两个父类，这两个父类有着共同父类，那么调用构造函数的时候，只调用一次，因为虚继承只保留一份成员 一个对象能含有多个子对象，因为有可能同一个构造函数调用了多次 声明对象数组时候，调用n次构造函数(与Java不同)，声明抽象类数组的时候，应该为Object *objs[n] 编译器不会自动生成默认构造函数，除非迫不得已 例如：基类有构造函数，而派生类没有，编译器才会生成一个派生类的构造函数 构造函数不能为虚函数，析构函数可以是 对象指针就是对象的起始空间 声明对象指针时，注意：Object *p()和(Object *p)()不一样，结合优先级 第一个返回一个void指针，等同于void(Object *(p())) 第二个才是返回一个对象指针 常对象，常对象成员： 常对象：Object const obj(…) 能访问数据成员，但是不能修改 只能访问常成员函数 常数据成员：const int i 只能用构造函数的参数初始化，其他任何函数都不能修改 常成员函数：void get() const //const放在函数名和括号后面 可以引用，但是不能改变值 指向对象的常指针 和 指向常对象的指针 类名 * const 指针名，不能改变指向 const 类名 *指针名，不能改变对象的值 一个常对象只能用常对象指针指向 常对象指针也可以指向别的值，但是不能改变该对象 常对象只能调用常成员函数 this指针：指向本类对象的指针，它的值是当前被调用的成员函数所在的对象的起始地址 名字固定 区分对象 复制构造函数：Object(const Object &amp; obj) Object obj1 = obj2; //复制构造函数默认被调用 return obj; //复制构造函数也被调用，生成一个临时对象 void fun(Object &amp;obj); //此时也调用了复制拷贝函数，生成了一个临时对象 临时对象 以值的方式给函数传参 类型转换 函数需要返回对象时 左值和右值 区别在于：能否获取地址 左值：最早的c++中，左值的定义表示的是可以获取地址的表达式，它能出现在赋值语句的左边，对该表达式进行赋值。但是修饰符const的出现使得可以声明如下的标识符，它可以取得地址，但是没办法对其进行赋值： 右值：右值表示无法获取地址的对象，有常量值、函数返回值、Lambda表达式等。无法获取地址，但不表示其不可改变，当定义了右值的右值引用时就可以更改右值。 静态成员（static） 静态数据成员 所有对象公用 可以初始化，但是只能在类外初始化，不能用构造函数初始化，如果时private，也要在类外，在对应的cpp和h文件中初始化 数据类型 类名::静态数据成员 = 初值; //初始化时不用加static 静态成员函数 不能访问非静态成员 类的一部分，而不是对象的一部分 友元函数（friend） 可以访问这个类的private成员 可以为普通函数或者成员函数 还有一个友元类，友元类可以访问该类中所有成员 破坏封装性和隐蔽性，但是能提高程序效率 类模板（template） template &lt;typename/class T&gt; 类模板是类的抽象，类是类模板的实例 类模板 ⬅ 类 ⬅ 对象 类模板函数的声明和定义要放在一起，否则会链接错误 转换构造函数：只能有 一个形参，将该形参转换为对象的某个数据，自定义如何转换","categories":[{"name":"C++学习","slug":"C-学习","permalink":"http://yoursite.com/categories/C-学习/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"}]},{"title":"最短路径和最小生成树","slug":"算法之旅/最短路径和最小生成树","date":"2019-11-26T13:09:24.000Z","updated":"2019-11-30T03:45:07.797Z","comments":true,"path":"2019/11/26/算法之旅/最短路径和最小生成树/","link":"","permalink":"http://yoursite.com/2019/11/26/算法之旅/最短路径和最小生成树/","excerpt":"","text":"学习数据结构的时候一直忘记了区分这两个，现在正是用博客记录一下。 一、区别 最小生成树能保证整个拓扑图的 所有路径权值之和最小 ，但是不能保证 任意两点间是最短路径 最短路径是从 一点 出发，到达目的地的路径权值和最小 二、实现算法 最短路径 Dijkstra算法 指定一个节点为初始点，将其看作一个 集合S ，剩余的点看作 另一个集合U 根据初始点，求出到其他点的距离 d[i]（若相邻，则为边的权值；若不相邻，则为 ∞ ） 选择最小的d[i]，并将其加入集合S，在U中去除它，暂时用x标记 再根据x，更新跟x相邻点y的d[y]的值：d[y] = min{ d[y], d[x] + w[x][y] }，则个操作有可能把距离调小，也有可能没变化，因而称为松弛操作 重复3，4两步操作，直至集合S包括所有的点，即集合U为空集时，求得初始点到其他所有点的最短路径 时间复杂度 O(e*logv) 最小生成树 Prim算法 选择任意节点为起始点，加入点集合V，初始化边集合E为空 选取集合V中的点到剩余节点的最小权值边，加入E，然后把该边连接的节点加入V 重复以上步骤，直至集合V包括所有的节点 所求的 {V，E} 就是最小生成树 时间复杂度取决于图的存储方式 邻接矩阵 O(v^2) 邻接表 O(e*logv) Kruskal算法 新建图 {V,E}，V有原来图的所有顶点，而 E为空集，因而每个节点自成一个连通分量 在原图的边中选择权值最小的边 若该边依附的顶点落在新建图中 不同的连通分量，则将此边加入E 否则舍去此边，寻找下一条权值最小的边 以此类推，直至新建图 所有的节点在同一连通分量 时间复杂度 O(eloge)","categories":[{"name":"算法之旅","slug":"算法之旅","permalink":"http://yoursite.com/categories/算法之旅/"}],"tags":[{"name":"图论","slug":"图论","permalink":"http://yoursite.com/tags/图论/"}]},{"title":"字符串运算","slug":"算法之旅/LeetCode/字符串运算","date":"2019-11-10T09:02:58.000Z","updated":"2019-11-10T09:14:28.237Z","comments":true,"path":"2019/11/10/算法之旅/LeetCode/字符串运算/","link":"","permalink":"http://yoursite.com/2019/11/10/算法之旅/LeetCode/字符串运算/","excerpt":"实现字符串的加，乘法","text":"实现字符串的加，乘法 一. 加法利用双指针，和人工的竖式运算相同 二. 乘法有两个版本： 版本一为竖式运算普通版 版本二是优化版的竖式运算。 该算法是通过两数相乘时，乘数某位与被乘数某位相乘，与产生结果的位置的规律来完成。具体规律如下： 乘数 num1 位数为 M，被乘数 num2 位数为 N， num1 x num2 结果 ans 最大总位数为 M+N，最小位数为 M+N-1 num[i] x num[j] 的结果 temp (为两位数，“0x&quot;或者&quot;xy”),其第一位位于 ans[i+j]，第二位位于 ans[i+j+1] 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061public static String addStrings(String num1, String num2)&#123; StringBuilder sb = new StringBuilder(\"\"); int i = num1.length()-1, j = num2.length()-1; int carry = 0; while(i &gt;= 0 || j &gt;= 0)&#123; int n1 = i &gt;= 0 ? num1.charAt(i) - '0' : 0; int n2 = j &gt;= 0 ? num2.charAt(j) - '0' : 0; int temp = n1 + n2 + carry; carry = temp / 10; sb.append(temp % 10); i--;j--; &#125; if(carry==1) sb.append(1); return sb.reverse().toString();&#125;public static String multiply(String num1, String num2) &#123; if (num1.equals(\"0\") || num2.equals(\"0\")) return \"0\"; String ans = \"0\"; for (int i = num2.length() - 1; i &gt;= 0; i--)&#123; int carry = 0; int n2 = num2.charAt(i) - '0'; StringBuilder sb = new StringBuilder(\"\"); for (int j = 0; j &lt; num2.length()-i-1;j++)//补零 sb.append(\"0\"); for (int k = num1.length() - 1; k &gt;= 0; k--)&#123;//计算 n2*num1 int n1 = num1.charAt(k) - '0'; int temp = n1 * n2 + carry; sb.append(temp%10); carry = temp/10; &#125; if(carry &gt; 0) sb.append(carry); ans = addStrings(ans, sb.reverse().toString()); &#125; return ans;&#125;public static String multiplyPlus(String num1, String num2)&#123; if (num1.equals(\"0\") || num2.equals(\"0\")) return \"0\"; int[] ans = new int[num1.length() + num2.length()]; for (int i = num1.length() - 1; i &gt;= 0; i--) for (int j = num2.length() - 1; j &gt;= 0; j--)&#123; int n1 = num1.charAt(i) - '0'; int n2 = num2.charAt(j) - '0'; if(n1 == 0 || n2 ==0) continue; int temp = n1 * n2 + ans[i+j+1]; ans[i+j+1] = temp % 10; ans[i+j] += temp / 10; &#125; StringBuilder result = new StringBuilder(); for (int i = 0; i &lt; ans.length; i++) &#123; //两个数相乘，位数是n+m(全9)或者n+m-1(只有一个1)，因此只有i=0的时候，才有可能抛弃一位0 if (i == 0 &amp;&amp; ans[i] == 0) continue; result.append(ans[i]); &#125; return result.toString();&#125;","categories":[{"name":"算法之旅","slug":"算法之旅","permalink":"http://yoursite.com/categories/算法之旅/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://yoursite.com/tags/LeetCode/"},{"name":"字符串","slug":"字符串","permalink":"http://yoursite.com/tags/字符串/"}]},{"title":"最长的回文子串","slug":"算法之旅/LeetCode/最长的回文子串","date":"2019-11-09T08:05:31.000Z","updated":"2019-11-10T08:59:34.923Z","comments":true,"path":"2019/11/09/算法之旅/LeetCode/最长的回文子串/","link":"","permalink":"http://yoursite.com/2019/11/09/算法之旅/LeetCode/最长的回文子串/","excerpt":"给定一个字符串 s，找到 s 中最长的回文子串。","text":"给定一个字符串 s，找到 s 中最长的回文子串。 暴力法 找出所有的子串，判断它是不是回文串 时间复杂度O(n^3) 暴力法优化(动态规划) 首先定义一个二维数组 P(i,j), 接下来 P(i,j) = (P(i+1,j-1) &amp;&amp; S[i]==S[j]) 因此，我们不需要去判断S[i,j]是不是回文串，而是通过P(i+1,j-1)和S[i]==S[j]判断，这样时间复杂度减少了O(n)，利用动态规划，空间换时间 求 长度为 1 和长度为 2 的 P(i,j) 时不能用上边的公式，因为我们代入公式后会遇到 P[i][j] 中 i &gt; j 的情况，比如求 P[1][2] 的话，我们需要知道 P[1+1][2-1]=P[2][1]P[1+1][2−1]=P[2][1] ，而 P[2][1]P[2][1] 代表着 S[2,1] 是不是回文串，显然是不对的，所以我们需要单独判断。 所以我们先初始化长度是 1 的回文串的 P[i,j]，这样利用上边提出的公式 P(i,j)=(P(i+1,j−1)&amp;&amp;S[i]==S[j])，然后两边向外各扩充一个字符，长度为 3 的，为 5 的，所有奇数长度的就都求出来了。 同理，先初始化长度为2的回文串，然后所有偶数长度也能求出 代码实现 12345678910111213141516171819202122public String longestPalindrome(String s) &#123; int length = s.length(); boolean[][] P = new boolean[length][length]; String ans = \"\"; int ansLen = 0; for(int len = 1; len &lt;= length; len++)&#123;//遍历所有长度的子串，1~length for(int start = 0; start &lt; length; start++)&#123; int end = start + len - 1; if(end &gt;= length)//越界 break; P[start][end] = (len==1 || len == 2 || P[start+1][end-1]) &amp;&amp; s.charAt(start) == s.charAt(end); if(len&gt;ansLen &amp;&amp; P[start][end])&#123; ansLen = len; ans = s.substring(start,end+1); &#125; &#125; &#125; return ans;&#125; 中心扩散法 事实上，只需使用恒定的空间，我们就可以在O(n^2)的时间内解决这个问题。 我们观察到回文中心的两侧互为镜像。因此，回文可以从它的中心展开，并且只有 2n−1 个这样的中心。 你可能会问，为什么会是 2n−1 个，而不是 n 个中心？原因在于所含字母数为偶数的回文的中心可以处于两字母之间的间隙（例如 “abba” 的中心在两个 ‘b’ 之间）。 代码实现 12345678910111213141516171819202122232425262728public String longestPalindrome(String s) &#123; if (s == null || s.length() &lt; 1) return \"\"; int start = 0, end = 0; for (int i = 0; i &lt; s.length(); i++) &#123; int len1 = expandAroundCenter(s, i, i);//字符 int len2 = expandAroundCenter(s, i, i + 1);//间隙 int len = Math.max(len1, len2); if (len &gt; end - start) &#123; start = i - (len - 1) / 2; end = i + len / 2; &#125; &#125; return s.substring(start, end + 1);&#125;private int expandAroundCenter(String s, int left, int right) &#123; //left == right，则以字符为中心，传出一个奇数 //反之，以i，j的间隙为中心，传出一个偶数 int L = left, R = right; while (L &gt;= 0 &amp;&amp; R &lt; s.length() &amp;&amp; s.charAt(L) == s.charAt(R)) &#123; L--; R++; &#125; // 这里要小心，跳出 while 循环时，已经不满足 s.charAt(L) == s.charAt(R) // 因此L，R与实际匹配的位置多了一次自增自减，因此要 R-L-1,不然原本应该为 R-L+1 return R - L - 1;&#125; Manacher(马拉车) 算法 TBD","categories":[{"name":"算法之旅","slug":"算法之旅","permalink":"http://yoursite.com/categories/算法之旅/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://yoursite.com/tags/LeetCode/"},{"name":"字符串","slug":"字符串","permalink":"http://yoursite.com/tags/字符串/"}]},{"title":"LeeCode LCP","slug":"算法之旅/LeetCode/LeeCode-LCP","date":"2019-11-06T13:00:32.000Z","updated":"2019-11-10T08:59:52.835Z","comments":true,"path":"2019/11/06/算法之旅/LeetCode/LeeCode-LCP/","link":"","permalink":"http://yoursite.com/2019/11/06/算法之旅/LeetCode/LeeCode-LCP/","excerpt":"LeetCode LCP","text":"LeetCode LCP LCP1 题目 小A和小B在玩猜数字。小B每次从 1, 2, 3 中随机选择一个，小A每次也从 1, 2, 3 中选择一个猜。他们一共进行三次这个游戏，请返回小A猜对了几次？ 代码 123456789public int game(int[] guess, int[] answer) &#123; /*int count = 0; for(int i = 0 ; i &lt; 3; i++) if(guess[i] == answer[i]) count++; return count;*/ //用循环时间复杂度较高 return (guess[0]==answer[0]?1:0)+(guess[1]==answer[1]?1:0)+(guess[2]==answer[2]?1:0);&#125; LCP2 题目 有一个同学在学习分式。他需要将一个连分数化成最简分数，你能帮助他吗？ 输入的cont代表连分数的系数（cont[0]代表上图的a0，以此类推）。返回一个长度为2的数组[n, m]，使得连分数的值等于n / m，且n, m最大公约数为1。 不需要约分 假设a+nda+\\frac{n}{d}a+dn​中的 n和d已经约分， 通分后：a∗d+nd\\frac{a*d+n}{d}da∗d+n​ 如果需要约分，那么 ad+n 和 d 能写成 xc，y*c，c是公约数，且不为1 x∗c=a∗d+n=a∗(y∗c)+nx*c = a*d+n = a*(y*c)+n x∗c=a∗d+n=a∗(y∗c)+n 那么 n=(x−a∗y)∗cn = (x - a*y)*cn=(x−a∗y)∗c ，又 d=y∗cd = y*cd=y∗c ，所以 n与d有非1的公约数，与假设矛盾，因此：a∗d+nd\\frac{a*d+n}{d}da∗d+n​不需要约分 规律 代码 12345678910public int[] fraction(int[] cont) &#123; int up = 1, down = cont[cont.length-1]; int temp; for(int i = cont.length-2; i &gt;=0 ; i--)&#123; up += down*cont[i]; temp = up; up = down; down = temp; &#125; return new int[] &#123;down,up&#125;;&#125; LCP3 题目 思路 判断终点是否在路径内，如果没有，就直接 return false，如果没有接着判断 先删除在目标后面障碍，因为在目标后面无需再遍历，然后遍历障碍数组，判断是否有障碍在路径内，如果有则 return false 以上全不 false 的话，就可返回 true 写一个判断方法 reach 更加方便，但是Java不能方法内写方法，所以传入较多的参数 啦啦啦 代码实现 1234567891011121314151617181920212223242526272829303132333435363738394041public static boolean robot(String command, int[][] obstacles, int x, int y) &#123; char[] cmd = command.toCharArray(); int r = 0, u = 0; //String转化为char[]数组容易遍历 for (char c : cmd) &#123; if (c == 'U') u++; else r++; &#125; if (!reach(r, u, x, y, cmd)) return false; //逻辑上删除在目标后面的障碍 int index = 0; for (int i = 0; i &lt; obstacles.length; i++) if (obstacles[i][0] &lt;= x &amp;&amp; obstacles[i][1] &lt;= y) &#123; obstacles[index][0] = obstacles[i][0]; obstacles[index][1] = obstacles[i][1]; index++; &#125; //判断目标前面的障碍是否在路径上 for (int i = 0; i &lt; index; i++)&#123; if (reach(r, u, obstacles[i][0], obstacles[i][1], cmd)) return false; &#125; return true;&#125;public static boolean reach(int r, int u, int x, int y, char[] cmd)&#123; //求出最小的循环次数 int i = Math.min(x/r,y/u); int nx = i*r, ny = i*u; for (char c : cmd)&#123; if (nx == x &amp;&amp; ny == y) return true; if(c == 'U') ny+=1; else nx+=1; &#125; return false;&#125; LCP4 题目 思路 这是求 二分图的最大匹配 ，用到的是匈牙利算法，CSDN上有个趣写算法系列之–匈牙利算法，讲的很形象 代码实现 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364private boolean[][] board;//棋盘，false代表坏点private int[][] dir = &#123;&#123;-1,0&#125;, &#123;0,-1&#125;, &#123;1,0&#125;, &#123;0,1&#125;&#125;;//上下左右四个顶点private int[] link;//link[v2] = v1,表示目前v1，v2相连private boolean[] visit;//查找顶点是否被访问过public int domino(int n, int m, int[][] broken)&#123; if (broken.length == 0 )&#123;//棋盘无坏点，直接返回 棋盘个数/2 return n * m &gt;&gt; 1; &#125; board = new boolean[n][m]; for(boolean[] i : board)&#123;//棋盘全部初始化为true Arrays.fill(i,true); &#125; for(int[] i : broken)&#123;//坏点设为false board[i[0]][i[1]] = false; &#125; return hungary();&#125;private int hungary()&#123;//匈牙利算法，返回最大匹配数 int maxOfMatch = 0; int n = board.length, m = board[0].length; visit = new boolean[n*m];//用一维数组存储二维数组 link = new int[n*m]; Arrays.fill(link, -1); for (int r = 0; r &lt; n; r++) &#123;//遍历v1中的点 for (int c = ((r&amp;1) == 0 ? 0 : 1); c &lt; m; c+=2)&#123;//让遍历的点不相邻 if (board[r][c])&#123; Arrays.fill(visit,false); if (find(r,c))&#123; maxOfMatch++; &#125; &#125; &#125; &#125; return maxOfMatch;&#125;private boolean find(int row, int col)&#123; int n = board.length, m = board[0].length; for (int[] d : dir)&#123; int r = row + d[0]; int c = col + d[1]; if(r &lt; 0 || c &lt; 0 || r &gt;= n || c &gt;= m)&#123;//越界 continue; &#125; int v2 = r * m + c; if (board [r] [c] &amp;&amp; !visit[v2])&#123; visit[v2] = true; if (link[v2] == -1 || find(link[v2]/m, link[v2]%m))&#123;//因为link是用一维数组存储二维数组 link[v2] = row * m + col; //因此row = link[v2]/m, col = lin[v2]%m，由左式可知 return true; &#125; &#125; &#125; return false;&#125;","categories":[{"name":"算法之旅","slug":"算法之旅","permalink":"http://yoursite.com/categories/算法之旅/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://yoursite.com/tags/LeetCode/"}]},{"title":"计数排序和桶排序","slug":"算法之旅/排序算法/计数排序和桶排序","date":"2019-11-04T16:00:00.000Z","updated":"2019-11-06T10:39:52.086Z","comments":true,"path":"2019/11/05/算法之旅/排序算法/计数排序和桶排序/","link":"","permalink":"http://yoursite.com/2019/11/05/算法之旅/排序算法/计数排序和桶排序/","excerpt":"比快排更快的算法，在理想情况下，甚至可以做到线性时间的复杂度","text":"比快排更快的算法，在理想情况下，甚至可以做到线性时间的复杂度 以前学过的排序都是基于 元素之间的比较 来进行排序的，但是有一些特殊的排序并不基于元素比较， 如：计数排序，桶排序，基数排序， 以计数排序来说，这种算法是利用数组下标来确定元素的位置 基数排序是将多位数分成个位数进行计数排序 桶排序是每一个桶代表一个区间范围 计数排序 思路 创建一个统计数组，数组长度为 数列的最大值 - 数列的最小值 + 1， 同时数列的最小值作为一个偏移量，用于计算整数在统计数组的下标 遍历无序数列，将元素填入统计数组 元素值 - 偏移量 的位置 对统计数组进行变形，每一个元素都加上前面所有元素之和。 为什么相加呢？是让统计数组储存的元素值，等于相应整数的最终排序位置的序号。 例如：下标为9的元素值为5，那么代表原始数列的整数9，最终排序在第5位 倒序遍历数组，从统计数组找到正确的位置，输出到结果数组 为什么倒序？为了不改变原有顺序，使之稳定 代码实现 123456789101112131415161718192021222324252627public static int[] countSort(int[] array)&#123; int max = array[0]; int min = array[0]; for(int i = 0; i &lt; array.length; i++)&#123; if (array[i] &gt; max) max = array[i]; if (array[i] &lt; min) min = array[i]; &#125; int d = max -min; //填写统计数组 int[] countArray = new int [d+1]; for(int i = 0; i &lt; array.length; i++) countArray[array[i] - min]++; //统计数组变形 for(int i = 1; i &lt; countArray.length; i++) countArray[i] += countArray[i-1]; //倒序遍历原始数组 int[] sortedArray = new int[array.length]; for(int i = array.length - 1; i &gt;= 0; i--)&#123; sortedArray[countArray[array [i] - min] - 1] = array[i]; countArray[array [i] - min]--; &#125; return sortedArray;&#125; 优缺点 优点 时间复杂度仅为O(n+m) 空间复杂度为O(m) 缺点 当数列最大和最小值差距过大时，空间浪费，时间复杂度增加 必须为整数 桶排序 桶排序同样是一种线性时间的排序算法。类似于计数排序所创建的统计数组，桶排序需要创建若干个桶来协助排序。 每一个桶(bucket)代表一个区间范围，里面可以承载一个或多个元素 思路 创建若干个桶，并确定每一个桶的区间范围 创建几个桶，确定区间范围，有很多种不同的方式。我们这里创建的桶数量等于原始数列的元素数量，除了最后一个桶只包含数列最大值外，前面各个桶的区间按照比例来确定 遍历原始数列，把元素对号入座放入各个桶中 对每个桶内部的元素分别进行排序 遍历所有的桶，输出所有元素 代码实现 123456789101112131415161718192021222324252627282930313233public static double[] bucketSort(double[] array)&#123; double max = array[0]; double min = array[0]; for(int i = 1; i &lt; array.length; i++)&#123; if (array[i] &gt; max) max = array[i]; if (array[i] &lt; min) min = array[i]; &#125; double d = max - min; int bucketNum = 9; ArrayList&lt;LinkedList &lt;Double&gt;&gt; bucketList = new ArrayList&lt;LinkedList &lt;Double&gt;&gt;(bucketNum); for(int i = 0; i &lt; bucketNum; i++) bucketList.add(new LinkedList&lt;Double&gt; ()); for(int i = 0; i &lt; array.length; i++)&#123; int num = (int)((array[i] - min)*(bucketNum-1)/d); bucketList.get(num).add(array[i]); &#125; for(int i = 0; i &lt; bucketList.size(); i++) //JDK底层采用了归并排序或归并的优化版本 Collections.sort(bucketList.get(i)); double[] sortedArray = new double[array.length]; int index = 0; //增强版的for只能遍历，不能修改值 for(LinkedList&lt;Double&gt; list : bucketList) &#123; for (double element : list) &#123; sortedArray[index++] = element; &#125; &#125; return sortedArray;&#125; 优缺点 优点 时间复杂度仅为O(n) 空间复杂度为O(m) 缺点 不稳定，第一个桶有n-1个元素，最后一个桶只有一个，此时时间复杂度退化为O(nlogn)，而且白白的创建了许多空桶","categories":[{"name":"算法之旅","slug":"算法之旅","permalink":"http://yoursite.com/categories/算法之旅/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/排序/"}]},{"title":"堆排序","slug":"算法之旅/排序算法/堆排序","date":"2019-11-03T07:50:04.085Z","updated":"2019-11-06T10:44:27.344Z","comments":true,"path":"2019/11/03/算法之旅/排序算法/堆排序/","link":"","permalink":"http://yoursite.com/2019/11/03/算法之旅/排序算法/堆排序/","excerpt":"堆排序是利用二叉堆的特性完成的排序。","text":"堆排序是利用二叉堆的特性完成的排序。 二叉堆的特性 最大堆的堆顶是整个堆中最大的元素 最小堆的堆顶是整个堆中最小的元素 以最大堆为例，如果删除一个最大堆的堆顶(并不是完全删除，而是跟末尾节点交换位置，然后退出堆)，经过自我调整，第二大的元素就会成为堆顶元素，往复 n-1次即可完成排序 思路 把无序数组构建成二叉堆。需要从小到大排序，则构成最大堆；反之，构成最小堆。 循环删除堆顶元素，替换到二叉堆的末尾，调整堆产生新的堆顶 实现 1234567891011121314151617181920212223242526272829303132333435363738//下沉调整堆public static void downAdjust(int[] array, int parentIndex, int length)&#123; int temp = array[parentIndex]; int childIndex = 2 * parentIndex + 1; while(childIndex &lt; length)&#123; //如果有右孩子，且右孩子的值大于左孩子，则定位到右孩子 if(childIndex+1 &lt; length &amp;&amp; array[childIndex+1] &gt; array[childIndex]) childIndex++; //如果父节点小于任何一个孩子的值，则直接跳出 if(temp &gt;= array[childIndex]) break; //无须真正交换，单向赋值即可 array[parentIndex] = array[childIndex]; parentIndex = childIndex; childIndex = 2 * childIndex + 1; &#125; array[parentIndex] = temp;&#125;//堆排序(升序)public static void heapSort(int[] array)&#123; //1.将无序数组建成最大堆 for(int i = array.length/2; i &gt;=0; i--) downAdjust(array,i,array.length-1); //2.循环删除堆顶元素，替换到二叉堆的末尾，调整堆产生新的堆顶 for(int i = array.length-1; i &gt; 0; i--)&#123; int temp = array[i]; array[i] = array[0]; array[0] = temp; //由于第一次的调整建成了最大堆，所以堆顶的左右孩子只比最大的元素小， //因而只需将堆顶的元素下沉即可重新得到最大堆，参照堆的删除节点操作 downAdjust(array, 0 ,i); &#125;&#125; 时间复杂度 下沉调整的空间复杂度为O(logn)，需要调整n次，因此时间复杂度为O(nlogn) 构建堆的时间复杂度为O(n)，而不是(nlogn) 堆的插入和删除的时间复杂度都是O(logn)","categories":[{"name":"算法之旅","slug":"算法之旅","permalink":"http://yoursite.com/categories/算法之旅/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/排序/"}]},{"title":"动态规划","slug":"算法之旅/LeetCode/动态规划","date":"2019-11-02T16:00:00.000Z","updated":"2019-11-06T10:39:04.089Z","comments":true,"path":"2019/11/03/算法之旅/LeetCode/动态规划/","link":"","permalink":"http://yoursite.com/2019/11/03/算法之旅/LeetCode/动态规划/","excerpt":"动态规划(dynamic programming)是运筹学的一个分支，是求解决策过程(decision process)最优化的数学方法。","text":"动态规划(dynamic programming)是运筹学的一个分支，是求解决策过程(decision process)最优化的数学方法。 基本思想 动态规划与分治法类似，其基本思想也是 将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。 与分治法不同的是，适合于用动态规划求解的问题，经分解得到子问题往往不是互相独立的。若用分治法来解这类问题，则分解得到的子问题数目太多，有些子问题被重复计算了很多次。 如果我们能够保存已解决的子问题的答案，而在需要时再找出已求得的答案，即 重复利用子问题的答案 这样就可以避免大量的重复计算，节省时间，这就是动态规划的优势。 设计步骤 基本步骤 划分阶段：按照问题的时间或空间特征，把问题分为若干个阶段。在划分阶段时，注意划分后的阶段一定要是有序的或者是可排序的，否则问题就无法求解。 确定状态和状态变量：将问题发展到各个阶段时所处于的各种客观情况用不同的状态表示出来。当然，状态的选择要满足 无后效性 。 确定决策并写出 状态转移方程：因为决策和状态转移有着天然的联系，状态转移就是根据上一阶段的状态和决策来导出本阶段的状态。所以如果确定了决策，状态转移方程也就可写出。但事实上常常是反过来做，根据相邻两个阶段的状态之间的关系来确定决策方法和状态转移方程。 寻找边界条件：给出的状态转移方程是一个 递推式，需要一个递推的 终止条件或边界条件 。 简化 一般，只要 解决问题的阶段、状态 和 状态转移决策 确定了，就可以写出 状态转移方程（包括边界条件）。实际应用中可以按以下几个简化的步骤进行设计： 分析最优解的性质，并刻画其结构特征。 递归的定义最优解。 以自底向上或自顶向下的记忆化方式（备忘录法）计算出最优值 根据计算最优值时得到的信息，构造问题的最优解。 适用条件 最优化原理（最优子结构性质）：最优化原理可这样阐述：一个最优化策略具有这样的性质，不论过去状态和决策如何，对前面的决策所形成的状态而言，余下的诸决策必须构成最优策略。简而言之，一个最优化策略的子策略总是最优的。一个问题满足最优化原理又称其具有最优子结构性质。 无后效性：将各阶段按照一定的次序排列好之后，对于某个给定的阶段状态，它以前各阶段的状态无法直接影响它未来的决策，而只能通过当前的这个状态。换句话说，每个状态都是过去历史的一个完整总结。这就是无后向性，又称为无后效性。 子问题的重叠性：动态规划将原来具有指数级时间复杂度的搜索算法改进成了具有多项式时间复杂度的算法。其中的关键在于 解决冗余 ，这是动态规划算法的根本目的。动态规划实质上是一种以 空间换时间 的技术，它在实现的过程中，不得不存储产生过程中的各种状态，所以它的空间复杂度要大于其它的算法。 分类 动态规划一般可分为 线性动规，区域动规，树形动规，背包动规四类。 举例： 线性动规：拦截导弹，合唱队形，挖地雷，建学校，剑客决斗等； 区域动规：石子合并， 加分二叉树，统计单词个数，炮兵布阵等； 树形动规：贪吃的九头龙，二分查找树，聚会的欢乐，数字三角形等； 背包问题：01背包问题，完全背包问题，分组背包问题，二维背包，装箱问题，挤牛奶（同济ACM第1132题）等；","categories":[{"name":"算法之旅","slug":"算法之旅","permalink":"http://yoursite.com/categories/算法之旅/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"动态规划","slug":"动态规划","permalink":"http://yoursite.com/tags/动态规划/"}]},{"title":"位为1的个数","slug":"算法之旅/LeetCode/位为1的个数","date":"2019-10-31T16:00:00.000Z","updated":"2019-11-06T10:38:41.333Z","comments":true,"path":"2019/11/01/算法之旅/LeetCode/位为1的个数/","link":"","permalink":"http://yoursite.com/2019/11/01/算法之旅/LeetCode/位为1的个数/","excerpt":"编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。","text":"编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。 循环和位移动 这个方法比较直接。我们遍历数字的 32 位。如果最后一位是 1 ，将计数器加一，然后数字右移。 任何数字和 掩码1 进行按位与运算，可以让我们获得最后一位数字，检查下一位时，掩码左移或者参数右移。 1234567891011public int hammingWeight(int n) &#123; int bits = 0; int mask = 1; for (int i = 0; i &lt; 32; i++) &#123; if ((n &amp; mask) != 0) &#123; bits++; &#125; mask &lt;&lt;= 1; &#125; return bits;&#125; 位移动的小技巧 我们可以把前面的算法进行优化。我们不再检查数字的每一个位，而是不断把数字最后一个 1 反转，并把答案加一。当数字变成 0 的时候，我们就知道它没有 1 的位了，此时返回答案。 这里关键的想法是对于任意数字n，将 n 和 n-1 做与运算，会把最后一个 1 的位变成 0 。为什么？考虑 n 和 n−1 的二进制表示。 在二进制表示中，数字 n 中最低位的 1 总是对应 n−1 中的 0 。因此，将 n 和 n−1 与运算总是能把 n 中最低位的 1 变成 0 ，并保持其他位不变。 之前学到，可以利用这个判断一个数是不是2的整次幂，如果是2的整次幂，则 最低位为1 的就是 最高位 ，因此 n&amp;n-1就会得到0 12345678public int hammingWeight(int n) &#123; int sum = 0; while (n != 0) &#123; sum++; n &amp;= (n - 1); &#125; return sum;&#125;","categories":[{"name":"算法之旅","slug":"算法之旅","permalink":"http://yoursite.com/categories/算法之旅/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"位运算","slug":"位运算","permalink":"http://yoursite.com/tags/位运算/"},{"name":"数","slug":"数","permalink":"http://yoursite.com/tags/数/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://yoursite.com/tags/LeetCode/"}]},{"title":"Fizz Buzz","slug":"算法之旅/LeetCode/Fizz Buzz","date":"2019-10-31T16:00:00.000Z","updated":"2019-11-06T10:37:40.577Z","comments":true,"path":"2019/11/01/算法之旅/LeetCode/Fizz Buzz/","link":"","permalink":"http://yoursite.com/2019/11/01/算法之旅/LeetCode/Fizz Buzz/","excerpt":"写一个程序，输出从 1 到 n 数字的字符串表示。 如果 n 是3的倍数，输出“Fizz”； 如果 n 是5的倍数，输出“Buzz”； 如果 n 同时是3和5的倍数，输出 “FizzBuzz”。","text":"写一个程序，输出从 1 到 n 数字的字符串表示。 如果 n 是3的倍数，输出“Fizz”； 如果 n 是5的倍数，输出“Buzz”； 如果 n 同时是3和5的倍数，输出 “FizzBuzz”。 暴力法 思路 初始化一个空的答案列表。 遍历 1 … N1…N。 对于每个数，判断它能不能同时被 3 和 5 整除，如果可以就把 FizzBuzz 加入答案列表。 如果不行，判断它能不能被 3 整除，如果可以，把 Fizz 加入答案列表。 如果还是不行，判断它能不能被 5 整除，如果可以，把 Buzz 加入答案列表。 如果以上都不行，把这个数加入答案列表。 实现 12345678910111213141516171819public List&lt;String&gt; fizzBuzz(int n) &#123; List&lt;String&gt; ans = new ArrayList&lt;String&gt;(); for (int num = 1; num &lt;= n; num++) &#123; boolean divisibleBy3 = (num % 3 == 0); boolean divisibleBy5 = (num % 5 == 0); if (divisibleBy3 &amp;&amp; divisibleBy5) ans.add(\"FizzBuzz\"); else if (divisibleBy3) ans.add(\"Fizz\"); else if (divisibleBy5) ans.add(\"Buzz\"); else ans.add(num + \"\"); &#125; return ans; &#125; 字符串连接 这个方法不会降低渐进复杂度，但是当 FizzBuzz 的规则变得更复杂的时候，这将会是个更优雅的解法。比方说，玩个 FizzBuzzJazz 的游戏。 思路 我们放弃使用之前的联合判断，取而代之依次判断是否能被给定的数整数。这道题中，就是依次判断能不能被 3 整除，能不能被 5 整除。如果能被 3 整除，就把对应的 Fizz 连接到答案字符串，如果能被 5 整除，就把 Buzz 连接到答案字符串。 实现 12345678910111213141516public List&lt;String&gt; fizzBuzz(int n) &#123; List&lt;String&gt; ans = new ArrayList&lt;String&gt;(); for (int num = 1; num &lt;= n; num++) &#123; boolean divisibleBy3 = (num % 3 == 0); boolean divisibleBy5 = (num % 5 == 0); String s = \"\"; if(divisibleBy3) s += \"Fizz\"; if(divisibleBy5) s += \"Buzz\"; if(s == \"\") s += num; ans.add(s); &#125; return ans; &#125; 散列表 这个方法是对方法二的优化。当数字和答案的映射是定好的，那么方法二用起来也还可以。但是如果你遇到一个变态的面试官，他跟你说他需要更自由的映射关系呢？ 每个映射一个判断显然是不可行的，这样写出来的代码一定是丑陋不堪且难以维护的。 如果老板有这样一个需求，明天你把映射关系换掉或者删除一个映射关系吧。对于这种要求，我们只能一个个去修改判断条件的代码。 思路 但我们实际上有个更优雅的做法，那就是把映射关系放在 散列表 里面。 把所有的映射关系放在散列表 fizzBuzzHash 中，这个散列表形如 { 3: ‘Fizz’, 5: ‘Buzz’ }。 遍历 1 … N。 对于每个数字，遍历 fizzBuzzHash 中的键，检查是否能被它整除。 如果这个数能被键整除，就把当前键映射的值加到到答案字符串后面去。对于散列表的每个键值对，都这样操作。 最后将答案字符串加入答案列表。 通过这样的方式你可以对散列表 添加/删除 映射关系，同时还不需要修改太多代码。 实现 1234567891011121314151617181920212223242526272829303132333435363738public List&lt;String&gt; fizzBuzz(int n) &#123; // ans list List&lt;String&gt; ans = new ArrayList&lt;String&gt;(); // Hash map to store all fizzbuzz mappings. HashMap&lt;Integer, String&gt; fizzBizzDict = new HashMap&lt;Integer, String&gt;() &#123; &#123; put(3, \"Fizz\"); put(5, \"Buzz\"); &#125; &#125;; for (int num = 1; num &lt;= n; num++) &#123; String numAnsStr = \"\"; for (Integer key : fizzBizzDict.keySet()) &#123; // If the num is divisible by key, // then add the corresponding string mapping to current numAnsStr if (num % key == 0) &#123; numAnsStr += fizzBizzDict.get(key); &#125; &#125; if (numAnsStr.equals(\"\")) &#123; // Not divisible by 3 or 5, add the number numAnsStr += Integer.toString(num); &#125; // Append the current answer str to the ans list ans.add(numAnsStr); &#125; return ans;&#125;","categories":[{"name":"算法之旅","slug":"算法之旅","permalink":"http://yoursite.com/categories/算法之旅/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"数","slug":"数","permalink":"http://yoursite.com/tags/数/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://yoursite.com/tags/LeetCode/"}]},{"title":"冒泡算法","slug":"算法之旅/排序算法/冒泡排序","date":"2019-10-30T16:00:00.000Z","updated":"2019-11-13T10:39:52.445Z","comments":true,"path":"2019/10/31/算法之旅/排序算法/冒泡排序/","link":"","permalink":"http://yoursite.com/2019/10/31/算法之旅/排序算法/冒泡排序/","excerpt":"冒泡排序(bubble sort)是很经典的 交换排序 算法，为什么叫做冒泡，就是因为这个算法的每一个元素都像小气泡一样，根据自身大小，往数组的一侧移动。","text":"冒泡排序(bubble sort)是很经典的 交换排序 算法，为什么叫做冒泡，就是因为这个算法的每一个元素都像小气泡一样，根据自身大小，往数组的一侧移动。 思想 把相邻的元素两两比较，当一个元素大于右侧元素时，两个元素交换，如果没有，位置不变 每一遍历完一轮，总有一个最大的元素移到最右侧 冒泡算法是一个稳定的算法 每一轮都要遍历所有没排序的元素，总共遍历 n-1 轮，因此时间复杂度为O(n^2) 实现 123456789101112131415161718public void bubbleSort(int array[])&#123; for(int i = 0; i &lt; array.length-1; i++)&#123; //有序标志，每一轮初值为true //如果是执行一轮过后还是true，就是没有进行交换，则数组以有序，循环结束 boolean isSorted = true; for(int j = 0; j &lt; array.length-i-1; j++)&#123; int tmp = 0; if(array[j] &gt; array[j+1])&#123; tmp = array[j]; array[j] = array[j+1]; array[j+1] = tmp; isSorted = false;//发生了交换 &#125; &#125; if(isSorted) break; &#125;&#125; 双向冒泡：鸡尾酒排序 冒泡排序的每一个元素都是向右移动的，是单向的，鸡尾酒排序是 双向 的，奇数找最大的，偶数找最小的，但是代码量增加了一倍，在大部分元素有序的情况下，鸡尾酒排序更有优势 12345678910111213141516171819202122232425262728public void doubleBubbleSort(int array[])&#123; int tmp = 0; for(int i = 0; i &lt; array.length/2; i++)&#123; boolean isSorted = true; //奇数轮 for(int j = i; j &lt; array.length-i-1; j++)&#123; if(array[j] &gt; array[j+1])&#123; tmp = array[j]; array[j] = array[j+1]; array[j+1] = tmp; isSorted = false;//发生了交换 &#125; &#125; if(isSorted) break; //偶数轮，重新标记 isSorted = true; for(int j = array.length-i-1; j &gt; i; j--)&#123; if(array[j] &lt;&gt; array[j-1])&#123; tmp = array[j]; array[j] = array[j-1]; array[j-1] = tmp; isSorted = false;//发生了交换 &#125; &#125; if(isSorted) break; &#125;&#125;","categories":[{"name":"算法之旅","slug":"算法之旅","permalink":"http://yoursite.com/categories/算法之旅/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/排序/"}]},{"title":"快速排序","slug":"算法之旅/排序算法/快速排序","date":"2019-10-30T16:00:00.000Z","updated":"2020-03-08T02:21:51.017Z","comments":true,"path":"2019/10/31/算法之旅/排序算法/快速排序/","link":"","permalink":"http://yoursite.com/2019/10/31/算法之旅/排序算法/快速排序/","excerpt":"同冒泡排序，快速排序也是交换排序","text":"同冒泡排序，快速排序也是交换排序 思想 每一轮挑选一个基准元素，并让其他比它大的元素移动到数列的一边，比它小的移动到另一边，从而把数列拆成两个部分，一个部分的数全部比基准元素打，另一个部分全部比它小。 这种思想叫做 分治法 原数列在每一轮都被拆成两部分，两部分中的每一部分又被拆成两部分，一直递归下去，直至不可再分，因此要遍历 logn 轮，而且每一轮的交换和比较要遍历数组，因此时间复杂度为 O(nlogn) 基准元素的选择 最简单的方式是选第一个元素，但是在数列基本有序，或者逆序的情况下，数列没有理想的被分为均匀的两半，每一轮只确定基准元素的位置，时间复杂度退化为O(n^2) 解决方法：随机选择一个元素作为基准元素，并让基准元素和数列首位元素交换位置 元素的交换 选定了基准元素以后，我们要做的就是把其他元素中小于基准元素都交换到基准元素的一边，大于它的交换到另一边。 实现方法 双边循环法 也就是数据结构中学的方法，为双指针法。 首先选定基准元素pivot，并设置两个指针left，right，分别指向数组的最左边和最右边 进行循环，从right指针开始，让指针所指向的元素和基准元素做比较。 如果大于或等于pivot，则right指针右移 如果小于pivot，则right指针停止移动，right和left指向的值互换，切换到left指针 让left指针指向的元素和基准元素作比较，如果小于等于pivot，则左移，反之停止移动，right和left指向的值互换，切换到right指针 一直循环下去，直到 right == left 最后把pivot的与两指针汇合处的元素与pivot互换，即完成第一次分治 实现 123456789101112131415161718192021222324252627282930313233343536public static void quickSort(int[] arr, int startIndex, int endIndex)&#123; //递归结束条件，startIndex大于等于endIndex时 if(startIndex &gt;= endIndex) return; //得到基准元素位置 int pivotIndex = partition(arr, startIndex, endIndex); //根据基准元素，分成两部分进行递归快速排序 quickSort(arr, startIndex, pivotIndex-1); quickSort(arr, pivotIndex+1, endIndex);&#125;public static int partition(int[] arr, int startIndex, int endIndex)&#123; //取第一个位置的元素作为基准元素 int pivot = arr[startIndex]; int left = startIndex; int right = endIndex; while(left != right)&#123; while(left &lt; right &amp;&amp; arr[right] &gt; pivot) right--; while(left &lt; right &amp;&amp; arr[left] &lt;= pivot) left++; //交换left和right指针所指向的元素 if(left &lt; right)&#123; int p = arr[left]; arr[left] = arr[right]; arr[right] = p; &#125; &#125; //pivot和指针重合点交换 arr[startIndex] = arr[left]; arr[left] = pivot; return left;&#125; 单边循环法 双边循环从数组的两边交替遍历元素，虽然更加直观，但是代码量较多。单边循环法只从数组的一边对元素进行遍历和交换。 选定基准元素pivot，设置一个mark指针指向数列起始位置，这个mark指针代表 小于基准元素的区域边界 接下来，从基准元素的下一个位置开始遍历数组 如果遍历到的元素大于基准元素，就继续往后遍历 如果小于基准元素，需要做两件事： 第一，把mark指针右移一位，因为小于pivot的区域边界增加了1； 第二，让最新遍历到的元素和mark指针所在位置的元素互换，因为最新遍历的元素归属与小于pivot的区域 按照这个思路，继续遍历，直至末位，最后把pivot元素交换到mark指针所在的位置，第一次分治结束 123456789101112131415161718192021222324252627public static void quickSort(int[] arr, int startIndex, int endIndex)&#123; //递归结束条件，startIndex大于等于endIndex时 if(startIndex &gt;= endIndex) return; //得到基准元素位置 int pivotIndex = partitionV2(arr, startIndex, endIndex); //根据基准元素，分成两部分进行递归快速排序 quickSort(arr, startIndex, pivotIndex-1); quickSort(arr, pivotIndex+1, endIndex);&#125;public static int partitionV2(int[] arr, int startIndex, int endIndex)&#123; int pivot = arr[startIndex]; int mark = startIndex; for(int i = startIndex+1; i &lt;= endIndex; i++)&#123; if(arr[i] &lt; pivot)&#123; mark++; int p = arr[mark]; arr[mark] = arr[i]; arr[i] = p; &#125; &#125; arr[startIndex] = arr[mark]; arr[mark] = pivot; return mark;&#125;","categories":[{"name":"算法之旅","slug":"算法之旅","permalink":"http://yoursite.com/categories/算法之旅/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/排序/"}]},{"title":"排序算法","slug":"算法之旅/排序算法/排序算法","date":"2019-10-30T16:00:00.000Z","updated":"2019-11-06T10:36:34.505Z","comments":true,"path":"2019/10/31/算法之旅/排序算法/排序算法/","link":"","permalink":"http://yoursite.com/2019/10/31/算法之旅/排序算法/排序算法/","excerpt":"生活中的排序无处不在，因此在算法中也无处不在，排序看似简单，但是有着各种各样的算法和思想。","text":"生活中的排序无处不在，因此在算法中也无处不在，排序看似简单，但是有着各种各样的算法和思想。 分类 根据时间复杂度的不同，主流的排序算法可以分为3大类。 时间复杂度为 O(n^2) 冒泡算法 选择排序 插入排序 希尔排序(希尔排序比较特殊，它的性能略优于O(n^2)，但又比不上O(nlogn)) 时间复杂度为 O(nlogn) 快速排序 归并排序 堆排序 时间复杂度为线性 计数排序 桶排序 基数排序 此外，排序算法还划分为 稳定排序 和 不稳定排序 如何划分稳定和不稳定：如果值相同的元素在排序后仍然保持排序前的顺序，排序算法就是稳定的 总表","categories":[{"name":"算法之旅","slug":"算法之旅","permalink":"http://yoursite.com/categories/算法之旅/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/排序/"}]},{"title":"判断一个数是不是2的整次幂","slug":"算法之旅/判断一个数是不是2的整次幂","date":"2019-10-28T16:00:00.000Z","updated":"2019-11-06T10:35:31.442Z","comments":true,"path":"2019/10/29/算法之旅/判断一个数是不是2的整次幂/","link":"","permalink":"http://yoursite.com/2019/10/29/算法之旅/判断一个数是不是2的整次幂/","excerpt":"","text":"如果一个整数是2的整次幂，那么当它转化为二进制时，只有最高位时1，其他都是0 把这个整数减1后，二进制数全变成了1，原本最高位变为0 因此，只需要 原数值 和 它减1的结果 进行按位与运算，也就是 n&amp;(n-1) 是否为0，就可以判断它是不是2的整次幂 123public void boolean isPowerOf2(int num)&#123; return (num &amp; num-1) == 0;&#125;","categories":[{"name":"算法之旅","slug":"算法之旅","permalink":"http://yoursite.com/categories/算法之旅/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"位运算","slug":"位运算","permalink":"http://yoursite.com/tags/位运算/"},{"name":"数","slug":"数","permalink":"http://yoursite.com/tags/数/"}]},{"title":"最大公约数","slug":"算法之旅/最大公约数","date":"2019-10-27T16:00:00.000Z","updated":"2019-11-06T10:31:32.808Z","comments":true,"path":"2019/10/28/算法之旅/最大公约数/","link":"","permalink":"http://yoursite.com/2019/10/28/算法之旅/最大公约数/","excerpt":"求一个数的最大公约数，getGreatestCommonDivisor简称gcd","text":"求一个数的最大公约数，getGreatestCommonDivisor简称gcd 辗转相除法 又名 欧几里得算法 原理 两个正整数a，b（a&gt;b），它们的最大公约数等于 a/b的余数 和 b 之间的最大公约数 实现 12345678public static int gcd(int a, int b)&#123; int big = a&gt;b? a:b; int small = a&lt;b? a:b; if(big%small == 0) return small; return gcd(big%small, small);&#125; 缺点 两个整数较大时，模运算性能较差 更相减损术 原理 两个正整数a，b（a&gt;b），它们的最大公约数等于 a-b的差值 和 较小数b的最大公约数 实现 123456789public static int gcd(int a, int b)&#123; if(a == b) return a; int big = a&gt;b? a:b; int small = a&lt;b? a:b; return gcd(big-small, small);&#125; 缺点 不稳定，当两个数悬殊巨大时，要计算多次，例如：100001和1 移位运算法 这个算法结合了 辗转相除法 和 *更相减损术 的优势，在更相减损术的基础上使用移位运算，整个算法只用到 移位运算 和 减法 这个算法在两个数比较小时看不出优势，但是当数比较大的时候，计算速度明显提高 原理 两个正整数a，b（a&gt;b） gcd(a,a)=a，也就是一个数和其自身的公约数仍是其自身。 gcd(ka,kb)=k gcd(a,b)，也就是最大公约数运算和倍乘运算可以交换。特殊地，当k=2时，说明两个偶数的最大公约数必然能被2整除。 当k与b互为质数，gcd(ka,b)=gcd(a,b)，也就是约掉两个数中只有其中一个含有的因子不影响最大公约数。特殊地，当k=2时，说明计算一个偶数和一个奇数的最大公约数时，可以先将偶数除以2。 实现 1234567891011121314151617public static int gcdPlus(int a, int b)&#123; if(a == b) return a; //采用与1进行与的位运算判断奇偶数，速度更快 if((a&amp;1)==0 &amp;&amp; (b&amp;1) ==0)//a，b均为偶数 return gcdPlus(a&gt;&gt;1, b&gt;&gt;1)&lt;&lt;1; else if((a&amp;1)==0 &amp;&amp; (b&amp;1) !=0)//a为偶数，b为奇数 return gcdPlus(a&gt;&gt;1, b); else if((a&amp;1)==0 &amp;&amp; (b&amp;1) !=0)//a为奇数，b为偶数 return gcdPlus(a, b&gt;&gt;1); else&#123; int big = a&gt;b? a:b; int small = a&lt;b? a:b; return gcdPlus(big-small, small); &#125;&#125; 时间复杂度 暴力法：O(min(a, b)) 辗转相除法：近似为O(log(max(a, b)))，但是模运算性能较差 更相减损术：算法不稳定，最坏为O(max(a, b)) 移位运算法：不但避免模运算，而且稳定，复杂度为O(log(max(a, b)))","categories":[{"name":"算法之旅","slug":"算法之旅","permalink":"http://yoursite.com/categories/算法之旅/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"位运算","slug":"位运算","permalink":"http://yoursite.com/tags/位运算/"},{"name":"数","slug":"数","permalink":"http://yoursite.com/tags/数/"}]},{"title":"最小栈的实现","slug":"算法之旅/最小栈的实现","date":"2019-10-27T16:00:00.000Z","updated":"2020-02-29T04:42:25.634Z","comments":true,"path":"2019/10/28/算法之旅/最小栈的实现/","link":"","permalink":"http://yoursite.com/2019/10/28/算法之旅/最小栈的实现/","excerpt":"实现一个栈，该栈带有出栈（pop），进栈（push），取最小元素（getMin）3个方法，保证时间复杂度为O(1).","text":"实现一个栈，该栈带有出栈（pop），进栈（push），取最小元素（getMin）3个方法，保证时间复杂度为O(1). 如果只声明一个变量储存最小值是不够的，因为如果最小值出栈的话，怎么更新？ 因而，我们需要储存栈中 曾经的最小值，作为“备胎” 解法步骤 设原有栈为A，此时创建个额外的“备胎”栈B，用于辅助栈A。 当第一个元素进入栈A时，让新元素也进入栈B。因为这个唯一的元素时栈A目前最小值。 之后，每当新元素入栈A时，比较 新元素 和 栈A目前最小值 的大小，如果小于 栈A目前的最小值，则让新元素也入栈B，此时 栈B的栈顶元素 是 栈A当前最小值。 每当有栈A的元素出栈，如果 出栈元素 和 栈B栈顶元素 相同时，栈B栈顶元素也出栈，则接下去栈B栈顶元素变为栈A目前最小值，“备胎转正”。 当调用getMin()时，返回 栈B的栈顶元素 ，这就是栈A目前最小值。 时间复杂度均是O(1)，最坏情况的空间复杂度为O(n) 实现 123456789101112131415161718192021private Stack&lt;Integer&gt; mainStack = new Stack&lt;Integer&gt;();private Stack&lt;Integer&gt; minStack = new Stack&lt;Integer&gt;();public void push(int element)&#123; mainStack.push(element); if(minStack.empty() || element &lt;= minStack.peek()) minStack.push(element);&#125;public Integer pop()&#123; if(mainStack.peek().equals(minStack.peek())) minStack.pop(); return mainStack.pop();&#125;public int getMin() throws Exception &#123; if(mainStack.empty()) throw new Exception(\"stack is empty\"); return minStack.peek();&#125;","categories":[{"name":"算法之旅","slug":"算法之旅","permalink":"http://yoursite.com/categories/算法之旅/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"栈","slug":"栈","permalink":"http://yoursite.com/tags/栈/"}]},{"title":"快乐数","slug":"算法之旅/LeetCode/快乐数","date":"2019-10-26T16:00:00.000Z","updated":"2019-11-06T10:31:57.437Z","comments":true,"path":"2019/10/27/算法之旅/LeetCode/快乐数/","link":"","permalink":"http://yoursite.com/2019/10/27/算法之旅/LeetCode/快乐数/","excerpt":"编写一个算法来判断一个数是不是“快乐数”。","text":"编写一个算法来判断一个数是不是“快乐数”。 一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。 例如:19 1^2 + 9^2 = 82 8^2 + 2^2 = 68 6^2 + 8^2 = 100 1^2 + 0^2 + 0^2 = 1 思路 使用“快慢指针”思想找出循环：“快指针”每次走两步，“慢指针”每次走一步，当二者相等时，即为一个循环周期。此时，判断是不是因为1引起的循环，是的话就是快乐数，否则不是快乐数。 注意：此题不建议用集合记录每次的计算结果来判断是否进入循环，因为这个集合可能大到无法存储；另外，也不建议使用递归，同理，如果递归层次较深，会直接导致调用栈崩溃。不要因为这个题目给出的整数是int型而投机取巧。 12345678910111213141516171819202122public boolean isHappy(int n) &#123; int p1 = n, p2 = n; do&#123; p1 = bitSquareSum(p1); p2 = bitSquareSum(bitSquareSum(p2)); &#125;while(p1 != p2); //如果循环点是1，则它是快乐数 //也有可能循环点不是1 return p1 == 1;&#125;public int bitSquareSum(int n)&#123; int sum = 0 ,bit = 0; while(n != 0)&#123; bit = n%10; sum += bit*bit; n /= 10; &#125; return sum;&#125;","categories":[{"name":"算法之旅","slug":"算法之旅","permalink":"http://yoursite.com/categories/算法之旅/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"数","slug":"数","permalink":"http://yoursite.com/tags/数/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://yoursite.com/tags/LeetCode/"},{"name":"双指针","slug":"双指针","permalink":"http://yoursite.com/tags/双指针/"}]},{"title":"判断链表有环","slug":"算法之旅/LeetCode/判断链表有环","date":"2019-10-26T16:00:00.000Z","updated":"2019-11-06T10:32:10.198Z","comments":true,"path":"2019/10/27/算法之旅/LeetCode/判断链表有环/","link":"","permalink":"http://yoursite.com/2019/10/27/算法之旅/LeetCode/判断链表有环/","excerpt":"有一个单向链表，如何判断链表是否为有环链表？","text":"有一个单向链表，如何判断链表是否为有环链表？ HashSet法 思路 创建一个以节点ID为Key的HashSet集合 遍历链表并加入HashSet，判断是否重复，重复则有环 复杂度 时间复杂度O(n) 空间复杂度O(n) 双指针追及法 思路 声明两个指针p1，p2，都指向头节点 p1为慢指针，速度一个节点，p2为快指针，速度两个节点，速度差一个节点 让两个指针开始跑，两个指针跑完一次，判断两个指针指向的节点是否相同，相同则有环，不同则继续下一次循环 这个思路类似于数学上的 追及问题，如果跑道是环形的，快指针会追上慢指针 复杂度 时间复杂度O(n) 空间复杂度O(1) 源码 1234567891011121314151617181920212223public static boolean isCycle(Node head)&#123; Node p1 = head, p2 = head; while(p2 != null &amp;&amp; p2.next != null)&#123; p1 = p1.next; p2 = p2.next.next; //ringMeetNode可以在这里获得 if(p1 == p2) return true; &#125; return false;&#125;/*public class Node&#123; int data; Node next; Node(int data)&#123; this.data = data; &#125;&#125; 问题扩展 1.如何求出环的长度 当两个指针首次相遇，让两个指针接着前进，并统计前进的循环次数，直到两个指针再次相遇。此时统计前进的循环次数就是环长。 原理 p1与p2速度差为一个节点，当快指针再次追上慢指针时，快指针多走了慢指针一圈，因此： 环长 = 快指针走的步数 - 慢指针走的步数 = 速度差 * 前进次数 = 前进次数 代码实现 123456789101112131415public int getRingLength(Node ringMeetNode)&#123; int ringLength = 0; //ringMeetNode可以在isCycle()中获得 Node p1 = ringMeetNode, p2 = ringMeetNode; while(true)&#123; p1 = p1.next; p2 = p2.next.next; ringLength++; if(p1 == p2) break; &#125; return ringLength;&#125; 2.如何求入环节点 原理 假设从链表头节点到入环的距离时D，从入环点到首次相遇点的距离时S1，从首次相遇点回到入环点的距离时S2 两次指针首次相遇时，各自所走的距离： p1：D + S1 p2：D + S1 + S2 + S1 = D + 2S1 + S2 由于p2的速度是p1的两倍，因此：2(D + S1) = D + 2S1 + S2 得到 D = S2，即：从头节点到入环点的距离 = 从首次相遇点回到入环点的距离 这样一来，只要把其中一个指针放回头节点，另一个指针保持在远处，然后两个指针的 速度都是一个节点，那么：它们 相遇节点就是入环节点 代码实现 1234567891011public Node getRingStart(Node head)&#123; //ringMeetNode可以在isCycle()中获得 Node p1 = head, p2 = ringMeetNode; while(p1 != p2)&#123; p1 = p1.next; p2 = p2.next; &#125; return p1;&#125;","categories":[{"name":"算法之旅","slug":"算法之旅","permalink":"http://yoursite.com/categories/算法之旅/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"双指针","slug":"双指针","permalink":"http://yoursite.com/tags/双指针/"}]},{"title":"模式匹配","slug":"算法之旅/LeetCode/模式匹配","date":"2019-10-26T16:00:00.000Z","updated":"2019-11-06T10:32:22.343Z","comments":true,"path":"2019/10/27/算法之旅/LeetCode/模式匹配/","link":"","permalink":"http://yoursite.com/2019/10/27/算法之旅/LeetCode/模式匹配/","excerpt":"给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回 -1。","text":"给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回 -1。 这个是个模式匹配问题，我刚开始没有意识到到，用暴力法匹配所有的子串，解决了问题，虽然在短字符串的匹配中速度比kmp快，但是长字符串的效率很低。 看了解答后，才意识到这是我数据结构中学到的 KMP算法。 核心NEXT数组 next数组是求 前缀，后缀最长的公共子串长度 求next函数值的问题可以看成另一个模式匹配问题：整个模式串既是子串又是模式串 123456789101112131415161718public int[] get_next(String needle)&#123; int[] next = new int[needle.length()]; //i是后缀，j是前缀，前缀固定，后缀是相对的 int i = 0, j = -1; next[0] = -1; while(i &lt; needle.length()-1)&#123; if(j == -1 || needle.charAt(i) == needle.charAt(j))&#123; i++; j++; //next数组优化，当字符失配时，回到相同字符无意义，应继续递归 if(needle.charAt(i) != needle.charAt(j)) next[i] = j; else next[i] = next[j]; &#125;else j = next[j];//j回溯 &#125; return next; strStr的实现 1234567891011121314public int strStr(String haystack, String needle) &#123; if(needle.length() == 0) return 0; int i = 0, j = 0; int[] next = get_next(needle); while(i &lt; haystack.length() &amp;&amp; j &lt; needle.length())&#123; if(j == -1 || haystack.charAt(i) == needle.charAt(j)) &#123;i++; j++;&#125; else j = next[j]; &#125; if(j == needle.length()) return i-j; return -1;&#125;","categories":[{"name":"算法之旅","slug":"算法之旅","permalink":"http://yoursite.com/categories/算法之旅/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://yoursite.com/tags/LeetCode/"},{"name":"双指针","slug":"双指针","permalink":"http://yoursite.com/tags/双指针/"},{"name":"KMP算法","slug":"KMP算法","permalink":"http://yoursite.com/tags/KMP算法/"}]},{"title":"移除指定元素","slug":"算法之旅/LeetCode/移除指定元素","date":"2019-10-25T16:00:00.000Z","updated":"2019-11-07T07:13:44.969Z","comments":true,"path":"2019/10/26/算法之旅/LeetCode/移除指定元素/","link":"","permalink":"http://yoursite.com/2019/10/26/算法之旅/LeetCode/移除指定元素/","excerpt":"给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。","text":"给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。 这个采用 双指针 ，与之前的 删除排序数组中的重复项 极为相似 双指针 12345678910public int removeElement(int[] nums, int val) &#123; int i = ans; for (int i = 0; i &lt; nums.length; i++) &#123; if (nums[i] != val) &#123; nums[ans] = nums[i]; ans++; &#125; &#125; return ans;&#125; 双指针优化版 现在考虑数组包含很少的要删除的元素的情况。例如，num=[1，2，3，5，4]，Val=4num=[1，2，3，5，4]，Val=4。之前的算法会对前四个元素做不必要的复制操作。另一个例子是 num=[4，1，2，3，5]，Val=4，似乎没有必要将 [1，2，3，5] 这几个元素左移一步，因为问题描述中提到元素的顺序可以更改。 所以当我们遇到 nums[ans] == val 的时候，我们可以将 当前元素与最后一个元素进行交换，并释放最后一个元素（ans–）。这实际上使数组的大小减少了 1。 请注意，被交换的最后一个元素可能是您想要移除的值。但是不要担心，在下一次迭代中，我们仍然会检查这个元素，因为并没有i++。 1234567891011121314public int removeElement(int[] nums, int val) &#123; int ans = nums.length; for(int i = 0; i &lt; ans;)&#123; if(nums[i] == val)&#123; nums[i] = nums[ans-1]; ans--; &#125;else&#123; i++; &#125; &#125; return ans;&#125;","categories":[{"name":"算法之旅","slug":"算法之旅","permalink":"http://yoursite.com/categories/算法之旅/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://yoursite.com/tags/LeetCode/"},{"name":"双指针","slug":"双指针","permalink":"http://yoursite.com/tags/双指针/"}]},{"title":"合并有序链表","slug":"算法之旅/LeetCode/合并有序链表","date":"2019-10-24T16:00:00.000Z","updated":"2019-11-06T10:33:04.300Z","comments":true,"path":"2019/10/25/算法之旅/LeetCode/合并有序链表/","link":"","permalink":"http://yoursite.com/2019/10/25/算法之旅/LeetCode/合并有序链表/","excerpt":"将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。","text":"将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 题设类 123456//Definition for singly-linked list.public class ListNode &#123; int val; ListNode next; ListNode(int x) &#123; val = x; &#125;&#125; 迭代法 这个在数据结构中学过，虽然那时候学的是 C语言，但是思想相同。 由于没有头节点，我们可以假设个头节点，更容易的返回合并后的链表。 12345678910111213141516171819202122public ListNode mergeTwoLists(ListNode l1, ListNode l2) &#123; //设置头节点 ListNode head = new ListNode(-1); ListNode p = head; while(l1 != null &amp;&amp; l2 != null)&#123; if(l1.val &lt; l2.val)&#123; p.next = l1; l1 = l1.next; &#125;else&#123; p.next = l2; l2 = l2.next; &#125; p = p.next; &#125; //将两个链表中剩下的一个链表直接接在末尾 p.next = (l1 == null)?l2:l1; return head.next;&#125; 时间复杂度 O(n+m) 空间复杂度 O(1) 递归法 我们可以递归的定义在两个链表的 merge 操作： 也就是说，头部比较小的一个与剩下元素的 merge 操作结果连接起来，就可以得到最终的链表 12345678910111213public ListNode mergeTwoLists(ListNode l1, ListNode l2) &#123; //递归先考虑边界条件 if (l1 == null) return l2; if (l2 == null) return l1; if (l1.val &lt; l2.val) &#123; l1.next = mergeTwoLists(l1.next, l2); return l1; &#125;else &#123; l2.next = mergeTwoLists(l1, l2.next); return l2; &#125;&#125; 时间复杂度 O(n+m) 空间复杂度 O(n+m)，由于需要n+m个栈帧","categories":[{"name":"算法之旅","slug":"算法之旅","permalink":"http://yoursite.com/categories/算法之旅/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://yoursite.com/tags/LeetCode/"}]},{"title":"Java学习之旅————多线程","slug":"学习/Java学习/Java学习之旅——多线程","date":"2019-10-22T16:00:00.000Z","updated":"2019-12-23T02:21:37.004Z","comments":true,"path":"2019/10/23/学习/Java学习/Java学习之旅——多线程/","link":"","permalink":"http://yoursite.com/2019/10/23/学习/Java学习/Java学习之旅——多线程/","excerpt":"多线程（Thread）是软件开发中的重要内容，实际上，多线程最直观的说法是让应用程序看起来好像同时能做好几件事情","text":"多线程（Thread）是软件开发中的重要内容，实际上，多线程最直观的说法是让应用程序看起来好像同时能做好几件事情 线程是独立的线程。它代表独立的执行空间。在Java中，要建立新的线程就得创建 Thread，CPU会在执行空间非常快速地来回切换。因为CPU速度很快，所以你会感觉CPU同时在做好几件事 要记得，Java也只是个在底层操作系统上执行的进程。一旦轮到Java执行的时候，JVM实际执行的是执行空间最上面的字节码！在某个时间片内，目前执行程序代码会被切换到不同空间上的不同方法。 线程要记录的一项事情是目前线程执行空间做到哪里：保护现场 实现多线程的两种方法 继承 Thread 类开发多线程 编写一个类，继承 java.lang.Thread 类 1class MyThread extends Thread 在这个类重写 java.lang.Thread 类中的函数： 1public void run()&#123;&#125; 实例化线程对象，调用其 start() 函数启动该线程 12MyThread thread = new MyThread();thread.start(); 实现 Runnable 接口开发多线程 编写一个类，实现 java.lang.Runnable 接口 1class MyRunnable implements Runnable 在这个类中重写 java.lang.Runnable 接口中的函数： 1public void run()&#123;&#125; 实例化 java.lang.Thread 对象，实例化上面编写的 Runnable 实现类，将后者传入 Thread 对象的构造函数，调用 Thread 对象的 start() 函数来启动线程 123Runnable threadJob = new MyRunnable();Thread thread = new Thread(threadJob);thread.start(); 两种方法比较 第一种每个对象都是一个线程，而第二种每个对象不是一个线程，必须将其传入Thread对象才能运行 第一种每个线程都有自己的成员变量，而第二种共享成员变量 Java不支持多重继承，只能继承一个类，但是可以实现多个接口，第一种方法虽然较简单，但是扩展性没有第二种强","categories":[{"name":"Java学习","slug":"Java学习","permalink":"http://yoursite.com/categories/Java学习/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"删除排序数组中的重复项","slug":"算法之旅/LeetCode/删除排序数组中的重复项","date":"2019-10-21T16:00:00.000Z","updated":"2019-11-06T10:33:50.875Z","comments":true,"path":"2019/10/22/算法之旅/LeetCode/删除排序数组中的重复项/","link":"","permalink":"http://yoursite.com/2019/10/22/算法之旅/LeetCode/删除排序数组中的重复项/","excerpt":"给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度，不需要考虑超出新长度后面的元素。","text":"给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度，不需要考虑超出新长度后面的元素。 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。 如果题目没要求O(1)，可以直接用LinkedHashSet解决。 即使不能有空间要求，这道题也比较简单。这是我第一次速度超过100%，哈哈哈哈哈 双指针法 由于我的答案和LeetCode思路一样，所以我叫他双指针法。 首先判断数组是不是空或者是不是长度为1，是的话直接返回数组长度 声明两个变量即 双指针 ，一个快指针i，一个慢指针ans 快指针声明在for循环里，每次循环都 i++ 慢指针声明在循环外，当 nums[i] != nums[i+1]时(即不重复时)，令nums[ans] = nums[i]，ans++ 最后返回ans 123456789101112131415public int removeDuplicates(int[] nums) &#123; if(nums==null || nums.length == 1)&#123; return nums.length; &#125; int ans = 0; for(int i = 0; i &lt; nums.length; i++)&#123; if(i == nums.length-1 || nums[i] != nums[i+1])&#123; nums[ans] = nums[i]; ans++; &#125; &#125; return ans;&#125; 最后贴上LeetCode解法 思路基本一致 1234567891011public int removeDuplicates(int[] nums) &#123; if (nums.length == 0) return 0; int i = 0; for (int j = 1; j &lt; nums.length; j++) &#123; if (nums[j] != nums[i]) &#123; i++; nums[i] = nums[j]; &#125; &#125; return i + 1;&#125;","categories":[{"name":"算法之旅","slug":"算法之旅","permalink":"http://yoursite.com/categories/算法之旅/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://yoursite.com/tags/LeetCode/"},{"name":"双指针","slug":"双指针","permalink":"http://yoursite.com/tags/双指针/"}]},{"title":"罗马数转整数","slug":"算法之旅/LeetCode/罗马数转整数","date":"2019-10-20T16:00:00.000Z","updated":"2019-11-06T10:34:19.868Z","comments":true,"path":"2019/10/21/算法之旅/LeetCode/罗马数转整数/","link":"","permalink":"http://yoursite.com/2019/10/21/算法之旅/LeetCode/罗马数转整数/","excerpt":"罗马数字包含以下七种字符: I(1), V(5), X(10), L(50), C(100), D(500), M(1000)，将一串罗马数转成整数。","text":"罗马数字包含以下七种字符: I(1), V(5), X(10), L(50), C(100), D(500), M(1000)，将一串罗马数转成整数。 通常情况下，罗马数字中小的数字在大的数字的右边。 但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。 一共有六个特例： I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。 X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。 穷举法 首先将所有的组合添加到哈希表中，一共有13种 然后遍历字符串，由于组合只有两类，一类是1个字符，另一类是2个字符，其中，2个字符优先级较高 返回ans 1234567891011121314151617181920212223242526272829public int romanToInt(String s) &#123; int ans = 0; Map&lt;String, Integer&gt; map = new HashMap(); map.put(\"I\", 1); map.put(\"IV\", 4); map.put(\"V\", 5); map.put(\"IX\", 9); map.put(\"X\", 10); map.put(\"XL\", 40); map.put(\"L\", 50); map.put(\"XC\", 90); map.put(\"C\", 100); map.put(\"CD\", 400); map.put(\"D\", 500); map.put(\"CM\", 900); map.put(\"M\", 1000); for(int i = 0; i &lt; s.length();)&#123; if(i+1 &lt; s.length() &amp;&amp; map.containsKey(s.substring(i, i+2)))&#123; ans += map.get(s.substring(i,i+2)); i += 2; &#125;else&#123; ans += map.get(s.substring(i,i+1)); i ++; &#125; &#125; return ans;&#125; 更优解法 因为通常情况下，罗马数字中小的数字在大的数字的右边，所以我们可以和下一个字符比大小，如果比它小，那么就是六种特例中的一种 定义一个获取罗马字符对应数字的静态方法，使用switch来获取字符对应数字 遍历字符串，比较当前字符和下一字符的数字大小，大于则加，小于则减 1234567891011121314151617181920212223242526272829303132333435//静态方法获得罗马数对应的数字大小private static int getValue(char c) &#123; switch (c) &#123; case 'I': return 1; case 'V': return 5; case 'X': return 10; case 'L': return 50; case 'C': return 100; case 'D': return 500; case 'M': return 1000; default: throw new IllegalArgumentException(\"Illegal character\"); &#125;&#125;public int romanToInt(String s)&#123; int ans = 0; for(int i = 0; i &lt; s.length(); i++)&#123; int t = getValue(s.charAt(i)); //i为最后一个时，直接加 if(i == n-1 || t &gt;= getValue(s.charAt(i+1)))&#123; ans += t; &#125;else&#123; ans -= t; &#125; &#125; return ans;&#125;","categories":[{"name":"算法之旅","slug":"算法之旅","permalink":"http://yoursite.com/categories/算法之旅/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"数","slug":"数","permalink":"http://yoursite.com/tags/数/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://yoursite.com/tags/LeetCode/"}]},{"title":"快速幂等法","slug":"算法之旅/LeetCode/快速幂等法","date":"2019-10-19T16:00:00.000Z","updated":"2019-11-06T10:34:41.335Z","comments":true,"path":"2019/10/20/算法之旅/LeetCode/快速幂等法/","link":"","permalink":"http://yoursite.com/2019/10/20/算法之旅/LeetCode/快速幂等法/","excerpt":"实现 pow(x,n) ，即求x的n次幂。使用暴力法超时，因而使用快速幂等法。","text":"实现 pow(x,n) ，即求x的n次幂。使用暴力法超时，因而使用快速幂等法。 快速幂等法 要求一个数的n次幂，可以先求他的n/2次幂，一直分下去，简化问题，减少运算次数。 假设 A = x^(n/2) 如果 n%2 == 0，则 x^n = A * A; 如果 n%2 != 0，则 x^n = A * A * x; 可以采用循环法或者是递归法解决问题，时间复杂度均为 O(logN) 循环法 123456789101112131415161718192021public double myPow(double x, int n) &#123; //n是32位有符号整数，其数值范围是[−2^31, 2^31 − 1]。 //如果直接将其 -n 转化为正数，有可能导致溢出 //所以采用long类型储存n long N = n; if (N &lt; 0) &#123; x = 1 / x; N = -N; &#125; double ans = 1; double current_product = x; for (long i = N; i &gt; 0; i /= 2) &#123; if ((i % 2) == 1) &#123; ans = ans * current_product; &#125; current_product = current_product * current_product; &#125; return ans; &#125; 递归法 1234567891011121314151617181920public double myPow(double x, int n) &#123; long N = n; if (n &lt; 0)&#123; N = -N; x = 1/x; &#125; return myFastPow(x, N); &#125;public double myFastPow(double x, long n)&#123; if (n == 0) return 1; double half = myFastPow(x, n/2); if(n % 2 ==0) return half*half; else return half*half*x;&#125; 位运算法 此外还有一种位运算的方法，只说思路：把指数部分转换成2进制，然后展开成2的幂次的和。借用网上的图展示关系 以 x 的 10 次方举例。10 的 2 进制是 1010，然后用 2 进制转 10 进制的方法把它展成 2 的幂次的和。 时间复杂度为 O(N) 以上算法空间复杂度均是 O(1)","categories":[{"name":"算法之旅","slug":"算法之旅","permalink":"http://yoursite.com/categories/算法之旅/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://yoursite.com/tags/LeetCode/"}]},{"title":"滑动窗口","slug":"算法之旅/LeetCode/滑动窗口","date":"2019-10-18T16:00:00.000Z","updated":"2019-11-10T09:36:18.128Z","comments":true,"path":"2019/10/19/算法之旅/LeetCode/滑动窗口/","link":"","permalink":"http://yoursite.com/2019/10/19/算法之旅/LeetCode/滑动窗口/","excerpt":"滑动窗口是数组/字符串问题中常用的抽象概念。","text":"滑动窗口是数组/字符串问题中常用的抽象概念。 无重复字符的最长子串 :给定一个字符串，请你找出其中 不含有重复字符 的 最长子串 的长度 暴力法 如果使用暴力法，检查所有的子字符串，则时间复杂度为O(n^3)，耗费时间过多。暴力法会反复检查一个字符串是否含有重复的字符，浪费时间。 滑动窗口 窗口通常是在数组/字符串中由开始和结束索引定义的一系列元素的集合，即 [i, j）（左闭，右开）。而滑动窗口是可以将两个边界向某一方向“滑动”的窗口。 -例:[i, j）向右滑动1个元素，则它将变为[i+1, j+1) 回到我们的问题，我们使用 HashSet 将字符存储在当前窗口 [i, j)（最初 j = i）中。 然后我们向右侧滑动索引 j，如果它不在 HashSet 中，我们会继续滑动 j。直到 s[j] 已经存在于 HashSet 中。此时，我们找到的没有重复字符的最长子字符串将会以索引 i 开头。如果我们对所有的 i 这样做，就可以得到答案。 优化版的滑动窗口 上述的方法最多需要执行 2n 个步骤。事实上，它可以被进一步优化为仅需要 n 个步骤。我们可以定义字符到索引的映射，而不是使用集合来判断一个字符是否存在。 当我们找到重复的字符时，我们可以立即跳过该窗口。 也就是说，如果 j 对应的字符与[i, j-1]重复，则不再让 i++，而是直接跳过[i, j],令 i=j+1; 12345678910111213141516171819202122232425class Solution &#123; public int lengthOfLongestSubstring(String s) &#123; int ans = 0, n = s.length(); //字符对应的索引为下一次不重复的位置，即下一位置 //例：j这个地方与前面重复了，则下一次不重复的位置为j+1 //声明HashMap，形成字符到索引的映射 Map&lt;Character, Integer&gt; map = new HashMap&lt;&gt;(); for(int j = 0, i = 0; j &lt; n; j++)&#123; //如果map中有s[j],则更新i if(map.containsKey(s.charAt(j)))&#123; i = Math.max(map.get(s.charAt(j)), i); &#125; //更新ans ans = Math.max(ans, j-i+1); //将s[j]和它到索引的映射(下一个不重复的位置）加入map //若是已经重复，则是更新索引，更新为下一次不重复的位置 map.put(s.charAt(j), j+1); &#125; return ans; &#125;&#125;","categories":[{"name":"算法之旅","slug":"算法之旅","permalink":"http://yoursite.com/categories/算法之旅/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://yoursite.com/tags/LeetCode/"}]},{"title":"PicGo + Github 图床","slug":"杂七杂八/PicGo+Github实现床图","date":"2019-10-11T16:00:00.000Z","updated":"2020-07-06T04:19:55.658Z","comments":true,"path":"2019/10/12/杂七杂八/PicGo+Github实现床图/","link":"","permalink":"http://yoursite.com/2019/10/12/杂七杂八/PicGo+Github实现床图/","excerpt":"昨天用了七牛云实现了床图，但是突然发现免费的只有30天的时间，到了时间就会换域名。之前的图床就失效了，于是转而薅Github的羊毛。","text":"昨天用了七牛云实现了床图，但是突然发现免费的只有30天的时间，到了时间就会换域名。之前的图床就失效了，于是转而薅Github的羊毛。 PicGo 这是一款图片上传的工具，支持众多图床 创建Github图床 Github国内访问较慢，但是免费的，真香 1.注册Github 这个就不说呢 2.创建一个新公共仓库 3.生成一个token用于操作Github仓库 在个人 Settings / Developer settings / Personal access tokens 内 Generate new token 只需勾选 repo 创建成功后，会生成一串token，这串token只显示一次！ 配置PicGo 1.下载运行PicGo 在这个链接下下载PicGo mac 系统选择 .dmg 下载，windwos 选择 .exe系统 2.配置图床 设定仓库名的时候，是按照“账户名/仓库名的格式填写” 分支名统一填写“master” 存储的路径可以按照我这样子写，就会在仓库下创建一个“img”文件夹，当然也可以不填 3.快捷键修改 根据个人习惯，我这里是这样配置的 最后 将上面的步骤都设置好之后，就可以让自己的Markdown文档更生动形象呢，每次截图之后，都可以按一下 ctrl+shift+c，这样就会将剪切板上面的截图转化为在线网络图片链接，十分快捷。","categories":[{"name":"杂七杂八","slug":"杂七杂八","permalink":"http://yoursite.com/categories/杂七杂八/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]},{"title":"Java学习之旅————单例模式","slug":"学习/Java学习/Java学习之旅——单例模式","date":"2019-10-11T16:00:00.000Z","updated":"2019-11-06T10:29:43.929Z","comments":true,"path":"2019/10/12/学习/Java学习/Java学习之旅——单例模式/","link":"","permalink":"http://yoursite.com/2019/10/12/学习/Java学习/Java学习之旅——单例模式/","excerpt":"郭克华老师在上课讲到的一种设计模式—单例模式。 单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建 单一对象 的最佳方式。","text":"郭克华老师在上课讲到的一种设计模式—单例模式。 单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建 单一对象 的最佳方式。 那么问题来了，为什么创建单一对象呢? 有一些实例只需要创建一次就够了，例如：一个班级只有一个班主任，Windows系统只有一个Task Manager(任务管理器) 单例模式有什么优缺点呢？ 优点 1.在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。 2.避免对资源的多重占用（比如写文件操作）。 缺点 没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。 如何实现单例模式 我们将创建一个 SingleObject 类。SingleObject 类有它的 私有构造函数 和本身的一个 静态实例。 SingleObject 类提供了一个静态方法，供外界获取它的静态实例。SingletonPatternDemo，我们的演示类使用 SingleObject 类来获取 SingleObject 对象。 Step 1 创建一个SingleObject类 12345678910111213public class SingleObject&#123; //创建SingleObject的一个私有静态对象 private static SingleObject instance = new SingObject(); //构造函数私有化 private SingleObject()&#123;&#125; //给外面一个接口，返回唯一可用对象 public static SingleObject getInstance()&#123; return instance; &#125;&#125; Step 2 在外界声明个SingleObject的引用，获取该唯一对象 1SingleObject instance = SingleObject.getInstance(); 这里的实现方式只是一个大致的抽象方法，更详细的如下 懒汉式—线程不安全：最基础的实现方式，线程上下文单例，不需要共享给所有线程，也不需要加synchronize之类的锁，以提高性能 懒汉式—线程安全：加上synchronize之类保证线程安全的基础上的懒汉模式，相对性能很低，大部分时间并不需要同步 饿汉方式。指全局的单例实例在类装载时构建。 双检锁式。在懒汉式基础上利用synchronize关键字和volatile关键字确保第一次创建时没有线程间竞争而产生多个实例，仅第一次创建时同步，性能相对较高 登记式。作为创建类的全局属性存在，创建类被装载时创建 枚举。java中枚举类本身也是一种单例模式 总结 单例模式是设计模式中最简单的形式之一。这一模式的目的是使得类的一个对象成为系统中的唯一实例。它有很多种实现方式，但是文中只给出了大致的思路，以后再学习更进一步的实现方式。","categories":[{"name":"Java学习","slug":"Java学习","permalink":"http://yoursite.com/categories/Java学习/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"Hexo+gayhub搭建个人博客","slug":"杂七杂八/hexo+gayhub","date":"2019-10-11T16:00:00.000Z","updated":"2019-11-06T10:29:24.976Z","comments":true,"path":"2019/10/12/杂七杂八/hexo+gayhub/","link":"","permalink":"http://yoursite.com/2019/10/12/杂七杂八/hexo+gayhub/","excerpt":"经过学姐的安利，我用hexo+gayhub搭建起了第一个个人博客","text":"经过学姐的安利，我用hexo+gayhub搭建起了第一个个人博客 准备 你要有个gayhub账号，虽然在国内访问较慢，但是免费，真香 安装node.js，npm(也可以装cnpm，为npm的淘宝镜像，国内访问速度快） 安装git 有台Windows电脑，还有个女朋友 创建github博客 1. 新建仓库 在github上新建个仓库，命名规则必须为：你的用户名.github.io(我也不知道为什么要这样子哈)，如果没钱的话这个就是你以后的博客地址了。 2.绑定域名 由于我没有钱，所以绑定域名就不说了，你可以买个域名，然后把域名的地址跳转到你的用户名.github.io就行了。 3.配置SSH 这个有什么用呢？给你的博客加个密，防止其他人提交代码。 打开cmd输入： 1$ cd ~/. ssh #检查本机已存在的ssh密钥 如果提示：No such file or directory 说明你是第一次使用git。 1$ ssh-keygen -t rsa -C &quot;邮件地址&quot; 连续三次回车就行了 然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到 .ssh\\id_rsa.pub 文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key： 将刚复制的内容粘贴到key那里，title随便填，保存. 测试是否成功 1$ ssh -T git@github.com # 注意邮箱地址不用改 然后yes就行了。 此外你还配置： 12$ git config --global user.name &quot;****&quot;// 你的github用户名，非昵称$ git config --global user.email &quot;xxx@qq.com&quot;// 填写你的github注册邮箱 这个具体是什么呢？我也不知道呀 安装hexo 首先我们安装个cnpm 前面也说过了，加快下载速度。 我们要用npm下载cnpm，然后以后都用cnpm代替npm (npm:???!!!) 在你的blog文件夹，在空白处点击鼠标右键，选择 Git Bash Here 1$ npm install cnpm -g --registry=https://registry.npm.taobao.org 开始安装hexo 12$ cnpm intall -g hexo-cli #这里原本是 npm intall -g hexo-cli ，但是下载速度较慢所以切换成cnpm，以后都如此 验证是否安装成功 1hexo -v 如果你看不到error，那应该就是成功了，哈 重要的一步来了，初始化 1hexo init 如果最后一行出现 Start blogging with Hexo! 恭喜你，可以开始编写博客了 先测试一下 我们经常用的指令是以下几个： 1234hexo clean #用来清理缓存文件hexo g #hexo generate的缩写，生成文件hexo s #hexo serve的缩写，生成本地预览hexo d #hexo deploy的缩写，部署到服务器 还有一个组合指令 12hexo s -g #生成并本地预览hexo d -g #生成并部署 测试本地运行 1hexo s 打开浏览器，进入 localhost:4000，你会看到hexo自带的一个主题还有 Hello World 更换主题 我最喜欢的就是美化了 由于网上比较推荐的是 yilia，所以我下载了它。 首先下载这个主题，在你的文件夹你 Git Bash Here 1$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 下载的主题都在 themes 文件夹 修改源文件夹下的 _config.yml 中的 theme: landscape 改为theme: yilia ，然后重新执行 hexo g 来重新生成。 hexo s 后进入 localhost:4000 就能预览你的主题了。 如果出现一些莫名其妙的问题，可以先执行 hexo clean 来清理一下内容，然后再来重新生成和发布。 你可以在 themes文件夹下的 _config.yml 修改有关主题的内容，这里不多加详述了。 部署到Github 如果你一切都配置好了，发布上传很容易，一句 hexo d 就搞定，当然关键还是你要把所有东西配置好。 首先，ssh key肯定要配置好。 其次，配置 _config.yml 中有关 deploy的部分： 12345deploy: type: github repository: https://github.com/******.github.io.git #你的仓库地址 branch: master#注意空格 此外还装一个插件 1cnpm install hexo-deployer-git --save 最后的最后 hexo d就能把你的博客部署到GitHub上了。 以后你可以打开 你的用户名.github.io，进入你的博客。 #可以写博客了 由于我基本不会命令行，所以我没用命令行。 你可以直接新建一个 .md的文件，然后用 Markdown的编辑器打开就可以开始写你的博客了（我用的编辑器是 VSCode + Markdown Preview Enhanced插件），这里的 .md的文件使用 Markdown语法写的，十分简单 ，几分钟速成。 写好后，把文件放在你的文件夹下的 source/_posts就行了。 然后用组合命令行 1hexo d -g 就能直接生成本地文件并且部署到服务器上。 最终效果 也就是本博客 EasonZzZz.github.io","categories":[{"name":"杂七杂八","slug":"杂七杂八","permalink":"http://yoursite.com/categories/杂七杂八/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]},{"title":"npm(cnpm)安装/卸载模块","slug":"杂七杂八/cnpm安装卸载模块","date":"2019-10-11T16:00:00.000Z","updated":"2019-11-06T10:28:53.970Z","comments":true,"path":"2019/10/12/杂七杂八/cnpm安装卸载模块/","link":"","permalink":"http://yoursite.com/2019/10/12/杂七杂八/cnpm安装卸载模块/","excerpt":"因为发现七牛云不行，所以卸载了有关的插件。","text":"因为发现七牛云不行，所以卸载了有关的插件。 安装模块 12npm install xxx #利用 npm 安装xxx模块到当前命令行所在目录npm install -g xxx #利用npm安装全局模块xxx 本地安装时将模块写入 package.json 123npm install xxx #安装但不写入package.jsonnpm install xxx –save #安装并写入package.json的”dependencies”中npm install xxx –save -dev #安装并写入package.json的”devDependencies”中 删除模块 12npm uninstall xxx #删除xxx模块npm uninstall -g xxx #删除全局模块xxx","categories":[{"name":"杂七杂八","slug":"杂七杂八","permalink":"http://yoursite.com/categories/杂七杂八/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]},{"title":"JDK-13配置环境","slug":"学习/Java学习/JDK-13配置","date":"2019-10-11T16:00:00.000Z","updated":"2019-11-06T10:28:21.718Z","comments":true,"path":"2019/10/12/学习/Java学习/JDK-13配置/","link":"","permalink":"http://yoursite.com/2019/10/12/学习/Java学习/JDK-13配置/","excerpt":"目前最新JDK-13的配置环境方法，虽然我也不懂为什么这样弄，但是能用就行。","text":"目前最新JDK-13的配置环境方法，虽然我也不懂为什么这样弄，但是能用就行。 下载并安装JDK-13 当然实在 官网 下载了 生成jre文件夹 打开cmd，cd到D:\\Java\\jdk-13(你的安装文件夹) 然后输入并运行命令：bin\\jlink.exe --module-path jmods --add-modules java.desktop --output jre 配置JDK-13环境 系统变量添加 Java_Home D:\\Java\\jdk-13 ClassPath .;%Java_Home%\\bin;%Java_Home%\\lib\\dt.jar;%Java_Home%\\lib\\tools.jar(注意.号) 系统变量Path里追加 ;%Java_Home%\\bin;%Java_Home%\\jre\\bin 最后检查是否成功 123javajavacjava -version 能看到很多东西应该就是成功了，哈哈哈哈哈","categories":[{"name":"Java学习","slug":"Java学习","permalink":"http://yoursite.com/categories/Java学习/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]}]}